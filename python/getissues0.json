{
  "data": {
    "getIssues": {
      "issues": [
        {
          "id": "656edc0b64210a0f3c679146",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_AWS_20-false",
          "mainTitle": "AWS S3 Bucket is configured for PUBLIC read access",
          "secondTitle": "S3 buckets that are publically accessible are one of the leading causes of data exposure and loss. An S3 bucket with public read access provides attackers the ability to access stored data.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679194",
          "issueId": "584352228-oxPolicy_securityScan_55-iac.kubectl-proxy-exposed-false",
          "mainTitle": "K8s cluster should not be exposed to public internet",
          "secondTitle": "When running 'kubectl proxy' command with the following flags '--address=`0.0.0.0` --accept-hosts `.*`', the proxy on the workstation it ran from will now listen and forward authorized and authenticated requests to the API server from any host that has HTTP access to the workstation. The API server permits anyone to access the API server, query the cluster and harvest sensitive data and possibly gain access into the entire cluster",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c67940e",
          "issueId": "584352228-oxPolicy_securityScan_120-org.springframework:spring-web_5.3.19",
          "mainTitle": "spring-web@5.3.19 is a Java direct dependency having 1 direct and 1 indirect vulnerabilities. CVE-2016-1000027 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "org.springframework:spring-web\\@5.3.19 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct and 1 indirect vulnerabilities<br>&bull; 2 vulnerabilities with  publicly available exploits<br>&bull; 1 indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br><br>\n          The following 2 dependencies have vulnerabilities: org.springframework:spring-web\\@5.3.19, org.springframework:spring-beans\\@5.1.4.RELEASE",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679455",
          "issueId": "584352228-oxPolicy_securityScan_120-org.eclipse.jetty:jetty-server_9.3.20.v20170531",
          "mainTitle": "jetty-server@9.3.20.v20170531 is a Java direct dependency having 12 direct and 2 indirect vulnerabilities. CVE-2017-7657 (CVSS:9.8, Incorrect Calculation) is the most severe vulnerability.",
          "secondTitle": "org.eclipse.jetty:jetty-server\\@9.3.20.v20170531 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 12 direct and 2 indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 4 indirect dependencies<br><br>There are a total of 14 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 3<br>&bull; Medium : 6<br>&bull; Low : 3<br><br>\n          The following 2 dependencies have vulnerabilities: org.eclipse.jetty:jetty-server\\@9.3.20.v20170531, org.eclipse.jetty:jetty-http\\@9.4.14.v20181114",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 14,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679501",
          "issueId": "584352228-oxPolicy_securityScan_120-org.springframework.boot:spring-boot-starter-web_2.1.2.RELEASE",
          "mainTitle": "spring-boot-starter-web@2.1.2.RELEASE is a Java direct dependency having 1 direct and 17 indirect vulnerabilities. CVE-2020-1938 (CVSS:9.8, Improper Privilege Management) is the most severe vulnerability.",
          "secondTitle": "org.springframework.boot:spring-boot-starter-web\\@2.1.2.RELEASE is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct and 17 indirect vulnerabilities<br>&bull; 2 vulnerabilities with  publicly available exploits<br>&bull; 14 indirect dependencies<br><br>There are a total of 18 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 3<br>&bull; High : 7<br>&bull; Medium : 8<br><br>\n          The following 5 dependencies have vulnerabilities: org.apache.tomcat.embed:tomcat-embed-core\\@9.0.14, org.springframework:spring-webmvc\\@5.1.4.RELEASE, org.springframework.boot:spring-boot-starter-web\\@2.1.2.RELEASE, org.springframework:spring-expression\\@5.1.4.RELEASE, org.hibernate.validator:hibernate-validator\\@6.0.14.Final",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 18,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679850",
          "issueId": "584352228-oxPolicy_securityScan_secrets_1-bf628446cf7e6d6953b6a840b890c433",
          "mainTitle": "Active GitHub Access Token was found in the code of a private repository",
          "secondTitle": "Active GitHub Access Token was found in the code of a private repository. The secret is considered live or active by the system it is meant to connect to.              \n          <br/>GitHub is a platform to build, scale and deliver secure software.\nIt contains your code repositories.\nThe GitHub API key grants authentication to use the GitHub API.\nAn attacker with knowledge of the exposed key will be able to perform different operations such as injecting malicious code, and will have access to all the account\u2019s secrets, permissions, projects, issues, repositories, deployments, pulls, users and more.\nDepending on the roles associated with the key modifications to all accessible projects can be done.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679e03",
          "issueId": "584352228-oxPolicy_deployment_221-openjdk_8_Dockerfile",
          "mainTitle": "openjdk@8 is a base image defined in Dockerfile having 402 vulnerabilities. Top risk: CVE-2019-8457 (CVSS:9.8, Buffer Overflow)",
          "secondTitle": "openjdk\\@8 is the base image used in Dockerfile.<br><br> There are a total of 402 vulnerabilities in openjdk\\@8.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 31<br>&bull; High : 120<br>&bull; Medium : 97<br>&bull; Low : 154<br><br>\n          The following 89 dependencies have vulnerabilities: libdb5.3\\@5.3.28+dfsg1-0.8, libpython3.9-minimal\\@3.9.2-1, libpython3.9-stdlib\\@3.9.2-1, python3.9\\@3.9.2-1, python3.9-minimal\\@3.9.2-1, git\\@1:2.30.2-1, git-man\\@1:2.30.2-1, libapr1\\@1.7.0-6+deb11u1, curl\\@7.74.0-1.3+deb11u1, libcurl4\\@7.74.0-1.3+deb11u1, libcurl3-gnutls\\@7.74.0-1.3+deb11u2, libksba8\\@1.5.0-3, zlib1g\\@1:1.2.11.dfsg-2+deb11u1, openssh-client\\@1:8.4p1-5+deb11u1, libtasn1-6\\@4.16.0-2, libpcre2-8-0\\@10.36-2, libgssapi-krb5-2\\@1.18.3-6+deb11u1, libk5crypto3\\@1.18.3-6+deb11u1, libkrb5-3\\@1.18.3-6+deb11u1, libkrb5support0\\@1.18.3-6+deb11u1...+ 69 more",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 402,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edc4364210a0f3c689ce1",
          "issueId": "584102675-oxPolicy_securityScan_secrets_1-60b9ec180b7763558ad80ec2bd6213b2",
          "mainTitle": "AWS Secret Key was found in the code of a public repository",
          "secondTitle": "AWS Secret Key was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689d44",
          "issueId": "584102675-oxPolicy_securityScan_secrets_1-f833ebdea2eb3e68f5c61e82b8c95f74",
          "mainTitle": "GitHub Fine-Grained Personal Access Token was found in the code of a public repository",
          "secondTitle": "GitHub Fine-Grained Personal Access Token was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1695185723475
        },
        {
          "id": "656edc4364210a0f3c689ddd",
          "issueId": "584102675-oxPolicy_securityScan_secrets_1-08a3edf06017d98c0321d8f27ccb3c2a",
          "mainTitle": "JFrog Registry Credentials was found in the code of a public repository",
          "secondTitle": "JFrog Registry Credentials was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "TomerOx"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1701763814500
        },
        {
          "id": "656edc4364210a0f3c689fb2",
          "issueId": "584102675-oxPolicy_typosquatting_1-serverles_3.27.1",
          "mainTitle": "serverles@3.27.1 is a JavaScript direct dependency typosquatting 'serverless'",
          "secondTitle": "serverles&#64;3.27.1 is a JavaScript direct open-source malicious dependency typosquatting the library 'serverless'. Typosquatting was determined due to the name and metadata similarity between the malicious library \u2018serverles' and the legitimate library 'serverless\u2019.<br><br>&bull; Malicious library 'serverles' are NOT referenced in your code<br>&bull; Malicious library 'serverles' is hosted in registry 'npm'<br>&bull; Legitimate library 'serverless' is hosted in registry 'npm'<br><br>Typosquatting is a malicious tactic where attackers publish packages with names resembling legitimate ones, exploiting typing errors to trick users into downloading harmful code or vulnerabilities.<br><br>Typosquatting serverles&#64;3.27.1 has:<br>&bull; Homepage - https://www.npmjs.com/package/serverles/v/3.27.1",
          "name": "Typosquatting dependency in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_typosquatting_1",
            "name": "Typosquatting dependency in code",
            "detailedDescription": "Open-source typosquatting is an attack where an attacker creates a package or library with a name similar to a popular open-source package or library. This is done in the hope that users will mistakenly install the dependency, which could contain malware or malicious code. Using a typosquatting dependency can lead to data theft, remote code execution, lateral movement, VM takeovers, etc."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1e64210a0f3c6a3ff8",
          "issueId": "*GitHub-Settings (OX-Security-Demo)-oxPolicy_depConfusion-GitHub_OX-Security-Demo_private-org-scope-at-azure",
          "mainTitle": "The internal organization scope @private-org-scope-at-azure is open to dependency confusion attacks on the NPM public registry",
          "secondTitle": "Dependency confusion attacks can have serious impacts, such as data breaches, service disruptions, and resource hijacking.<br>\n<br>\nThe availability of organizational scope @private-org-scope-at-azure for public registration on NPM can enable such attacks. Attackers could register this scope and publish malicious software packages with the same names as your internal ones. This could result in your systems downloading harmful packages instead of your safe, internal ones. <br>\n        <br>\n        <br>\n&bull; @private-org-scope-at-azure is used as an internal organization scope on the Microsoft Azure registry private registry, at: https://pkgs.dev.azure.com/. <br>\n&bull; @private-org-scope-at-azure is used in 2 repos",
          "name": "Dependency Confusion: Organization scope in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "eyalatox"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_depConfusion",
            "name": "Dependency Confusion: Organization scope in code",
            "detailedDescription": "Dependency confusion arises when software applications mistakenly use a rogue version of a dependency due to naming collisions between internal and public software dependencies. This can lead to unauthorized code execution, data breaches, and service disruption. With the growing reliance on open-source components in software development, the threat and potential consequences of these attacks are amplified."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "*GitHub-Settings (OX-Security-Demo)",
            "name": "*GitHub-Settings (OX-Security-Demo)",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": true
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1e64210a0f3c6a4007",
          "issueId": "*GitHub-Settings (OX-Security-Demo)-oxPolicy_depConfusion-GitHub_OX-Security-Demo_org-private-scope-yarnrc-yml",
          "mainTitle": "The internal organization scope @org-private-scope-yarnrc-yml is open to dependency confusion attacks on the NPM public registry",
          "secondTitle": "Dependency confusion attacks can have serious impacts, such as data breaches, service disruptions, and resource hijacking.<br>\n<br>\nThe availability of organizational scope @org-private-scope-yarnrc-yml for public registration on NPM can enable such attacks. Attackers could register this scope and publish malicious software packages with the same names as your internal ones. This could result in your systems downloading harmful packages instead of your safe, internal ones. <br>\n        <br>\n        <br>\n&bull; @org-private-scope-yarnrc-yml is used as an internal organization scope on the Microsoft Azure registry private registry, at: https://pkgs.dev.azure.com/. <br>\n&bull; @org-private-scope-yarnrc-yml is used in 1 repo",
          "name": "Dependency Confusion: Organization scope in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "eyalatox"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_depConfusion",
            "name": "Dependency Confusion: Organization scope in code",
            "detailedDescription": "Dependency confusion arises when software applications mistakenly use a rogue version of a dependency due to naming collisions between internal and public software dependencies. This can lead to unauthorized code execution, data breaches, and service disruption. With the growing reliance on open-source components in software development, the threat and potential consequences of these attacks are amplified."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "*GitHub-Settings (OX-Security-Demo)",
            "name": "*GitHub-Settings (OX-Security-Demo)",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": true
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1f64210a0f3c6a53a9",
          "issueId": "584102675-oxPolicy_policyEditableWiki_1",
          "mainTitle": "Public wiki for repo is editable by anyone",
          "secondTitle": "Public wiki for repo is editable by anyone. This means that anyone can create a GitHub account and then add links in the wiki pointing to malware.",
          "name": "Repo wiki publicly editable",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_policyEditableWiki_1",
            "name": "Repo wiki publicly editable",
            "detailedDescription": "Wikis for public repositories are used frequently to determine where to download the latest packages for a project. Providing edit access to anyone with a source control account provides threat actors with a method to point to their own projects hosting malicious binaries. This has already been seen in the wild."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693638009592
        },
        {
          "id": "656edccb64210a0f3c695b45",
          "issueId": "310663043-oxPolicy_deployment_221-openjdk_11.0.1-jre-slim-stretch_docker/Dockerfile",
          "mainTitle": "openjdk@11.0.1-jre-slim-stretch is a base image defined in docker/Dockerfile having 296 vulnerabilities. Top risk: CVE-2017-12424 (CVSS:9.8, Buffer Overflow)",
          "secondTitle": "openjdk\\@11.0.1-jre-slim-stretch is the base image used in docker/Dockerfile.<br><br> There are a total of 296 vulnerabilities in openjdk\\@11.0.1-jre-slim-stretch.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 29<br>&bull; High : 108<br>&bull; Medium : 97<br>&bull; Low : 62<br><br>\n          The following 74 dependencies have vulnerabilities: login\\@1:4.4-4.1, passwd\\@1:4.4-4.1, libpng16-16\\@1.6.28-1, libidn11\\@1.33-1, libc-bin\\@2.24-11+deb9u3, libc6\\@2.24-11+deb9u3, multiarch-support\\@2.24-11+deb9u3, bzip2\\@1.0.6-8.1, libbz2-1.0\\@1.0.6-8.1, libnss3\\@2:3.26.2-1.1+deb9u1, libdb5.3\\@5.3.28-12+deb9u1, libsqlite3-0\\@3.16.2-5+deb9u1, libx11-6\\@2:1.6.4-3+deb9u1, libx11-data\\@2:1.6.4-3+deb9u1, liblz4-1\\@0.0\\~r131-2+b1, libssl1.1\\@1.1.0j-1\\~deb9u1, openssl\\@1.1.0j-1\\~deb9u1, dpkg\\@1.18.25, libexpat1\\@2.2.0-2+deb9u1, libfreetype6\\@2.6.3-3.2...+ 54 more",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ren\u00e9 Zubcevic"
          ],
          "occurrences": 296,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edccb64210a0f3c69603b",
          "issueId": "310663043-oxPolicy_deployment_221-openjdk_11.0.1-jre-slim-stretch_webgoat-server/Dockerfile",
          "mainTitle": "openjdk@11.0.1-jre-slim-stretch is a base image defined in webgoat-server/Dockerfile having 296 vulnerabilities. Top risk: CVE-2017-12424 (CVSS:9.8, Buffer Overflow)",
          "secondTitle": "openjdk\\@11.0.1-jre-slim-stretch is the base image used in webgoat-server/Dockerfile.<br><br> There are a total of 296 vulnerabilities in openjdk\\@11.0.1-jre-slim-stretch.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 29<br>&bull; High : 108<br>&bull; Medium : 97<br>&bull; Low : 62<br><br>\n          The following 74 dependencies have vulnerabilities: login\\@1:4.4-4.1, passwd\\@1:4.4-4.1, libpng16-16\\@1.6.28-1, libidn11\\@1.33-1, libc-bin\\@2.24-11+deb9u3, libc6\\@2.24-11+deb9u3, multiarch-support\\@2.24-11+deb9u3, bzip2\\@1.0.6-8.1, libbz2-1.0\\@1.0.6-8.1, libnss3\\@2:3.26.2-1.1+deb9u1, libdb5.3\\@5.3.28-12+deb9u1, libsqlite3-0\\@3.16.2-5+deb9u1, libx11-6\\@2:1.6.4-3+deb9u1, libx11-data\\@2:1.6.4-3+deb9u1, liblz4-1\\@0.0\\~r131-2+b1, libssl1.1\\@1.1.0j-1\\~deb9u1, openssl\\@1.1.0j-1\\~deb9u1, dpkg\\@1.18.25, libexpat1\\@2.2.0-2+deb9u1, libfreetype6\\@2.6.3-3.2...+ 54 more",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 296,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edccb64210a0f3c69652f",
          "issueId": "310663043-oxPolicy_deployment_221-resin/rpi-raspbian_jessie_webgoat-server/src/main/docker_rpi3/Dockerfile",
          "mainTitle": "resin/rpi-raspbian@jessie is a base image defined in webgoat-server/src/main/docker_rpi3/Dockerfile having 197 vulnerabilities. Top risk: CVE-2016-9841 (CVSS:9.8)",
          "secondTitle": "resin/rpi-raspbian\\@jessie is the base image used in webgoat-server/src/main/docker_rpi3/Dockerfile.<br><br> There are a total of 197 vulnerabilities in resin/rpi-raspbian\\@jessie.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 15<br>&bull; High : 64<br>&bull; Medium : 68<br>&bull; Low : 50<br><br>\n          The following 61 dependencies have vulnerabilities: zlib1g\\@1:1.2.8.dfsg-2, login\\@1:4.2-3+deb8u4, passwd\\@1:4.2-3+deb8u4, perl-base\\@5.20.2-3+deb8u12, libbz2-1.0\\@1.0.6-7, curl\\@7.38.0-4+deb8u13, libcurl3\\@7.38.0-4+deb8u13, libssh2-1\\@1.4.3-4.1+deb8u1, sudo\\@1.8.10p3-1+deb8u5, gcc-4.8-base\\@4.8.4-1, gcc-4.9-base\\@4.9.2-10+deb8u2, libgcc1\\@1:4.9.2-10+deb8u2, libstdc++6\\@4.9.2-10+deb8u2, apt\\@1.0.9.8.4, libapt-pkg4.12\\@1.0.9.8.4, bsdutils\\@1:2.25.2-6, libblkid1\\@2.25.2-6, libmount1\\@2.25.2-6, libsmartcols1\\@2.25.2-6, libuuid1\\@2.25.2-6...+ 41 more",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 197,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656edccb64210a0f3c696866",
          "issueId": "310663043-oxPolicy_deployment_221-openjdk_11.0.1-jre-slim-stretch_webwolf/Dockerfile",
          "mainTitle": "openjdk@11.0.1-jre-slim-stretch is a base image defined in webwolf/Dockerfile having 296 vulnerabilities. Top risk: CVE-2017-12424 (CVSS:9.8, Buffer Overflow)",
          "secondTitle": "openjdk\\@11.0.1-jre-slim-stretch is the base image used in webwolf/Dockerfile.<br><br> There are a total of 296 vulnerabilities in openjdk\\@11.0.1-jre-slim-stretch.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 29<br>&bull; High : 108<br>&bull; Medium : 97<br>&bull; Low : 62<br><br>\n          The following 74 dependencies have vulnerabilities: login\\@1:4.4-4.1, passwd\\@1:4.4-4.1, libpng16-16\\@1.6.28-1, libidn11\\@1.33-1, libc-bin\\@2.24-11+deb9u3, libc6\\@2.24-11+deb9u3, multiarch-support\\@2.24-11+deb9u3, bzip2\\@1.0.6-8.1, libbz2-1.0\\@1.0.6-8.1, libnss3\\@2:3.26.2-1.1+deb9u1, libdb5.3\\@5.3.28-12+deb9u1, libsqlite3-0\\@3.16.2-5+deb9u1, libx11-6\\@2:1.6.4-3+deb9u1, libx11-data\\@2:1.6.4-3+deb9u1, liblz4-1\\@0.0\\~r131-2+b1, libssl1.1\\@1.1.0j-1\\~deb9u1, openssl\\@1.1.0j-1\\~deb9u1, dpkg\\@1.18.25, libexpat1\\@2.2.0-2+deb9u1, libfreetype6\\@2.6.3-3.2...+ 54 more",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 296,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656eded464210a0f3c6a1bc1",
          "issueId": "585303099-oxPolicy_securityScan_secrets_1-bf628446cf7e6d6953b6a840b890c433",
          "mainTitle": "Active GitHub Access Token was found in the code of a private repository",
          "secondTitle": "Active GitHub Access Token was found in the code of a private repository. The secret is considered live or active by the system it is meant to connect to.              \n          <br/>GitHub is a platform to build, scale and deliver secure software.\nIt contains your code repositories.\nThe GitHub API key grants authentication to use the GitHub API.\nAn attacker with knowledge of the exposed key will be able to perform different operations such as injecting malicious code, and will have access to all the account\u2019s secrets, permissions, projects, issues, repositories, deployments, pulls, users and more.\nDepending on the roles associated with the key modifications to all accessible projects can be done.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded564210a0f3c6a2000",
          "issueId": "585303099-oxPolicy_deployment_221-python_3.11.1_Dockerfile",
          "mainTitle": "python@3.11.1 is a base image defined in Dockerfile having 1797 vulnerabilities. Top risk: CVE-2019-8457 (CVSS:9.8, Buffer Overflow)",
          "secondTitle": "python\\@3.11.1 is the base image used in Dockerfile.<br><br> There are a total of 1797 vulnerabilities in python\\@3.11.1.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 25<br>&bull; High : 363<br>&bull; Medium : 608<br>&bull; Low : 801<br><br>\n          The following 217 dependencies have vulnerabilities: libdb5.3\\@5.3.28+dfsg1-0.8, libdb5.3-dev\\@5.3.28+dfsg1-0.8, libpython3.9-minimal\\@3.9.2-1, libpython3.9-stdlib\\@3.9.2-1, python3.9\\@3.9.2-1, python3.9-minimal\\@3.9.2-1, libaom0\\@1.0.0.errata1-3, libde265-0\\@1.0.8-1, libapr1\\@1.7.0-6+deb11u1, openssh-client\\@1:8.4p1-5+deb11u1, curl\\@7.74.0-1.3+deb11u5, libcurl3-gnutls\\@7.74.0-1.3+deb11u5, libcurl4\\@7.74.0-1.3+deb11u5, libcurl4-openssl-dev\\@7.74.0-1.3+deb11u5, zlib1g\\@1:1.2.11.dfsg-2+deb11u2, zlib1g-dev\\@1:1.2.11.dfsg-2+deb11u2, linux-libc-dev\\@5.10.162-1, libbluetooth-dev\\@5.55-3.1, libbluetooth3\\@5.55-3.1, libtiff-dev\\@4.2.0-1+deb11u3...+ 197 more",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1797,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1696315218205
        },
        {
          "id": "656eded664210a0f3c6a3b9a",
          "issueId": "585303099-oxPolicy_deployment_221-datadog/agent_6.0.2_Dockerfile.ddAgent",
          "mainTitle": "datadog/agent@6.0.2 is a base image defined in Dockerfile.ddAgent having 182 vulnerabilities. Top risk: CVE-2017-12424 (CVSS:9.8, Buffer Overflow)",
          "secondTitle": "datadog/agent\\@6.0.2 is the base image used in Dockerfile.ddAgent.<br><br> There are a total of 182 vulnerabilities in datadog/agent\\@6.0.2.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 15<br>&bull; High : 74<br>&bull; Medium : 40<br>&bull; Low : 53<br><br>\n          The following 44 dependencies have vulnerabilities: login\\@1:4.4-4.1, passwd\\@1:4.4-4.1, libc-bin\\@2.24-11+deb9u1, libc6\\@2.24-11+deb9u1, multiarch-support\\@2.24-11+deb9u1, perl-base\\@5.24.1-3+deb9u2, libbz2-1.0\\@1.0.6-8.1, libdb5.3\\@5.3.28-12+deb9u1, liblz4-1\\@0.0\\~r131-2+b1, dpkg\\@1.18.24, gpgv\\@2.1.18-8\\~deb9u1, libsystemd0\\@232-25+deb9u1, libudev1\\@232-25+deb9u1, gzip\\@1.6-5+b1, liblzma5\\@5.2.2-1.2+b1, gcc-6-base\\@6.3.0-18, libgcc1\\@1:6.3.0-18, libstdc++6\\@6.3.0-18, apt\\@1.4.8, libapt-pkg5.0\\@1.4.8...+ 24 more",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Liad-OX"
          ],
          "occurrences": 182,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656edf1f64210a0f3c6a541d",
          "issueId": "585303099-oxPolicy_member_create_forked_repos_1-mirox13",
          "mainTitle": "User's private repo is a fork of orgs private repo: mirox13",
          "secondTitle": "User mirox13 has forked private repo OX-Security-Demo/Bank-Website-Backend into their personal account. There are 1 forked repos. The forked repo in the user\u2019s account is private. This was verified by analyzing all forks of the organization OX-Security-Demo.<br><br>mirox13 roles in the orgs are:<br>&bull; github_OX-Security-Demo: Member<br><br>",
          "name": "Private repo fork detected",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy",
            "mirox13"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_member_create_forked_repos_1",
            "name": "Private repo fork detected",
            "detailedDescription": "Your organization\u2019s members can create personal repos outside of your organization. Code can be copied from the organization\u2019s private repo to a member's personal repo. This policy will enumerate all personal repos. Repos that may contain the organization\u2019s code will increase severity. Note: this policy is meant to create visibility of where the company\u2019s code may lie. This does not imply malicious intent."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1697176812236
        },
        {
          "id": "656edf1f64210a0f3c6a5438",
          "issueId": "585303099-oxPolicy_member_create_forked_repos_1-eyalatox",
          "mainTitle": "User's private repo is a fork of orgs private repo: eyalatox",
          "secondTitle": "User eyalatox has forked private repo OX-Security-Demo/Bank-Website-Backend into their personal account. There are 1 forked repos. The forked repo in the user\u2019s account is private. This was verified by analyzing all forks of the organization OX-Security-Demo.<br><br>eyalatox roles in the orgs are:<br>&bull; github_OX-Security-Demo: Owner<br><br>",
          "name": "Private repo fork detected",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy",
            "eyalatox"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_member_create_forked_repos_1",
            "name": "Private repo fork detected",
            "detailedDescription": "Your organization\u2019s members can create personal repos outside of your organization. Code can be copied from the organization\u2019s private repo to a member's personal repo. This policy will enumerate all personal repos. Repos that may contain the organization\u2019s code will increase severity. Note: this policy is meant to create visibility of where the company\u2019s code may lie. This does not imply malicious intent."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1f64210a0f3c6a5453",
          "issueId": "585303099-oxPolicy_member_create_forked_repos_1-JohnDow999",
          "mainTitle": "Former User's private repo is a fork of orgs private repo: JohnDow999",
          "secondTitle": "Former User JohnDow999 has forked private repo OX-Security-Demo/Bank-Website-Backend into their personal account. There are 1 forked repos. The forked repo in the user\u2019s account is private. However, user JohnDow999 is no longer a member of any organization affiliated with your company. The fork may have been created when user JohnDow999 still had access to OX-Security-Demo/Bank-Website-Backend. This was verified by analyzing all forks of the organization OX-Security-Demo.",
          "name": "Private repo fork detected",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy",
            "JohnDow999"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_member_create_forked_repos_1",
            "name": "Private repo fork detected",
            "detailedDescription": "Your organization\u2019s members can create personal repos outside of your organization. Code can be copied from the organization\u2019s private repo to a member's personal repo. This policy will enumerate all personal repos. Repos that may contain the organization\u2019s code will increase severity. Note: this policy is meant to create visibility of where the company\u2019s code may lie. This does not imply malicious intent."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf364210a0f3c674cc5",
          "issueId": "672064956-oxPolicy_securityScan_secrets_1-9158b997df99fcfbf44150036b0d2499",
          "mainTitle": "Flask Secret Key was found in the code of a public repository",
          "secondTitle": "Flask Secret Key was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Critical",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edc0b64210a0f3c678a2e",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_100-false",
          "mainTitle": "K8s API Server should only accept API requests through HTTPS",
          "secondTitle": "API requests will frequently contain sensitive data that must be protected from man-in-the-middle attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678a50",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_102-false",
          "mainTitle": "K8s API Server key-value store access should require client authentication",
          "secondTitle": "etcd is a distributed, reliable key-value store used as the backend for the Kubernetes datastore. Access should require the API server to identify itself to the etcd server using a SSL Certificate Authority file.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678a72",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_104-false",
          "mainTitle": "K8s API Server should use better encryption providers",
          "secondTitle": "etcd is a distributed, reliable key-value store used as the backend for the Kubernetes datastore. The encryption providers configured for your etcd datastore are not set up correctly.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678a94",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_105-false",
          "mainTitle": "K8s API Server should use strong cryptographic ciphers",
          "secondTitle": "By default, Kubernetes supports an array of TLS ciphersuites, including a few with known security risks, potentially diminishing the overall protection provided.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678d00",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_68-false",
          "mainTitle": "K8s API Server should not allow anonymous access",
          "secondTitle": "Anonymous access to the API server is enabled. When this feature is enabled, requests that are not otherwise rejected by configured authentication methods are treated as anonymous. These anonymous requests are processed by the API server. Instead of allowing such access, rely on proper authentication methods to authorize access and explicitly disallow anonymous requests.<br/><br/>Note: The risk from this issue greatly increases if the K8s cluster is exposed to the internet.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678d24",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_72-false",
          "mainTitle": "K8s API Server does not authenticate securely with kubelets",
          "secondTitle": "By default, the apiserver does not provide authentication to the kubelet's HTTPS endpoints, leading to anonymous requests from the apiserver.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678d46",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_73-false",
          "mainTitle": "K8s API Server does not validate certificate",
          "secondTitle": "In Kubernetes, connections between the API server and kubelet are used for various functions like fetching logs for pods and using the port-forwarding functionality. By default, the API server does not verify the kubelet's serving certificate, making the connection unsafe to run over untrusted or public networks and vulnerable to man-in-the-middle attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678dab",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_88-false",
          "mainTitle": "K8s API Server is serving APIs through an insecure port",
          "secondTitle": "An insecure port on the apiserver allows unauthenticated and unencrypted access to the master node, potentially enabling attackers to take control of the cluster.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678ed7",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_96-false",
          "mainTitle": "K8s API Server does not validate service account token",
          "secondTitle": "The authentication token's validity is verified by the apiserver, but it does not authenticate the presence of the service account token mentioned in the request in etcd. This results in the ability to use a service account token even after the corresponding service account has been removed.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678efa",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_99-false",
          "mainTitle": "K8s API Server key-value store access does not require server authentication",
          "secondTitle": "etcd is a distributed, reliable key-value store used as the backend for the Kubernetes datastore. The API server must use a client certificate and key to identify itself to the etcd server.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678fa6",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_138-false",
          "mainTitle": "K8s Kubelet Server should not allow anonymous access",
          "secondTitle": "Anonymous access to the Kubelet server is enabled. When this feature is enabled, requests that are not otherwise rejected by configured authentication methods are treated as anonymous. These anonymous requests are processed by the Kubelet server. Instead of allowing such access, rely on proper authentication methods to authorize access and explicitly disallow anonymous requests.<br/><br/>Note: The risk from this issue greatly increases if the K8s cluster is exposed to the internet.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679053",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_148-false",
          "mainTitle": "K8s Kubelet should only communicate through HTTPS",
          "secondTitle": "Kubelete requests will frequently contain sensitive data that must be protected from man-in-the-middle attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679170",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_AWS_21-false",
          "mainTitle": "AWS S3 Object Versioning may not be enabled",
          "secondTitle": "S3 Object Versioning protects against the accidental and/or deliberate deletion of files/objects. With Versioning enabled, deleted files and older versions can be restored.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c6791bb",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV2_AWS_11-false",
          "mainTitle": "AWS Virtual Private Cloud Flow logs not enabled",
          "secondTitle": "VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you have created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs. VPC Flow Logs provide visibility into network traffic that traverses the VPC.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c6791e1",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV2_AWS_12-false",
          "mainTitle": "AWS Virtual Private Cloud default Security Group does not restrict all traffic",
          "secondTitle": "Amazon Virtual Private Cloud (VPC) comes with a default security group that has an initial setting denying all inbound traffic, allowing all outbound traffic, and allowing all traffic between instances assigned to the security group. If you do not specify a security group when you launch an instance, the instance is automatically assigned to this default security group.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679316",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_AWS_24-false",
          "mainTitle": "AWS Security Group allows all traffic on SSH port 22",
          "secondTitle": "AWS Security Group allows all traffic (0.0.0.0/0) on SSH port 22. Allowing unrestricted access to port 22 can expose your instance to attacks such as brute force attacks or man-in-the-middle attacks. Attackers can use this access to gain unauthorized access to your instance and potentially compromise your sensitive data.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679365",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_AWS_8-false",
          "mainTitle": "AWS instances and launch configurations should use securely encrypted EBS volumes",
          "secondTitle": "Amazon Elastic Block Store (EBS) volumes allow you to create encrypted launch configurations when creating EC2 instances and auto scaling. When the entire EBS volume is encrypted, data stored at rest on the volume, disk I/O, snapshots created from the volume, and data in-transit between EBS and EC2 are all encrypted.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c6795c7",
          "issueId": "584352228-oxPolicy_securityScan_120-io.jsonwebtoken:jjwt-jackson_0.10.5",
          "mainTitle": "jjwt-jackson@0.10.5 is a Java direct dependency having 53 indirect vulnerabilities and no direct vulnerabilities. CVE-2019-14379 (CVSS:9.8, Prototype Pollution) is the most severe vulnerability.",
          "secondTitle": "io.jsonwebtoken:jjwt-jackson\\@0.10.5 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 53 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 18 vulnerabilities with  publicly available exploits<br><br>There are a total of 53 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 12<br>&bull; High : 39<br>&bull; Medium : 2<br><br>\n          The following dependency has vulnerabilities: com.fasterxml.jackson.core:jackson-databind\\@2.9.8",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 53,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1697608519894
        },
        {
          "id": "656edc0c64210a0f3c6798ba",
          "issueId": "584352228-oxPolicy_securityScan_secrets_1-eccd3fe89e26af7f062e621c06b75fed",
          "mainTitle": "Base64 Slack Access Token was found in the code of a private repository",
          "secondTitle": "Base64 Slack Access Token was found in the code of a private repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700115948184
        },
        {
          "id": "656edc0c64210a0f3c679d34",
          "issueId": "584352228-oxPolicy_securityScan_205-contrib.owasp.java.ssrf.owasp.java.ssrf.java.net.url-false",
          "mainTitle": "Potential SSRF via URL Input",
          "secondTitle": "Server Side Request Forgery (SSRF) allows an attacker to make requests on behalf of your server. This can expose internal services, leak sensitive data, or even lead to remote code execution if internal services have known vulnerabilities.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc4364210a0f3c689a5f",
          "issueId": "584102675-oxPolicy_securityScan_120-express-fileupload_0.4.0",
          "mainTitle": "express-fileupload@0.4.0 is a JavaScript direct dependency having 3 direct and 1 indirect vulnerabilities. CVE-2020-7699 (CVSS:9.8, Prototype Pollution) is the most severe vulnerability.",
          "secondTitle": "express-fileupload\\@0.4.0 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 3 direct and 1 indirect vulnerabilities<br>&bull; 3 vulnerabilities with  publicly available exploits<br>&bull; 18 indirect dependencies<br><br>There are a total of 4 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 2<br>&bull; Low : 1<br><br>\n          The following 2 dependencies have vulnerabilities: express-fileupload\\@0.4.0, dicer\\@0.2.5",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689eef",
          "issueId": "584102675-oxPolicy_securityScan_205-contrib.nodejsscan.express_xss-false",
          "mainTitle": "Reflected XSS via User Input in Express",
          "secondTitle": "Reflected Cross Site Scripting (XSS) allows an attacker to inject malicious scripts into web pages viewed by other users. These scripts can steal sensitive data like cookies, session tokens, or other personal data, deface web pages, or perform actions on behalf of logged-in users without their knowledge.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc4364210a0f3c689fce",
          "issueId": "584102675-oxPolicy_sbomDeprecated_1-pkg:npm/apollo-server@3.11.1",
          "mainTitle": "Deprecated library directly referenced in code: apollo-server@3.11.1",
          "secondTitle": "Your code contains direct references to library apollo-server which is deprecated",
          "name": "Deprecated direct dependency in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_sbomDeprecated_1",
            "name": "Deprecated direct dependency in code",
            "detailedDescription": "Utilizing libraries that are deprecated may involve high security risks as they are no longer maintained. Companies should look for alternatives if possible."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693638009592
        },
        {
          "id": "656edc4364210a0f3c689fe7",
          "issueId": "584102675-oxPolicy_sbomDeprecated_1-pkg:npm/axios@0.15.3",
          "mainTitle": "Deprecated library directly referenced in code: axios@0.15.3",
          "secondTitle": "Your code contains direct references to library axios which is deprecated",
          "name": "Deprecated direct dependency in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_sbomDeprecated_1",
            "name": "Deprecated direct dependency in code",
            "detailedDescription": "Utilizing libraries that are deprecated may involve high security risks as they are no longer maintained. Companies should look for alternatives if possible."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693638009592
        },
        {
          "id": "656edc4364210a0f3c68a000",
          "issueId": "584102675-oxPolicy_sbomDeprecated_1-pkg:npm/express-fileupload@0.4.0",
          "mainTitle": "Deprecated library directly referenced in code: express-fileupload@0.4.0",
          "secondTitle": "Your code contains direct references to library express-fileupload which is deprecated",
          "name": "Deprecated direct dependency in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_sbomDeprecated_1",
            "name": "Deprecated direct dependency in code",
            "detailedDescription": "Utilizing libraries that are deprecated may involve high security risks as they are no longer maintained. Companies should look for alternatives if possible."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693638009592
        },
        {
          "id": "656edc4364210a0f3c68a019",
          "issueId": "584102675-oxPolicy_sbomDeprecated_1-pkg:npm/rookout@0.1.130",
          "mainTitle": "Deprecated library directly referenced in code: rookout@0.1.130",
          "secondTitle": "Your code contains direct references to library rookout which is deprecated",
          "name": "Deprecated direct dependency in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_sbomDeprecated_1",
            "name": "Deprecated direct dependency in code",
            "detailedDescription": "Utilizing libraries that are deprecated may involve high security risks as they are no longer maintained. Companies should look for alternatives if possible."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693638009592
        },
        {
          "id": "656edf1f64210a0f3c6a5365",
          "issueId": "584352228-oxPolicy_dspm_MainBranchNoCodeReview",
          "mainTitle": "Code reviews may be bypassed via Push Events or Pull Requests with no review enforcement",
          "secondTitle": "Code reviews fors the main branch may be bypassed via <br> <br>\n                      &bull; Push Eventss (direct changes to the branch) <br>\n                      &bull; Pull Requests with nso review or approval enforcement <br> <br>\n          Repositories without protected branches: 34 <br>\n          Repositories with protected branches: 0",
          "name": "Branch Protection not enforced",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "eyalatox"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_dspm_MainBranchNoCodeReview",
            "name": "Branch Protection not enforced",
            "detailedDescription": "Code reviews are considered to be one of the best ways to limit bugs and malicious code pushes by compromised source control accounts. This is why most compliance standards such as SOC2, PCI-DSS, and ISO27001 require all code changes to be reviewed. To enforce this, push events should be disabled and Pull/Merge Requests should require a review/approval."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1f64210a0f3c6a53b9",
          "issueId": "584102675-oxPolicy_dspm_MainBranchNoCodeReview",
          "mainTitle": "Code reviews may be bypassed via Push Events or Pull Requests with no review enforcement",
          "secondTitle": "Code reviews fors the main branch may be bypassed via <br> <br>\n                      &bull; Push Eventss (direct changes to the branch) <br>\n                      &bull; Pull Requests with nso review or approval enforcement <br> <br>\n          Repositories without protected branches: 34 <br>\n          Repositories with protected branches: 0",
          "name": "Branch Protection not enforced",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "eyalatox"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_dspm_MainBranchNoCodeReview",
            "name": "Branch Protection not enforced",
            "detailedDescription": "Code reviews are considered to be one of the best ways to limit bugs and malicious code pushes by compromised source control accounts. This is why most compliance standards such as SOC2, PCI-DSS, and ISO27001 require all code changes to be reviewed. To enforce this, push events should be disabled and Pull/Merge Requests should require a review/approval."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1f64210a0f3c6a53c9",
          "issueId": "584102675-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo Multi-currency-management. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c674238",
          "issueId": "647669373-oxPolicy_securityScan_120-com.typesafe.play:play-json_2.13_2.7.4",
          "mainTitle": "play-json_2.13@2.7.4 is a Java direct dependency having 53 indirect vulnerabilities and no direct vulnerabilities. CVE-2022-36944 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "com.typesafe.play:play-json_2.13\\@2.7.4 is a Scala package that was added as a direct dependency. It contains:<br><br>&bull; 53 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 34 vulnerabilities with  publicly available exploits<br>&bull; 9 indirect dependencies<br><br>There are a total of 53 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 13<br>&bull; High : 38<br>&bull; Medium : 2<br><br>\n          The following 2 dependencies have vulnerabilities: org.scala-lang:scala-library\\@2.13.0, com.fasterxml.jackson.core:jackson-databind\\@2.9.8",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Liran Yogev"
          ],
          "occurrences": 53,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c674399",
          "issueId": "647669373-oxPolicy_securityScan_120-org.apache.commons:commons-text_1.8",
          "mainTitle": "commons-text@1.8 is a Java direct dependency having 1 direct vulnerability and no indirect vulnerabilities. CVE-2022-42889 (CVSS:9.8, Code Injection) is the most severe vulnerability.",
          "secondTitle": "org.apache.commons:commons-text\\@1.8 is a Scala package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; 1 indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br><br>\n          The following dependency has vulnerabilities: org.apache.commons:commons-text\\@1.8",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ariel Cabib"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c6743b7",
          "issueId": "647669373-oxPolicy_securityScan_secrets_1-b63be8842a672887f76eb6e112d26c31",
          "mainTitle": "PGP Private Key was found in the code of a public repository",
          "secondTitle": "PGP Private Key was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c6743ff",
          "issueId": "647669373-oxPolicy_deployment_221-openjdk_8u332-jre-slim-bullseye_docker/hive/Dockerfile",
          "mainTitle": "openjdk@8u332-jre-slim-bullseye is a base image defined in docker/hive/Dockerfile having 142 vulnerabilities. Top risk: CVE-2019-8457 (CVSS:9.8, Buffer Overflow)",
          "secondTitle": "openjdk\\@8u332-jre-slim-bullseye is the base image used in docker/hive/Dockerfile.<br><br> There are a total of 142 vulnerabilities in openjdk\\@8u332-jre-slim-bullseye.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 6<br>&bull; High : 36<br>&bull; Medium : 32<br>&bull; Low : 68<br><br>\n          The following 49 dependencies have vulnerabilities: libdb5.3\\@5.3.28+dfsg1-0.8, zlib1g\\@1:1.2.11.dfsg-2+deb11u1, libtasn1-6\\@4.16.0-2, libpcre2-8-0\\@10.36-2, libgssapi-krb5-2\\@1.18.3-6+deb11u1, libk5crypto3\\@1.18.3-6+deb11u1, libkrb5-3\\@1.18.3-6+deb11u1, libkrb5support0\\@1.18.3-6+deb11u1, perl-base\\@5.32.1-4+deb11u2, libc-bin\\@2.31-13+deb11u3, libc6\\@2.31-13+deb11u3, e2fsprogs\\@1.46.2-2, libcom-err2\\@1.46.2-2, libext2fs2\\@1.46.2-2, libss2\\@1.46.2-2, logsave\\@1.46.2-2, bash\\@5.1-2+deb11u1, libtinfo6\\@6.2+20201114-2, ncurses-base\\@6.2+20201114-2, ncurses-bin\\@6.2+20201114-2...+ 29 more",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "snyk-bot"
          ],
          "occurrences": 142,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694250613354
        },
        {
          "id": "656edcca64210a0f3c69503c",
          "issueId": "310663043-oxPolicy_securityScan_secrets_1-generic-password-false-false",
          "mainTitle": "Generic Password was found in the code of a public repository",
          "secondTitle": "Generic Password was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c69506d",
          "issueId": "310663043-oxPolicy_securityScan_secrets_1-generic-key-false-false",
          "mainTitle": "Generic Key was found in the code of a public repository",
          "secondTitle": "Generic Key was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1695880227655
        },
        {
          "id": "656edcca64210a0f3c69509c",
          "issueId": "310663043-oxPolicy_securityScan_secrets_1-generic-basic-authentication-password:1-false-false",
          "mainTitle": "Generic Basic Authentication Password was found in the code of a public repository",
          "secondTitle": "Generic Basic Authentication Password was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ren\u00e9 Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690864510807
        },
        {
          "id": "656edcca64210a0f3c695131",
          "issueId": "310663043-oxPolicy_securityScan_205-contrib.owasp.java.ssrf.owasp.java.ssrf.java.net.url-false",
          "mainTitle": "Potential SSRF via URL Input",
          "secondTitle": "Server Side Request Forgery (SSRF) allows an attacker to make requests on behalf of your server. This can expose internal services, leak sensitive data, or even lead to remote code execution if internal services have known vulnerabilities.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edccb64210a0f3c695b17",
          "issueId": "310663043-oxPolicy_securityScan_205-java.spring.security.injection.tainted-file-path-false",
          "mainTitle": "Path Traversal vulnerability due to user controlled path variables",
          "secondTitle": "If an attacker able to modify path variable passed to functions, he would be able to access files on the system",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edccb64210a0f3c696d5a",
          "issueId": "310663043-oxPolicy_policyPiiHardcoded_1-email-address-michaelhorty/WebGoat",
          "mainTitle": "Email Address is exposed in code",
          "secondTitle": "Email Address is exposed in code. \n          Anyone can access the public repo and view the PII. This may violate any number of compliance and privacy standards.",
          "name": "PII embedded in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_policyPiiHardcoded_1",
            "name": "PII embedded in code",
            "detailedDescription": "Hardcoding PII within application code poses significant security and privacy risks. This practice exposes sensitive user information and can result in regulatory violations, especially under strict data protection frameworks. Ensuring that codebases are free from hardcoded PII is essential to preserve user trust, maintain regulatory compliance, and protect organizational reputation."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700115948184
        },
        {
          "id": "656edf1f64210a0f3c6a5309",
          "issueId": "647669373-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo Backend-Server. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a0fd6",
          "issueId": "585303099-oxPolicy_codeSbomLicenses_1-pkg:pypi/ldap3@2.5.1",
          "mainTitle": "Library with unapproved license directly referenced in code: ldap3@2.5.1 (GNU Lesser General Public License v3 (LGPLv3))",
          "secondTitle": "Your code contains direct reference to ldap3 which has an unapproved license",
          "name": "Unapproved license used by direct dependency in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_codeSbomLicenses_1",
            "name": "Unapproved license used by direct dependency in code",
            "detailedDescription": "Using unauthorized libraries based on their licenses may require your project to be open sourced or lead to copyright infringement. A U.S. Federal court has ruled that an open-source license is an enforceable contract."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693638009592
        },
        {
          "id": "656eded464210a0f3c6a0fec",
          "issueId": "585303099-oxPolicy_codeSbomLicenses_1-pkg:pypi/python-gitlab@2.10.1",
          "mainTitle": "Library with unapproved license directly referenced in code: python-gitlab@2.10.1 (LGPL-3.0)",
          "secondTitle": "Your code contains direct reference to python-gitlab which has an unapproved license",
          "name": "Unapproved license used by direct dependency in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_codeSbomLicenses_1",
            "name": "Unapproved license used by direct dependency in code",
            "detailedDescription": "Using unauthorized libraries based on their licenses may require your project to be open sourced or lead to copyright infringement. A U.S. Federal court has ruled that an open-source license is an enforceable contract."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693638009592
        },
        {
          "id": "656eded464210a0f3c6a18d2",
          "issueId": "585303099-oxPolicy_securityScan_120-cryptography_3.1.1",
          "mainTitle": "cryptography@3.1.1 is a Python direct dependency having 8 direct vulnerabilities and no indirect vulnerabilities. CVE-2020-36242 (CVSS:9.1, Incorrect Calculation) is the most severe vulnerability.",
          "secondTitle": "cryptography\\@3.1.1 is a Python package that was added as a direct dependency. It contains:<br><br>&bull; 8 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 2 vulnerabilities with  publicly available exploits<br>&bull; 3 indirect dependencies<br><br>There are a total of 8 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 1<br>&bull; Medium : 3<br>&bull; Low : 3<br><br>\n          The following dependency has vulnerabilities: cryptography\\@3.1.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 8,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a19c5",
          "issueId": "585303099-oxPolicy_securityScan_120-starkbank-ecdsa_2.0.0",
          "mainTitle": "starkbank-ecdsa@2.0.0 is a Python direct dependency having 2 direct vulnerabilities and no indirect vulnerabilities. CVE-2021-43572 (CVSS:9.8, Improper Verification of Cryptographic Signature) is the most severe vulnerability.",
          "secondTitle": "starkbank-ecdsa\\@2.0.0 is a Python package that was added as a direct dependency. It contains:<br><br>&bull; 2 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: starkbank-ecdsa\\@2.0.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "mirox13"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1697608519894
        },
        {
          "id": "656eded464210a0f3c6a1b83",
          "issueId": "585303099-oxPolicy_securityScan_secrets_1-1258893754726807bdf87d2781dc5fdd",
          "mainTitle": "Active AWS Secret Key was found in the code of a private repository",
          "secondTitle": "Active AWS Secret Key was found in the code of a private repository. The secret is considered live or active by the system it is meant to connect to.              \n          <br/>AWS is a cloud platform.\nThe secret access key is used to sign programmatic requests that you make to AWS.\nAn attacker with knowledge of the exposed key will be able to access any and all resources attached to the key.\nThis can allow direct access to AWS services with potential permissions to add, delete, monitor and edit services.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded564210a0f3c6a1c42",
          "issueId": "585303099-oxPolicy_securityScan_secrets_1-0d08327689aace464939a3dd2742b474",
          "mainTitle": "Fastly API key was found in the code of a private repository",
          "secondTitle": "Fastly API key was found in the code of a private repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded564210a0f3c6a1eb8",
          "issueId": "585303099-oxPolicy_securityScan_205-B312-false",
          "mainTitle": "Data leak possible due to usage of Telnet-related functions",
          "secondTitle": "A Telnet-related function is being used. The Telnet protocol communicates over plaintext, meaning that data transmitted, including usernames and passwords, can be easily intercepted and read by attackers.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded564210a0f3c6a1eeb",
          "issueId": "585303099-oxPolicy_securityScan_205-B321-false",
          "mainTitle": "Data leak possible by using insecure FTP protocol",
          "secondTitle": "A FTP-related module is being imported. FTP is insecure, and not recommended to be used.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded564210a0f3c6a1f1e",
          "issueId": "585303099-oxPolicy_securityScan_205-B401-false",
          "mainTitle": "Data leak possible by using insecure Telnet protocol",
          "secondTitle": "A Telnet-related module is being imported. The Telnet protocol communicates over plaintext, meaning that data transmitted, including usernames and passwords, can be easily intercepted and read by attackers.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded564210a0f3c6a1f4e",
          "issueId": "585303099-oxPolicy_securityScan_205-B402-false",
          "mainTitle": "Data leak possible by using insecure FTP protocol",
          "secondTitle": "A FTP-related module is being imported. FTP is insecure, and not recommended to be used.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded564210a0f3c6a1fe8",
          "issueId": "585303099-oxPolicy_depConfusionPython-private-pytorch-pkg_undefined",
          "mainTitle": "The internal package \"private-pytorch-pkg\" is open to dependency confusion attacks through the \"PyPI\" public registry",
          "secondTitle": "Dependency confusion attacks can lead to severe consequences such as data theft, service interruptions, and resource misuse. <br>\n        <br>\n        Specifically, if internal package 'private-pytorch-pkg' is available for public registration on the registry 'PyPI', you are vulnerable to these attacks. An attacker could register a harmful package with the same name but a higher version number. This could trick your systems into downloading this malicious package, instead of the correct, internal one you intended to use.\n        <br>\n        <br>\n        &bull; 'private-pytorch-pkg' is used as an internal package from the private registry PyTorch registry, at:  https://download.pytorch.org/.",
          "name": "Dependency Confusion: Private package in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_depConfusionPython",
            "name": "Dependency Confusion: Private package in code",
            "detailedDescription": "Dependency confusion arises when software applications mistakenly use a rogue version of a dependency due to naming collisions between internal and public software dependencies. This can lead to unauthorized code execution, data breaches, and service disruption. With the growing reliance on open-source components in software development, the threat and potential consequences of these attacks are amplified."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698387029927
        },
        {
          "id": "656eded664210a0f3c6a3e9d",
          "issueId": "585303099-oxPolicy_policyPiiLoggingInCode_1-    logger.debug(\n        'credit-card-3ds-native::initPaymentResult:',\n        JSON.stringify(credi",
          "mainTitle": "Credit card information is leaked via logging in code",
          "secondTitle": "PII leaking code detected. Credit Card information is being leaked to a logger.",
          "name": "PII logging in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "mirox13"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_policyPiiLoggingInCode_1",
            "name": "PII logging in code",
            "detailedDescription": "Unintentionally writing PII into logs can result in severe security and regulatory repercussions. Such mishandling compromises user privacy and can lead to non-compliance penalties, especially under stringent data protection laws like GDPR. It's crucial that logs be sanitized of any PII to ensure users' trust and maintain regulatory compliance."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698819933402
        },
        {
          "id": "656eded664210a0f3c6a3ece",
          "issueId": "585303099-oxPolicy_policySecretLoggingInCode_1-sensitive-logs.secrets.generic-password.generic-password-python-false-false",
          "mainTitle": "Generic password is leaked via logging in code",
          "secondTitle": "Secret leaking code detected. Generic password is being leaked to a logger.\n\nA password for a system was discovered. Unfortunately, we were unable to determine the system/app the password was generated for. Manual identification and investigation of the password is required to determine the actual risk.",
          "name": "Secret logging in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "mirox13"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_policySecretLoggingInCode_1",
            "name": "Secret logging in code",
            "detailedDescription": "Developers might unintentionally write secrets into logs during debugging or error logging. This practice poses a significant security risk, as logs might be accessible by unauthorized personnel or external actors, leading to potential data breaches and unauthorized access to critical systems. Ensuring that secrets do not get logged is a vital aspect of secure coding and system management."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698819933402
        },
        {
          "id": "656edbfe64210a0f3c67550b",
          "issueId": "585479391-oxPolicy_securityScan_secrets_1-generic-password-false-false",
          "mainTitle": "Generic Password was found in the code of a public repository",
          "secondTitle": "Generic Password was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585479391",
            "name": "OX-Security-Demo/Investment-management",
            "businessPriority": 66.5142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699595130056
        },
        {
          "id": "656edf1f64210a0f3c6a5375",
          "issueId": "585479391-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo Investment-management. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "585479391",
            "name": "OX-Security-Demo/Investment-management",
            "businessPriority": 66.5142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679aa4",
          "issueId": "585497913-oxPolicy_securityScan_205-DS154189-false",
          "mainTitle": "Banned C functions due to security used",
          "secondTitle": "The functions detected are are historically error-prone and have been associated with a significant number of security vulnerabilities.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 7,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1f64210a0f3c6a538d",
          "issueId": "585497913-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo BankForensicsCollector. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1764210a0f3c67f4f1",
          "issueId": "637651212-oxPolicy_securityScan_120-org.springframework.boot:spring-boot-starter-log4j2_2.6.1",
          "mainTitle": "spring-boot-starter-log4j2@2.6.1 is a Java direct dependency having 4 indirect vulnerabilities and no direct vulnerabilities. CVE-2021-44228 (CVSS:10, Improper Input Validation) is the most severe vulnerability.",
          "secondTitle": "org.springframework.boot:spring-boot-starter-log4j2\\@2.6.1 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 4 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 6 indirect dependencies<br><br>There are a total of 4 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 1<br>&bull; Medium : 1<br><br>\n          The following dependency has vulnerabilities: org.apache.logging.log4j:log4j-core\\@2.14.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "637651212",
            "name": "OX-Security-Demo/Lines-Credits",
            "businessPriority": 59.58571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1764210a0f3c67f59d",
          "issueId": "637651212-oxPolicy_deployment_221-openjdk_8u181-jdk-alpine_Dockerfile",
          "mainTitle": "openjdk@8u181-jdk-alpine is a base image defined in Dockerfile having 310 vulnerabilities. Top risk: CVE-2019-12900 (CVSS:9.8, Buffer Overflow)",
          "secondTitle": "openjdk\\@8u181-jdk-alpine is the base image used in Dockerfile.<br><br> There are a total of 310 vulnerabilities in openjdk\\@8u181-jdk-alpine.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 8<br>&bull; High : 41<br>&bull; Medium : 109<br>&bull; Low : 152<br><br>\n          The following 13 dependencies have vulnerabilities: libbz2\\@1.0.6-r6, musl\\@1.1.19-r10, musl-utils\\@1.1.19-r10, sqlite-libs\\@3.24.0-r0, openjdk8\\@8.181.13-r0, openjdk8-jre\\@8.181.13-r0, openjdk8-jre-base\\@8.181.13-r0, openjdk8-jre-lib\\@8.181.13-r0, libpng\\@1.6.34-r1, libjpeg-turbo\\@1.5.3-r3, libcom_err\\@1.44.2-r0, libtasn1\\@4.13-r0, krb5-libs\\@1.15.3-r0",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 310,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "637651212",
            "name": "OX-Security-Demo/Lines-Credits",
            "businessPriority": 59.58571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edc1564210a0f3c67dde4",
          "issueId": "586554191-oxPolicy_securityScan_120-org.springframework:spring-web_5.3.19",
          "mainTitle": "spring-web@5.3.19 is a Java direct dependency having 1 direct and 7 indirect vulnerabilities. CVE-2016-1000027 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "org.springframework:spring-web\\@5.3.19 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct and 7 indirect vulnerabilities<br>&bull; 2 vulnerabilities with  publicly available exploits<br>&bull; 3 indirect dependencies<br><br>There are a total of 8 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 3<br>&bull; Medium : 3<br><br>\n          The following 3 dependencies have vulnerabilities: org.springframework:spring-web\\@5.3.19, org.springframework:spring-beans\\@5.3.13, org.springframework:spring-core\\@5.3.13",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 8,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67de31",
          "issueId": "586554191-oxPolicy_securityScan_120-org.eclipse.jetty:jetty-server_9.3.20.v20170531",
          "mainTitle": "jetty-server@9.3.20.v20170531 is a Java direct dependency having 12 direct and 2 indirect vulnerabilities. CVE-2017-7657 (CVSS:9.8, Incorrect Calculation) is the most severe vulnerability.",
          "secondTitle": "org.eclipse.jetty:jetty-server\\@9.3.20.v20170531 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 12 direct and 2 indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 4 indirect dependencies<br><br>There are a total of 14 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 3<br>&bull; Medium : 6<br>&bull; Low : 3<br><br>\n          The following 2 dependencies have vulnerabilities: org.eclipse.jetty:jetty-server\\@9.3.20.v20170531, org.eclipse.jetty:jetty-http\\@9.4.44.v20210927",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 14,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67deba",
          "issueId": "586554191-oxPolicy_securityScan_120-org.springframework.boot:spring-boot-starter-web_2.6.1",
          "mainTitle": "spring-boot-starter-web@2.6.1 is a Java direct dependency having 1 direct and 16 indirect vulnerabilities. CVE-2022-22965 (CVSS:9.8, Code Injection) is the most severe vulnerability.",
          "secondTitle": "org.springframework.boot:spring-boot-starter-web\\@2.6.1 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct and 16 indirect vulnerabilities<br>&bull; 10 vulnerabilities with  publicly available exploits<br>&bull; 20 indirect dependencies<br><br>There are a total of 17 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 7<br>&bull; Medium : 8<br><br>\n          The following 8 dependencies have vulnerabilities: org.springframework:spring-webmvc\\@5.3.13, org.springframework.boot:spring-boot-starter-web\\@2.6.1, org.yaml:snakeyaml\\@1.29, com.fasterxml.jackson.core:jackson-databind\\@2.13.0, org.springframework.boot:spring-boot-autoconfigure\\@2.6.1, org.springframework:spring-expression\\@5.3.13, org.apache.tomcat.embed:tomcat-embed-core\\@9.0.55, org.springframework.boot:spring-boot\\@2.6.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 17,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67df23",
          "issueId": "586554191-oxPolicy_securityScan_120-org.apache.logging.log4j:log4j-core_2.13.3",
          "mainTitle": "log4j-core@2.13.3 is a Java direct dependency having 4 direct vulnerabilities and no indirect vulnerabilities. CVE-2021-44228 (CVSS:10, Improper Input Validation) is the most severe vulnerability.",
          "secondTitle": "org.apache.logging.log4j:log4j-core\\@2.13.3 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 4 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 1 indirect dependencies<br><br>There are a total of 4 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 1<br>&bull; Medium : 1<br><br>\n          The following dependency has vulnerabilities: org.apache.logging.log4j:log4j-core\\@2.13.3",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694157011639
        },
        {
          "id": "656edc1564210a0f3c67e083",
          "issueId": "586554191-oxPolicy_deployment_221-openjdk_8_Dockerfile",
          "mainTitle": "openjdk@8 is a base image defined in Dockerfile having 402 vulnerabilities. Top risk: CVE-2019-8457 (CVSS:9.8, Buffer Overflow)",
          "secondTitle": "openjdk\\@8 is the base image used in Dockerfile.<br><br> There are a total of 402 vulnerabilities in openjdk\\@8.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 31<br>&bull; High : 120<br>&bull; Medium : 97<br>&bull; Low : 154<br><br>\n          The following 89 dependencies have vulnerabilities: libdb5.3\\@5.3.28+dfsg1-0.8, libpython3.9-minimal\\@3.9.2-1, libpython3.9-stdlib\\@3.9.2-1, python3.9\\@3.9.2-1, python3.9-minimal\\@3.9.2-1, git\\@1:2.30.2-1, git-man\\@1:2.30.2-1, libapr1\\@1.7.0-6+deb11u1, curl\\@7.74.0-1.3+deb11u1, libcurl4\\@7.74.0-1.3+deb11u1, libcurl3-gnutls\\@7.74.0-1.3+deb11u2, libksba8\\@1.5.0-3, zlib1g\\@1:1.2.11.dfsg-2+deb11u1, openssh-client\\@1:8.4p1-5+deb11u1, libtasn1-6\\@4.16.0-2, libpcre2-8-0\\@10.36-2, libgssapi-krb5-2\\@1.18.3-6+deb11u1, libk5crypto3\\@1.18.3-6+deb11u1, libkrb5-3\\@1.18.3-6+deb11u1, libkrb5support0\\@1.18.3-6+deb11u1...+ 69 more",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 402,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edc1364210a0f3c67bc5d",
          "issueId": "593520605-oxPolicy_securityScan_120-org.springframework:spring-web_5.3.19",
          "mainTitle": "spring-web@5.3.19 is a Java direct dependency having 1 direct and 8 indirect vulnerabilities. CVE-2016-1000027 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "org.springframework:spring-web\\@5.3.19 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct and 8 indirect vulnerabilities<br>&bull; 2 vulnerabilities with  publicly available exploits<br>&bull; 3 indirect dependencies<br><br>There are a total of 9 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 3<br>&bull; Medium : 4<br><br>\n          The following 3 dependencies have vulnerabilities: org.springframework:spring-web\\@5.3.19, org.springframework:spring-beans\\@5.2.4.RELEASE, org.springframework:spring-core\\@5.2.4.RELEASE",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 9,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67bcb6",
          "issueId": "593520605-oxPolicy_securityScan_120-org.eclipse.jetty:jetty-server_9.3.20.v20170531",
          "mainTitle": "jetty-server@9.3.20.v20170531 is a Java direct dependency having 12 direct and 2 indirect vulnerabilities. CVE-2017-7657 (CVSS:9.8, Incorrect Calculation) is the most severe vulnerability.",
          "secondTitle": "org.eclipse.jetty:jetty-server\\@9.3.20.v20170531 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 12 direct and 2 indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 4 indirect dependencies<br><br>There are a total of 14 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 3<br>&bull; Medium : 6<br>&bull; Low : 3<br><br>\n          The following 2 dependencies have vulnerabilities: org.eclipse.jetty:jetty-server\\@9.3.20.v20170531, org.eclipse.jetty:jetty-http\\@9.4.26.v20200117",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 14,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67bd6d",
          "issueId": "593520605-oxPolicy_securityScan_120-org.springframework.boot:spring-boot-starter-web_2.2.5.RELEASE",
          "mainTitle": "spring-boot-starter-web@2.2.5.RELEASE is a Java direct dependency having 1 direct and 18 indirect vulnerabilities. CVE-2022-22965 (CVSS:9.8, Code Injection) is the most severe vulnerability.",
          "secondTitle": "org.springframework.boot:spring-boot-starter-web\\@2.2.5.RELEASE is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct and 18 indirect vulnerabilities<br>&bull; 8 vulnerabilities with  publicly available exploits<br>&bull; 28 indirect dependencies<br><br>There are a total of 19 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 11<br>&bull; Medium : 6<br><br>\n          The following 10 dependencies have vulnerabilities: org.springframework:spring-webmvc\\@5.2.4.RELEASE, org.springframework.boot:spring-boot-starter-web\\@2.2.5.RELEASE, org.springframework.boot:spring-boot\\@2.2.5.RELEASE, com.fasterxml.jackson.core:jackson-databind\\@2.10.2, org.apache.tomcat.embed:tomcat-embed-core\\@9.0.31, org.springframework.boot:spring-boot-autoconfigure\\@2.2.5.RELEASE, ch.qos.logback:logback-classic\\@1.2.3, ch.qos.logback:logback-core\\@1.2.3, org.springframework:spring-expression\\@5.2.4.RELEASE, org.hibernate.validator:hibernate-validator\\@6.0.18.Final",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 19,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67be19",
          "issueId": "593520605-oxPolicy_securityScan_120-org.apache.logging.log4j:log4j-core_2.13.3",
          "mainTitle": "log4j-core@2.13.3 is a Java direct dependency having 4 direct vulnerabilities and no indirect vulnerabilities. CVE-2021-44228 (CVSS:10, Improper Input Validation) is the most severe vulnerability.",
          "secondTitle": "org.apache.logging.log4j:log4j-core\\@2.13.3 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 4 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 1 indirect dependencies<br><br>There are a total of 4 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 1<br>&bull; Medium : 1<br><br>\n          The following dependency has vulnerabilities: org.apache.logging.log4j:log4j-core\\@2.13.3",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaef64210a0f3c672e7a",
          "issueId": "715723869-oxPolicy_securityScan_secrets_1-generic-secret-false-false",
          "mainTitle": "Generic Secret was found in the code of a public repository",
          "secondTitle": "Generic Secret was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bj\u00f6rn Kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf364210a0f3c674a70",
          "issueId": "688093659-oxPolicy_securityScan_secrets_1-b63be8842a672887f76eb6e112d26c31",
          "mainTitle": "PGP Private Key was found in the code of a public repository",
          "secondTitle": "PGP Private Key was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "High",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "688093659",
            "name": "MH-New-Organization/MH_NO_WEBG",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698474625568
        },
        {
          "id": "656edc0b64210a0f3c678a05",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV2_K8S_6-false",
          "mainTitle": "K8s pod requires a NetworkPolicy to define allowed communication with other pods",
          "secondTitle": "In Kubernetes, a NetworkPolicy is a way to define how pods are allowed to communicate with each other over the network. By default, pods are allowed to communicate with any other pod within the same namespace, which can create security risks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678b41",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_19-false",
          "mainTitle": "K8s container should not share the host network namespace",
          "secondTitle": "When using the host network mode for a container, that container\u2019s network stack is not isolated from the Docker host, so the container shares the host\u2019s networking namespace and does not get its own IP-address allocation. This can lead to Privilege Escalation.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678b64",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_20-false",
          "mainTitle": "K8s container should not explicitly allow elevation of privileges",
          "secondTitle": "The AllowPrivilegeEscalation K8 Pod Security Policy controls whether or not a user is allowed to set the security context of a container to True. Setting it to True means that a child process of a container can gain more privileges than its parent.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678bb2",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_23-false",
          "mainTitle": "K8s root container usage is not minimized",
          "secondTitle": "Root containers are privileged containers that have access to the underlying host and can potentially compromise the security of the system. Containers that run as root usually have far more permissions than their workload requires.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678d68",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_75-false",
          "mainTitle": "K8s Kubelet nodes should read only associated objects",
          "secondTitle": "Restrict kubelet nodes to reading only objects associated with them.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678e4e",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_91-false",
          "mainTitle": "K8s API Server audit logs is not enabled",
          "secondTitle": "Access logging provides basic audit logging for API Server functions. This may prove useful when investigating security incidents.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679250",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_AWS_126-false",
          "mainTitle": "AWS EC2 instance detailed monitoring is disabled",
          "secondTitle": "Detailed monitoring helps to monitor for anomalies and provides insight into suspected breaches.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c6792af",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_AWS_130-false",
          "mainTitle": "AWS VPC subnets should not allow automatic public IP assignment",
          "secondTitle": "VPC subnet is a part of the VPC having its own rules for traffic. Assigning the Public IP to the subnet automatically (on launch) can accidentally expose the instances within this subnet to internet.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679597",
          "issueId": "584352228-oxPolicy_securityScan_120-org.codehaus.jackson:jackson-mapper-asl_1.9.13",
          "mainTitle": "jackson-mapper-asl@1.9.13 is a Java direct dependency having 2 direct vulnerabilities and no indirect vulnerabilities. CVE-2019-10202 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "org.codehaus.jackson:jackson-mapper-asl\\@1.9.13 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 2 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 1 indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: org.codehaus.jackson:jackson-mapper-asl\\@1.9.13",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c6796d0",
          "issueId": "584352228-oxPolicy_securityScan_120-org.postgresql:postgresql_42.2.5",
          "mainTitle": "postgresql@42.2.5 is a Java direct dependency having 6 direct vulnerabilities and no indirect vulnerabilities. CVE-2022-21724 (CVSS:9.8, Improper Initialization) is the most severe vulnerability.",
          "secondTitle": "org.postgresql:postgresql\\@42.2.5 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 6 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 3 vulnerabilities with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There are a total of 6 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 3<br>&bull; Medium : 2<br>&bull; Low : 1<br><br>\n          The following dependency has vulnerabilities: org.postgresql:postgresql\\@42.2.5",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679715",
          "issueId": "584352228-oxPolicy_securityScan_120-org.jsoup:jsoup_1.8.3",
          "mainTitle": "jsoup@1.8.3 is a Java direct dependency having 2 direct vulnerabilities and no indirect vulnerabilities. CVE-2021-37714 (CVSS:7.5, Improper Error Management) is the most severe vulnerability.",
          "secondTitle": "org.jsoup:jsoup\\@1.8.3 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 2 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br>&bull; Medium : 1<br><br>\n          The following dependency has vulnerabilities: org.jsoup:jsoup\\@1.8.3",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c6797bb",
          "issueId": "584352228-oxPolicy_securityScan_120-org.apache.commons:commons-text_1.9",
          "mainTitle": "commons-text@1.9 is a Java direct dependency having 1 indirect vulnerability and no direct vulnerabilities. CVE-2022-42889 (CVSS:9.8, Code Injection) is the most severe vulnerability.",
          "secondTitle": "org.apache.commons:commons-text\\@1.9 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; 1 indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br><br>\n          The following dependency has vulnerabilities: org.apache.commons:commons-text\\@1.9",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679b75",
          "issueId": "584352228-oxPolicy_securityScan_secrets_1-generic-secret-false-false",
          "mainTitle": "Generic Secret was found in the code of a private repository",
          "secondTitle": "Generic Secret was found in the code of a private repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679be5",
          "issueId": "584352228-oxPolicy_securityScan_205-contrib.nodejsscan.node_insecure_random_generator-false",
          "mainTitle": "Usage of Weak Random Number Generators",
          "secondTitle": "Relying on `crypto.pseudoRandomBytes()` or `Math.random()` can lead to predictable outcomes as they are not cryptographically secure random number generators. Predictable randomness can be exploited in various scenarios, like generating session tokens, password resets, or cryptographic operations.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc0c64210a0f3c679d85",
          "issueId": "584352228-oxPolicy_securityScan_205-java.lang.security.audit.crypto.use-of-md5-false",
          "mainTitle": "MD5 hash algorithm used is considered insecure",
          "secondTitle": "MD5 is not collision resistant and is therefore not suitable as a cryptographic signature.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679daf",
          "issueId": "584352228-oxPolicy_securityScan_205-java.lang.security.audit.formatted-sql-string-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability in format string query",
          "secondTitle": "A SQL injection vulnerability in Java code was detected by checking for the use of string formatting when constructing SQL queries. User-supplied data may be used in formatted SQL strings. This data is not properly validated and sanitized before use. A successful SQL injection attack could allow an attacker to execute arbitrary SQL commands on the database, potentially compromising sensitive data such as passwords, financial information, and more.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c67a4f5",
          "issueId": "584352228-oxPolicy_policyPiiHardcoded_1-email-address-OX-Security-Demo/Bank-Website",
          "mainTitle": "Email Address is exposed in code",
          "secondTitle": "Email Address is exposed in code. \n          All developers with minimal access to the repo will be able to access this PII. This may violate any number of compliance and privacy standards.",
          "name": "PII embedded in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_policyPiiHardcoded_1",
            "name": "PII embedded in code",
            "detailedDescription": "Hardcoding PII within application code poses significant security and privacy risks. This practice exposes sensitive user information and can result in regulatory violations, especially under strict data protection frameworks. Ensuring that codebases are free from hardcoded PII is essential to preserve user trust, maintain regulatory compliance, and protect organizational reputation."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700115948184
        },
        {
          "id": "656edc4264210a0f3c68988e",
          "issueId": "584102675-oxPolicy_policy_sbom_code_no_imported_libs_1",
          "mainTitle": "Dependency not used in code: (16 dependencies)",
          "secondTitle": "Repo OX-Security-Demo/Multi-currency-management has 16 dependencies that are not utilized. In other words, no functions or variables of the dependencies are used.",
          "name": "Unused direct dependency in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 16,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_policy_sbom_code_no_imported_libs_1",
            "name": "Unused direct dependency in code",
            "detailedDescription": "Dependencies not referenced in the code should be removed. Removing unused dependencies will reduce the attack surface. Further, the maintenance burden is reduced, and the risk of a vulnerability in an unused dependency going unnoticed or later used is also reduced. Finally, the build performance is improved, making the development process more efficient."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4264210a0f3c68992a",
          "issueId": "584102675-oxPolicy_securityScan_55-CKV_AWS_173-false",
          "mainTitle": "AWS Lambda environment variables are not encrypted",
          "secondTitle": "If Lambda environment variables are not encrypted, the possibility for data leakage occurs. Especially, if the variables are being used to store secrets.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4264210a0f3c68997e",
          "issueId": "584102675-oxPolicy_securityScan_secrets_history_1-e33b2c8d9347df3910302cf7afa85b12",
          "mainTitle": "RSA Private Key was found in the history of a public repository",
          "secondTitle": "RSA Private Key was found in the history of a public repository.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4264210a0f3c6899a7",
          "issueId": "584102675-oxPolicy_securityScan_secrets_history_1-6be1ae6db5a2ffddc12c2eaefd50b653",
          "mainTitle": "Private Key was found in the history of a public repository",
          "secondTitle": "Private Key was found in the history of a public repository.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689cb1",
          "issueId": "584102675-oxPolicy_securityScan_secrets_1-1103d998f6cf83f1113bdb4fcc978653",
          "mainTitle": "AWS Access Key was found in the code of a public repository",
          "secondTitle": "AWS Access Key was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc4364210a0f3c68a032",
          "issueId": "584102675-oxPolicy_deployment_221-node_16-alpine_Dockerfile",
          "mainTitle": "node@16-alpine is a base image defined in Dockerfile having 5 vulnerabilities. Top risk: CVE-2023-5363 (CVSS:7.5)",
          "secondTitle": "node\\@16-alpine is the base image used in Dockerfile.<br><br> There are a total of 5 vulnerabilities in node\\@16-alpine.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 2<br>&bull; Medium : 3<br><br>\n          The following 3 dependencies have vulnerabilities: libcrypto3\\@3.1.2-r0, libssl3\\@3.1.2-r0, semver\\@7.3.7",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edf1e64210a0f3c6a4015",
          "issueId": "*GitHub-Settings (OX-Security-Demo)-oxPolicy_dspm_MaxAdmins_1-GitHub_OX-Security-Demo_121624767",
          "mainTitle": "Too many owners for org OX-Security-Demo: 6 owners (35% of all users)",
          "secondTitle": "There are too many owners assigned to manage org OX-Security-Demo. There are a total of 6 owners and 11 users who are not owners. Based on your policy settings you should have at most 3 owners.",
          "name": "Too many org owners",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "eyalatox"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_dspm_MaxAdmins_1",
            "name": "Too many org owners",
            "detailedDescription": "An organization or first-level group admin/owner has the authority to create, edit, delete repositories and manage permissions and access to repositories. A compromise of an admin/owner account can be devastating as a result. Therefore, in order to reduce the attack surface it is recommended to reduce the number of admins/owners of an organization or group."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "*GitHub-Settings (OX-Security-Demo)",
            "name": "*GitHub-Settings (OX-Security-Demo)",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": true
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edaf264210a0f3c67420b",
          "issueId": "647669373-oxPolicy_securityScan_120-com.segment.analytics.java:analytics_2.1.1",
          "mainTitle": "analytics@2.1.1 is a Java direct dependency having 3 indirect vulnerabilities and no direct vulnerabilities. CVE-2018-1000844 (CVSS:9.1, Information Exposure) is the most severe vulnerability.",
          "secondTitle": "com.segment.analytics.java:analytics\\@2.1.1 is a Scala package that was added as a direct dependency. It contains:<br><br>&bull; 3 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 2 vulnerabilities with  publicly available exploits<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 1<br>&bull; Medium : 1<br><br>\n          The following 2 dependencies have vulnerabilities: com.squareup.retrofit2:retrofit\\@2.4.0, com.squareup.okio:okio\\@1.14.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Liran Yogev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699687834876
        },
        {
          "id": "656edaf264210a0f3c67432c",
          "issueId": "647669373-oxPolicy_securityScan_120-com.outr:hasher_2.13_1.2.2",
          "mainTitle": "hasher_2.13@1.2.2 is a Java direct dependency having 1 indirect vulnerability and no direct vulnerabilities. CVE-2022-36944 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "com.outr:hasher_2.13\\@1.2.2 is a Scala package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 1 indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br><br>\n          The following dependency has vulnerabilities: org.scala-lang:scala-library\\@2.13.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Liran Yogev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699687834876
        },
        {
          "id": "656edaf264210a0f3c67434c",
          "issueId": "647669373-oxPolicy_securityScan_120-org.influxdb:influxdb-java_2.14",
          "mainTitle": "influxdb-java@2.14 is a Java direct dependency having 3 indirect vulnerabilities and no direct vulnerabilities. CVE-2018-1000844 (CVSS:9.1, Information Exposure) is the most severe vulnerability.",
          "secondTitle": "org.influxdb:influxdb-java\\@2.14 is a Scala package that was added as a direct dependency. It contains:<br><br>&bull; 3 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 2 vulnerabilities with  publicly available exploits<br>&bull; 7 indirect dependencies<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 1<br>&bull; Medium : 1<br><br>\n          The following 2 dependencies have vulnerabilities: com.squareup.retrofit2:retrofit\\@2.4.0, com.squareup.okio:okio\\@1.14.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ariel Cabib"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c674379",
          "issueId": "647669373-oxPolicy_securityScan_120-com.github.scopt:scopt_2.13_3.7.1",
          "mainTitle": "scopt_2.13@3.7.1 is a Java direct dependency having 1 indirect vulnerability and no direct vulnerabilities. CVE-2022-36944 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "com.github.scopt:scopt_2.13\\@3.7.1 is a Scala package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 1 indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br><br>\n          The following dependency has vulnerabilities: org.scala-lang:scala-library\\@2.13.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ariel Cabib"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c6743dc",
          "issueId": "647669373-oxPolicy_securityScan_205-scala.lang.security.audit.tainted-sql-string-false",
          "mainTitle": "SQL Injection vulnerability due to tainted user input",
          "secondTitle": "Detected the use of potentially tainted string variables being concatenated into an SQL query string in Scala code. SQL Injection vulnerabilities can lead to unauthorized access, modification, or exfiltration of sensitive data, as well as the execution of arbitrary code on the target system.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Liran Yogev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edcc964210a0f3c694d08",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV2_K8S_6-false",
          "mainTitle": "K8s pod requires a NetworkPolicy to define allowed communication with other pods",
          "secondTitle": "In Kubernetes, a NetworkPolicy is a way to define how pods are allowed to communicate with each other over the network. By default, pods are allowed to communicate with any other pod within the same namespace, which can create security risks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694de6",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_20-false",
          "mainTitle": "K8s container should not explicitly allow elevation of privileges",
          "secondTitle": "The AllowPrivilegeEscalation K8 Pod Security Policy controls whether or not a user is allowed to set the security context of a container to True. Setting it to True means that a child process of a container can gain more privileges than its parent.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694e36",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_23-false",
          "mainTitle": "K8s root container usage is not minimized",
          "secondTitle": "Root containers are privileged containers that have access to the underlying host and can potentially compromise the security of the system. Containers that run as root usually have far more permissions than their workload requires.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c695026",
          "issueId": "310663043-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>This workflow has permission to open Pull Requests. A compromised workflow will allow a malicious actor to bypass review requirements when pushing code. <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c69561c",
          "issueId": "310663043-oxPolicy_securityScan_205-contrib.nodejsscan.node_insecure_random_generator-false",
          "mainTitle": "Usage of Weak Random Number Generators",
          "secondTitle": "Relying on `crypto.pseudoRandomBytes()` or `Math.random()` can lead to predictable outcomes as they are not cryptographically secure random number generators. Predictable randomness can be exploited in various scenarios, like generating session tokens, password resets, or cryptographic operations.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edcca64210a0f3c695812",
          "issueId": "310663043-oxPolicy_securityScan_205-sast.javascript.nodejs.node_timing_attack_fix-false",
          "mainTitle": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/",
          "secondTitle": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698819933402
        },
        {
          "id": "656edcca64210a0f3c69586a",
          "issueId": "310663043-oxPolicy_securityScan_205-java.lang.security.audit.formatted-sql-string-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability in format string query",
          "secondTitle": "A SQL injection vulnerability in Java code was detected by checking for the use of string formatting when constructing SQL queries. User-supplied data may be used in formatted SQL strings. This data is not properly validated and sanitized before use. A successful SQL injection attack could allow an attacker to execute arbitrary SQL commands on the database, potentially compromising sensitive data such as passwords, financial information, and more.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Nanne Baars"
          ],
          "occurrences": 10,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c6958a2",
          "issueId": "310663043-oxPolicy_securityScan_205-java.spring.security.injection.tainted-sql-string-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability due to manually-constructed SQL string",
          "secondTitle": "A successful SQL injection attack can result in unauthorized access to sensitive data, such as passwords, credit card details, or personal user information. Many high-profile data breaches in recent years have been the result of SQL injection attacks",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Nanne Baars"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edccb64210a0f3c69594b",
          "issueId": "310663043-oxPolicy_securityScan_205-java.lang.security.audit.crypto.use-of-md5-false",
          "mainTitle": "MD5 hash algorithm used is considered insecure",
          "secondTitle": "MD5 is not collision resistant and is therefore not suitable as a cryptographic signature.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ren\u00e9 Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edccb64210a0f3c695a95",
          "issueId": "310663043-oxPolicy_securityScan_205-contrib.owasp.java.xxe.owasp.java.xxe.javax.xml.stream.XMLInputFactory-false",
          "mainTitle": "XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing",
          "secondTitle": "XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edf1f64210a0f3c6a53f1",
          "issueId": "310663043-oxPolicy_webhookConfiguration_1",
          "mainTitle": "Insecure webhook: no SSL",
          "secondTitle": "",
          "name": "Webhook without SSL/TLS",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_webhookConfiguration_1",
            "name": "Webhook without SSL/TLS",
            "detailedDescription": "If communication to your server is not happening via SSL, then your data may be intercepted. This means that your code may be visible to an attacker."
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656eded464210a0f3c6a0f32",
          "issueId": "585303099-oxPolicy_policy_sbom_code_no_imported_libs_1",
          "mainTitle": "Dependency not used in code: (3 dependencies)",
          "secondTitle": "Repo OX-Security-Demo/Bank-Website-Backend has 3 dependencies that are not utilized. In other words, no functions or variables of the dependencies are used.",
          "name": "Unused direct dependency in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_policy_sbom_code_no_imported_libs_1",
            "name": "Unused direct dependency in code",
            "detailedDescription": "Dependencies not referenced in the code should be removed. Removing unused dependencies will reduce the attack surface. Further, the maintenance burden is reduced, and the risk of a vulnerability in an unused dependency going unnoticed or later used is also reduced. Finally, the build performance is improved, making the development process more efficient."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a1002",
          "issueId": "585303099-oxPolicy_CommitReviewCount_1-eyalatox",
          "mainTitle": "Unreviewed code: eyalatox (kostya253@gmail.com) ",
          "secondTitle": "",
          "name": "Unreviewed code change",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "mirox13"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_CommitReviewCount_1",
            "name": "Unreviewed code change",
            "detailedDescription": "Reviews are one of the best ways to reduce the risk of security vulnerabilities, making it to production. When researchers tried to intentionally insert malicious code into the Linux Kernel, two-person reviews caught the majority of issues."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656eded464210a0f3c6a1010",
          "issueId": "585303099-oxPolicy_CommitReviewCount_1-mirox13",
          "mainTitle": "Unreviewed code: mirox13 (kostya253@gmail.com) ",
          "secondTitle": "",
          "name": "Unreviewed code change",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "mirox13"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_CommitReviewCount_1",
            "name": "Unreviewed code change",
            "detailedDescription": "Reviews are one of the best ways to reduce the risk of security vulnerabilities, making it to production. When researchers tried to intentionally insert malicious code into the Linux Kernel, two-person reviews caught the majority of issues."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1697176812236
        },
        {
          "id": "656eded464210a0f3c6a1b45",
          "issueId": "585303099-oxPolicy_securityScan_secrets_1-958c36c443338102bd5052034f306570",
          "mainTitle": "Active AWS Access Key was found in the code of a private repository",
          "secondTitle": "Active AWS Access Key was found in the code of a private repository. The secret is considered live or active by the system it is meant to connect to.              \n          <br/>",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656eded564210a0f3c6a1cb7",
          "issueId": "585303099-oxPolicy_securityScan_secrets_1-generic-secret-false-false",
          "mainTitle": "Generic Secret was found in the code of a private repository",
          "secondTitle": "Generic Secret was found in the code of a private repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1701763814500
        },
        {
          "id": "656eded564210a0f3c6a1cee",
          "issueId": "585303099-oxPolicy_securityScan_secrets_1-18f6022af99d6ce9c1fbe1c5ae125c87",
          "mainTitle": "HTTP Basic Authentication Password was found in the code of a private repository",
          "secondTitle": "HTTP Basic Authentication Password was found in the code of a private repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656eded564210a0f3c6a1d24",
          "issueId": "585303099-oxPolicy_securityScan_secrets_1-2adf98c89420966501a31e74e3cca871",
          "mainTitle": "HTTP Basic Authentication Password was found in the code of a private repository",
          "secondTitle": "HTTP Basic Authentication Password was found in the code of a private repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656eded564210a0f3c6a1df0",
          "issueId": "585303099-oxPolicy_securityScan_205-B113-false",
          "mainTitle": "request_without_timeout",
          "secondTitle": "Requests call without timeout",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Eyal Paz"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656eded664210a0f3c6a3eff",
          "issueId": "585303099-oxPolicy_policyPiiHardcoded_1-credit-card-number-OX-Security-Demo/Bank-Website-Backend",
          "mainTitle": "Credit Card Number is exposed in code",
          "secondTitle": "Credit Card Number is exposed in code. \n          All developers with minimal access to the repo will be able to access this PII. This may violate any number of compliance and privacy standards.",
          "name": "PII embedded in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_policyPiiHardcoded_1",
            "name": "PII embedded in code",
            "detailedDescription": "Hardcoding PII within application code poses significant security and privacy risks. This practice exposes sensitive user information and can result in regulatory violations, especially under strict data protection frameworks. Ensuring that codebases are free from hardcoded PII is essential to preserve user trust, maintain regulatory compliance, and protect organizational reputation."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700115948184
        },
        {
          "id": "656edf1f64210a0f3c6a540b",
          "issueId": "585303099-oxPolicy_allow_private_forking_repos_1",
          "mainTitle": "Private repo can be forked",
          "secondTitle": "Your repo OX-Security-Demo/Bank-Website-Backend can be privately forked into a user\u2019s personal account, and this can lead to data leakage. Forking is allowed because the settings for private repo forking are enabled for the organization and the repo.<br><br>Note: Users no longer in your organization will have access to private forked repos for up to 24 hours.",
          "name": "Private repo forking is enabled",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 0,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_allow_private_forking_repos_1",
            "name": "Private repo forking is enabled",
            "detailedDescription": "Forking a private repository creates a copy of the codebase, which can be shared and distributed independently of the original repository. This can be problematic if the repository contains proprietary or confidential information that should not be shared outside the organization. Forks are maintained if users can no longer access the repo or organization. This can be very dangerous."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679b16",
          "issueId": "585497913-oxPolicy_securityScan_205-DS149435-false",
          "mainTitle": "Passing a predicable value to srand() is very insecure and should be avoided.",
          "secondTitle": "Do not seed randomness based on system time or a static value.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67ddb3",
          "issueId": "586554191-oxPolicy_securityScan_secrets_history_1-generic-token-false-false",
          "mainTitle": "Generic Token was found in the history of a public repository",
          "secondTitle": "Generic Token was found in the history of a public repository.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67df9c",
          "issueId": "586554191-oxPolicy_securityScan_secrets_1-65d6cefd524bc3d3c6a518178e8b5ba4",
          "mainTitle": "MySQL Database Password was found in the code of a public repository",
          "secondTitle": "MySQL Database Password was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1f64210a0f3c6a537d",
          "issueId": "586554191-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo Liquidity-management. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67bef7",
          "issueId": "593520605-oxPolicy_deployment_221-openjdk_11-jre-slim_Dockerfile",
          "mainTitle": "openjdk@11-jre-slim is a base image defined in Dockerfile having 151 vulnerabilities. Top risk: CVE-2019-8457 (CVSS:9.8, Buffer Overflow)",
          "secondTitle": "openjdk\\@11-jre-slim is the base image used in Dockerfile.<br><br> There are a total of 151 vulnerabilities in openjdk\\@11-jre-slim.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 6<br>&bull; High : 38<br>&bull; Medium : 34<br>&bull; Low : 73<br><br>\n          The following 50 dependencies have vulnerabilities: libdb5.3\\@5.3.28+dfsg1-0.8, zlib1g\\@1:1.2.11.dfsg-2+deb11u1, libtasn1-6\\@4.16.0-2, libpcre2-8-0\\@10.36-2, libgssapi-krb5-2\\@1.18.3-6+deb11u1, libk5crypto3\\@1.18.3-6+deb11u1, libkrb5-3\\@1.18.3-6+deb11u1, libkrb5support0\\@1.18.3-6+deb11u1, perl-base\\@5.32.1-4+deb11u2, libc-bin\\@2.31-13+deb11u3, libc6\\@2.31-13+deb11u3, e2fsprogs\\@1.46.2-2, libcom-err2\\@1.46.2-2, libext2fs2\\@1.46.2-2, libss2\\@1.46.2-2, logsave\\@1.46.2-2, bash\\@5.1-2+deb11u1, libtinfo6\\@6.2+20201114-2, ncurses-base\\@6.2+20201114-2, ncurses-bin\\@6.2+20201114-2...+ 30 more",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 151,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edf1f64210a0f3c6a535d",
          "issueId": "593520605-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo Currency-Credits. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1f64210a0f3c6a5385",
          "issueId": "585531998-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo Insurance-Service. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "585531998",
            "name": "OX-Security-Demo/Insurance-Service",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edb8264210a0f3c6752eb",
          "issueId": "363001753-oxPolicy_policyPiiHardcoded_1-email-address-michaelhorty/TMCLI",
          "mainTitle": "Email Address is exposed in code",
          "secondTitle": "Email Address is exposed in code. \n          All developers with minimal access to the repo will be able to access this PII. This may violate any number of compliance and privacy standards.",
          "name": "PII embedded in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "mhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_policyPiiHardcoded_1",
            "name": "PII embedded in code",
            "detailedDescription": "Hardcoding PII within application code poses significant security and privacy risks. This practice exposes sensitive user information and can result in regulatory violations, especially under strict data protection frameworks. Ensuring that codebases are free from hardcoded PII is essential to preserve user trust, maintain regulatory compliance, and protect organizational reputation."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "363001753",
            "name": "michaelhorty/TMCLI",
            "businessPriority": 19.4,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700115948184
        },
        {
          "id": "656edb7f64210a0f3c6751e2",
          "issueId": "167596016-oxPolicy_policyPiiHardcoded_1-email-address-michaelhorty/CxCLI",
          "mainTitle": "Email Address is exposed in code",
          "secondTitle": "Email Address is exposed in code. \n          All developers with minimal access to the repo will be able to access this PII. This may violate any number of compliance and privacy standards.",
          "name": "PII embedded in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_policyPiiHardcoded_1",
            "name": "PII embedded in code",
            "detailedDescription": "Hardcoding PII within application code poses significant security and privacy risks. This practice exposes sensitive user information and can result in regulatory violations, especially under strict data protection frameworks. Ensuring that codebases are free from hardcoded PII is essential to preserve user trust, maintain regulatory compliance, and protect organizational reputation."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "167596016",
            "name": "michaelhorty/CxCLI",
            "businessPriority": 15.242857142857142,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700115948184
        },
        {
          "id": "656edc3464210a0f3c680cfe",
          "issueId": "307444027-oxPolicy_securityScan_120-org.springframework:spring-web_4.3.10.RELEASE",
          "mainTitle": "spring-web@4.3.10.RELEASE is a Java direct dependency having 3 indirect vulnerabilities and no direct vulnerabilities. CVE-2016-1000027 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "org.springframework:spring-web\\@4.3.10.RELEASE is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 3 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 2 vulnerabilities with  publicly available exploits<br>&bull; 2 indirect dependencies<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; Medium : 1<br><br>\n          The following 2 dependencies have vulnerabilities: org.springframework:spring-web\\@4.3.10.RELEASE, org.springframework:spring-beans\\@4.3.10.RELEASE",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Boy Baukema"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680ebe",
          "issueId": "307444027-oxPolicy_securityScan_120-org.springframework:spring-webmvc_4.3.10.RELEASE",
          "mainTitle": "spring-webmvc@4.3.10.RELEASE is a Java direct dependency having 2 indirect vulnerabilities and no direct vulnerabilities. CVE-2022-22965 (CVSS:9.8, Code Injection) is the most severe vulnerability.",
          "secondTitle": "org.springframework:spring-webmvc\\@4.3.10.RELEASE is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 2 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 1 indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; Medium : 1<br><br>\n          The following 2 dependencies have vulnerabilities: org.springframework:spring-webmvc\\@4.3.10.RELEASE, org.springframework:spring-expression\\@4.3.10.RELEASE",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Boy Baukema"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680f1a",
          "issueId": "307444027-oxPolicy_securityScan_secrets_1-generic-password-false-false",
          "mainTitle": "Generic Password was found in the code of a public repository",
          "secondTitle": "Generic Password was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "mrunkle"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edcc864210a0f3c69327a",
          "issueId": "179169985-oxPolicy_securityScan_secrets_1-generic-secret-false-false",
          "mainTitle": "Generic Secret was found in the code of a private repository",
          "secondTitle": "Generic Secret was found in the code of a private repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "179169985",
            "name": "michaelhorty/CxMOreporting",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68ee53",
          "issueId": "191856056-oxPolicy_securityScan_120-commons-fileupload:commons-fileupload_1.2.2",
          "mainTitle": "commons-fileupload@1.2.2 is a Java direct dependency having 5 direct vulnerabilities and no indirect vulnerabilities. CVE-2016-1000031 (CVSS:9.8, Improper Access Control) is the most severe vulnerability.",
          "secondTitle": "commons-fileupload:commons-fileupload\\@1.2.2 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 5 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There are a total of 5 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 4<br><br>\n          The following dependency has vulnerabilities: commons-fileupload:commons-fileupload\\@1.2.2",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68eeb1",
          "issueId": "191856056-oxPolicy_securityScan_120-org.springframework:spring-webmvc_3.2.4.RELEASE",
          "mainTitle": "spring-webmvc@3.2.4.RELEASE is a Java direct dependency having 6 direct and 5 indirect vulnerabilities. CVE-2016-1000027 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "org.springframework:spring-webmvc\\@3.2.4.RELEASE is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 6 direct and 5 indirect vulnerabilities<br>&bull; 3 vulnerabilities with  publicly available exploits<br>&bull; 4 indirect dependencies<br><br>There are a total of 11 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 3<br>&bull; High : 2<br>&bull; Medium : 6<br><br>\n          The following 4 dependencies have vulnerabilities: org.springframework:spring-web\\@3.2.4.RELEASE, org.springframework:spring-beans\\@3.2.4.RELEASE, org.springframework:spring-webmvc\\@3.2.4.RELEASE, org.springframework:spring-expression\\@3.2.4.RELEASE",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 11,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68ef9f",
          "issueId": "191856056-oxPolicy_securityScan_120-org.springframework:spring-core_3.2.4.RELEASE",
          "mainTitle": "spring-core@3.2.4.RELEASE is a Java direct dependency having 14 direct vulnerabilities and no indirect vulnerabilities. CVE-2018-1270 (CVSS:9.8, Code Injection) is the most severe vulnerability.",
          "secondTitle": "org.springframework:spring-core\\@3.2.4.RELEASE is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 14 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There are a total of 14 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 7<br>&bull; Medium : 5<br><br>\n          The following dependency has vulnerabilities: org.springframework:spring-core\\@3.2.4.RELEASE",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 14,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f06d",
          "issueId": "191856056-oxPolicy_securityScan_120-com.fasterxml.jackson.core:jackson-databind_2.0.4",
          "mainTitle": "jackson-databind@2.0.4 is a Java direct dependency having 45 direct vulnerabilities and no indirect vulnerabilities. CVE-2017-17485 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "com.fasterxml.jackson.core:jackson-databind\\@2.0.4 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 45 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 17 vulnerabilities with  publicly available exploits<br>&bull; 1 indirect dependencies<br><br>There are a total of 45 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 17<br>&bull; High : 26<br>&bull; Medium : 2<br><br>\n          The following dependency has vulnerabilities: com.fasterxml.jackson.core:jackson-databind\\@2.0.4",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 45,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f2b0",
          "issueId": "191856056-oxPolicy_securityScan_120-com.h2database:h2_1.4.187",
          "mainTitle": "h2@1.4.187 is a Java direct dependency having 3 direct vulnerabilities and no indirect vulnerabilities. CVE-2021-42392 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "com.h2database:h2\\@1.4.187 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 3 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 3 vulnerabilities with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: com.h2database:h2\\@1.4.187",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f2f3",
          "issueId": "191856056-oxPolicy_securityScan_secrets_1-generic-password-false-false",
          "mainTitle": "Generic Password was found in the code of a private repository",
          "secondTitle": "Generic Password was found in the code of a private repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5364210a0f3c6900f0",
          "issueId": "191856056-oxPolicy_policyPiiHardcoded_1-credit-card-number-michaelhorty/WG384",
          "mainTitle": "Credit Card Number is exposed in code",
          "secondTitle": "Credit Card Number is exposed in code. \n          All developers with minimal access to the repo will be able to access this PII. This may violate any number of compliance and privacy standards.",
          "name": "PII embedded in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_policyPiiHardcoded_1",
            "name": "PII embedded in code",
            "detailedDescription": "Hardcoding PII within application code poses significant security and privacy risks. This practice exposes sensitive user information and can result in regulatory violations, especially under strict data protection frameworks. Ensuring that codebases are free from hardcoded PII is essential to preserve user trust, maintain regulatory compliance, and protect organizational reputation."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700115948184
        },
        {
          "id": "656edc5364210a0f3c690135",
          "issueId": "191856056-oxPolicy_policyPiiHardcoded_1-email-address-michaelhorty/WG384",
          "mainTitle": "Email Address is exposed in code",
          "secondTitle": "Email Address is exposed in code. \n          All developers with minimal access to the repo will be able to access this PII. This may violate any number of compliance and privacy standards.",
          "name": "PII embedded in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Medium",
          "policy": {
            "id": "oxPolicy_policyPiiHardcoded_1",
            "name": "PII embedded in code",
            "detailedDescription": "Hardcoding PII within application code poses significant security and privacy risks. This practice exposes sensitive user information and can result in regulatory violations, especially under strict data protection frameworks. Ensuring that codebases are free from hardcoded PII is essential to preserve user trust, maintain regulatory compliance, and protect organizational reputation."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700115948184
        },
        {
          "id": "656edc0b64210a0f3c6789d9",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_DOCKER_3-false",
          "mainTitle": "Dockerfile has only a root user",
          "secondTitle": "Containers should run as a non-root user. It is good practice to run the container as a non-root user, where possible",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678ab7",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_11-false",
          "mainTitle": "K8s container does not have a CPU limit",
          "secondTitle": "This is not a security issue. Setting a CPU limit is considered best practise.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678ada",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_12-false",
          "mainTitle": "K8s container does not have a memory request",
          "secondTitle": "This is not a security issue. Setting a memory request is considered best practise.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678afc",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_13-false",
          "mainTitle": "K8s container does not have a memory limit",
          "secondTitle": "This is not a security issue. Setting a memory limit is considered best practise.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678b1f",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_15-false",
          "mainTitle": "K8s container may not pull latest image",
          "secondTitle": "When the imagePullPolicy is set to Always, you ensure the latest version of the image is deployed every time the pod is started.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678b8d",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_22-false",
          "mainTitle": "K8s container does not use a read-only filesystem",
          "secondTitle": "Using a read-only filesystem can prevent attackers from permanently taking over a container.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678bdb",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_28-false",
          "mainTitle": "K8s container does not use NET_RAW capabilities",
          "secondTitle": "NET_RAW capability allows the binary to use RAW and PACKET sockets as well as binding to any address for transparent proxying. With Docker as the container runtime NET_RAW capability is enabled by default and may be misused by malicious containers.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678c00",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_29-false",
          "mainTitle": "K8s pod does not have a securityContext assigned",
          "secondTitle": "securityContext defines privilege and access control settings for your pod or container, and holds security configurations that will be applied to a container. Well-defined privilege and access control settings will enhance assurance that your pod is running with the properties it requires to function.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678c25",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_30-false",
          "mainTitle": "K8s container does not have a securityContext assigned",
          "secondTitle": "securityContext defines privilege and access control settings for your pod or container, and holds security configurations that will be applied to a container. Well-defined privilege and access control settings will enhance assurance that your pod is running with the properties it requires to function.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678c4a",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_31-false",
          "mainTitle": "K8s container secure computing mode is not configured to the secure default setting",
          "secondTitle": "Secure computing mode (seccomp) is a Linux kernel feature used to restrict actions available within the container. The default seccomp profile provides a reliable setting for running containers with seccomp and disables non-essential system calls.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678c6e",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_37-false",
          "mainTitle": "K8s container is not restricted to default capabilities",
          "secondTitle": "Limiting the admission of containers with securityContext capabilities ensures that only a small number of containers have extended capabilities outside the default range. This helps ensure that if a container becomes compromised it is unable to provide a productive path for an attacker to move laterally to other containers in the pod.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678c93",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_38-false",
          "mainTitle": "K8s Service Account token should be mounted only when required",
          "secondTitle": "The Service Account token is being used during the authentication stage and can become useful for attackers if the service account is privileged and they have access to such a token. With this token an attacker can easily impersonate the service account and use REST APIs.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678cb7",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_40-false",
          "mainTitle": "K8s container should run under a high UID to prevent privilege escalation",
          "secondTitle": "Linux provides isolation for running processes which limits access to resources. To prevent container privilege-escalation attacks apps should run as unprivileged users.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678cdc",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_43-false",
          "mainTitle": "K8s image to be deployed is not selected by digest",
          "secondTitle": "Pulling an image by digest ensures that you do not have different versions of the image deployed. This is a safer method to deploy images.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678d8a",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_77-false",
          "mainTitle": "K8s authorization mode does not include RBAC",
          "secondTitle": "RBAC (Role-Based Access Control) is a crucial mechanism to define and enforce access policies in Kubernetes. Without RBAC, unauthorized users might gain access to sensitive parts of the cluster, which can lead to data breaches or other security incidents.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678dce",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_9-false",
          "mainTitle": "K8s readiness probe is not configured",
          "secondTitle": "Readiness Probe is a Kubernetes capability that enables teams to make their applications more reliable and robust. This probe regulates under what circumstances the pod should be taken out of the list of service endpoints so that it no longer responds to requests.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678e2c",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_90-false",
          "mainTitle": "K8s API Server profiling argument is not set to false",
          "secondTitle": "Disabling profiling helps to reduce the attack surface by not exposing potentially sensitive system information.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678e71",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_92-false",
          "mainTitle": "K8s audit log retention period is not set to 30 days or as appropriate",
          "secondTitle": "Retaining logs for at least 30 days helps in investigating or correlating events historically, which is crucial for security and compliance purposes.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678e93",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_93-false",
          "mainTitle": "K8s old log file retention count is not set to 10 or as appropriate",
          "secondTitle": "Retaining a sufficient number of old log files aids in investigations or correlations, ensuring ample log data is available for analysis.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678eb5",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_94-false",
          "mainTitle": "K8s audit log file size is not set to 100 MB or as appropriate",
          "secondTitle": "Setting a limit on log file size ensures automatic rotation of logs, helping to maintain a manageable and analyzable log data size.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678f1d",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_14-false",
          "mainTitle": "K8s container is not pulling a specific image version",
          "secondTitle": "Adding a ':fixed' tag to a container image makes it easier to determine what it contains. Especially when you specify the version. Avoid not assigning or setting the image tag to ':latest'.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678f3f",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_21-false",
          "mainTitle": "K8s cluster should not use default namespace",
          "secondTitle": "Using the default namespace can result in disruptions with other services using the same namespace.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678f62",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_8-false",
          "mainTitle": "K8s liveness probe is not configured",
          "secondTitle": "The kubelet uses liveness probes to know when to schedule restarts for containers. Restarting a container in a deadlock state can help to make the application more available, despite bugs.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678f84",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_10-false",
          "mainTitle": "K8s container does not have a CPU request",
          "secondTitle": "This is not a security issue. Setting a CPU request is considered best practise.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678fca",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_140-false",
          "mainTitle": "K8s Kubelet should be enabled via certificate",
          "secondTitle": "The --client-ca-file argument ensures that the apiserver authenticates the Kubelet before submitting requests, preventing potential man-in-the-middle attacks especially over untrusted or public networks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c678fed",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_141-false",
          "mainTitle": "K8s Kubelet read-only port should be disabled",
          "secondTitle": "Disabling the read-only port prevents unauthenticated access to potentially sensitive information about the cluster.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c67900f",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_144-false",
          "mainTitle": "K8s Kernel parameters should be protected from override",
          "secondTitle": "Setting --protect-kernel-defaults to True ensures kubelet kernel defaults match the secured system state, preventing undesired kernel behavior in running pods.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679031",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_K8S_145-false",
          "mainTitle": "K8s Kubelet should manage iptables",
          "secondTitle": "Allowing Kubelet to manage iptables ensures the iptables configuration remains in sync with pods networking configuration, preventing communication issues between pods/containers and the outside world.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679075",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV2_AWS_6-false",
          "mainTitle": "AWS S3 Bucket does not have public access blocks",
          "secondTitle": "Setting public access blocks prevents the S3 bucket from being accidentally public, enhancing data privacy and security.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679099",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV2_AWS_61-false",
          "mainTitle": "AWS S3 bucket does not have a lifecycle configuration",
          "secondTitle": "A lifecycle configuration on an S3 bucket helps manage objects by defining when they transition to less-expensive storage classes or when they get deleted, optimizing costs and enabling a tidy storage management.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c6790bb",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV2_AWS_62-false",
          "mainTitle": "AWS S3 bucket does not have event notifications enabled",
          "secondTitle": "Event notifications on S3 buckets provide real-time monitoring of events, enabling timely reactions to changes and ensuring operational awareness.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c6790dc",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_AWS_144-false",
          "mainTitle": "AWS S3 bucket does not have cross-region replication enabled",
          "secondTitle": "Cross-region replication ensures automatic, asynchronous copying of objects across S3 buckets, aiding in disaster recovery, data durability, and compliance.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c6790fd",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_AWS_145-false",
          "mainTitle": "AWS S3 bucket is not encrypted with KMS by default",
          "secondTitle": "Encrypting S3 buckets with KMS safeguards data from unauthorized access or tampering, ensuring only authorized users can access and decrypt the data.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c679120",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_AWS_18-false",
          "mainTitle": "AWS S3 access logging is not configured",
          "secondTitle": "Access logging provides detailed audit logging for all objects and folders in an S3 bucket.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c67922d",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV2_AWS_41-false",
          "mainTitle": "AWS EC2 instance does not have an IAM role attached",
          "secondTitle": "Attaching IAM roles to EC2 instances grants necessary permissions, ensuring instances operate securely and effectively within defined access boundaries.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c6792d2",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_AWS_135-false",
          "mainTitle": "AWS EC2 EBS is not optimized",
          "secondTitle": "Not Optimized EC2 EBS may consume more resources than required",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c6792f4",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_AWS_23-false",
          "mainTitle": "AWS Security Group rule does not have a description",
          "secondTitle": "Adding a description to a Security group will make it easier to understand the reasons for the rules set up and will make it easier to maintain.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c67933e",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_AWS_79-false",
          "mainTitle": "AWS EC2 Instance Metadata Service version without authentication",
          "secondTitle": "Instance Metadata Service version 1 provides metadata without authentication. In this case sensitive information leakage may occur.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c67938b",
          "issueId": "584352228-oxPolicy_CICD_workflow_min_perm_code_1-cicd.github-actions.github-actions-token-least-privileges-false",
          "mainTitle": "Workflow file should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow file",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_code_1",
            "name": "Excessive permissions in workflow file",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c6794ca",
          "issueId": "584352228-oxPolicy_securityScan_120-io.springfox:springfox-swagger2_2.9.2",
          "mainTitle": "springfox-swagger2@2.9.2 is a Java direct dependency having 3 indirect vulnerabilities and no direct vulnerabilities. CVE-2023-2976 (CVSS:7.1, Improper Access Control) is the most severe vulnerability.",
          "secondTitle": "io.springfox:springfox-swagger2\\@2.9.2 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 3 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 14 indirect dependencies<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Medium : 2<br>&bull; Low : 1<br><br>\n          The following dependency has vulnerabilities: com.google.guava:guava\\@20.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679759",
          "issueId": "584352228-oxPolicy_securityScan_120-org.springframework.boot:spring-boot-starter_2.1.2.RELEASE",
          "mainTitle": "spring-boot-starter@2.1.2.RELEASE is a Java direct dependency having 11 indirect vulnerabilities and no direct vulnerabilities. CVE-2022-27772 (CVSS:7.8, Information Exposure) is the most severe vulnerability.",
          "secondTitle": "org.springframework.boot:spring-boot-starter\\@2.1.2.RELEASE is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 11 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 2 vulnerabilities with  publicly available exploits<br>&bull; 12 indirect dependencies<br><br>There are a total of 11 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 7<br>&bull; Medium : 4<br><br>\n          The following 5 dependencies have vulnerabilities: org.springframework.boot:spring-boot\\@2.1.2.RELEASE, org.springframework.boot:spring-boot-autoconfigure\\@2.1.2.RELEASE, org.springframework:spring-core\\@5.1.4.RELEASE, ch.qos.logback:logback-classic\\@1.2.3, ch.qos.logback:logback-core\\@1.2.3",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 11,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c6798f2",
          "issueId": "584352228-oxPolicy_securityScan_secrets_1-ec6564f77f1005d4466f30a03a0d2fb9",
          "mainTitle": "reCAPTCHA Site Key was found in the code of a private repository",
          "secondTitle": "reCAPTCHA Site Key was found in the code of a private repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Eyal Paz"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699508414861
        },
        {
          "id": "656edc0c64210a0f3c679ba2",
          "issueId": "584352228-oxPolicy_CICD_pin_action_commit_sha_1-docker/setup-qemu-action_Bank-Website",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/setup-qemu-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/setup-qemu-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679bcd",
          "issueId": "584352228-oxPolicy_CICD_pin_action_commit_sha_1-docker/setup-buildx-action_Bank-Website",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/setup-buildx-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/setup-buildx-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679c0e",
          "issueId": "584352228-oxPolicy_securityScan_205-javascript.express.security.audit.xss.mustache.template-explicit-unescape-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability due to explicit unescape in a Mustache template",
          "secondTitle": "This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679c38",
          "issueId": "584352228-oxPolicy_securityScan_205-javascript.express.security.audit.xss.mustache.var-in-script-tag-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability due to variable usage in script tag",
          "secondTitle": "This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679c64",
          "issueId": "584352228-oxPolicy_securityScan_205-javascript.jquery.security.audit.jquery-insecure-method-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in JQuery method",
          "secondTitle": "User controlled data in a jQuery's '.$METHOD(...)' is an anti-pattern that can lead to XSS vulnerabilities. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679c8e",
          "issueId": "584352228-oxPolicy_securityScan_205-javascript.jquery.security.audit.prohibit-jquery-html-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in JQuery .html() function",
          "secondTitle": "JQuery's '.html()' is susceptible to Cross Site Scripting (XSS) attacks. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679ce0",
          "issueId": "584352228-oxPolicy_securityScan_205-java.spring.security.unrestricted-request-mapping-false",
          "mainTitle": "Cross-Site Request Forgery (CSRF) vulnerability due to unrestricted Request Mapping",
          "secondTitle": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679d0b",
          "issueId": "584352228-oxPolicy_securityScan_205-java.lang.security.audit.command-injection-process-builder-false",
          "mainTitle": "Command Injection vulnerability due to formatted string in ProcessBuilder call",
          "secondTitle": "A command injection vulnerability in Java code using the ProcessBuilder class was detected. Specifically, the use of untrusted data was seen in the arguments passed to the start() method of the ProcessBuilder class, which can lead to command injection attacks.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679dd9",
          "issueId": "584352228-oxPolicy_securityScan_205-java.lang.security.audit.sqli.jdbc-sqli-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability due to formatted string in a SQL statement",
          "secondTitle": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c67a481",
          "issueId": "584352228-oxPolicy_deployment_221-nginx_alpine_client/Dockerfile",
          "mainTitle": "nginx@alpine is a base image defined in client/Dockerfile having 5 vulnerabilities. Top risk: CVE-2023-43787 (CVSS:7.8, Incorrect Calculation)",
          "secondTitle": "nginx\\@alpine is the base image used in client/Dockerfile.<br><br> There are a total of 5 vulnerabilities in nginx\\@alpine.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br>&bull; Medium : 4<br><br>\n          The following 3 dependencies have vulnerabilities: libx11\\@1.8.4-r4, libcrypto3\\@3.1.4-r0, libssl3\\@3.1.4-r0",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1696394420762
        },
        {
          "id": "656edc0c64210a0f3c67a4bb",
          "issueId": "584352228-oxPolicy_deployment_221-nginx_alpine_internal_site/Dockerfile",
          "mainTitle": "nginx@alpine is a base image defined in internal_site/Dockerfile having 5 vulnerabilities. Top risk: CVE-2023-43787 (CVSS:7.8, Incorrect Calculation)",
          "secondTitle": "nginx\\@alpine is the base image used in internal_site/Dockerfile.<br><br> There are a total of 5 vulnerabilities in nginx\\@alpine.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br>&bull; Medium : 4<br><br>\n          The following 3 dependencies have vulnerabilities: libx11\\@1.8.4-r4, libcrypto3\\@3.1.4-r0, libssl3\\@3.1.4-r0",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1696394420762
        },
        {
          "id": "656edc4264210a0f3c6898c6",
          "issueId": "584102675-oxPolicy_securityScan_55-CKV_AWS_115-false",
          "mainTitle": "AWS Lambda concurrency limits are not configured",
          "secondTitle": "Adding concurrency to Lambda initializes that number of execution environments for multiple parallel requests. This could spike costs and open the door for abuse.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4264210a0f3c6898e4",
          "issueId": "584102675-oxPolicy_securityScan_55-CKV_AWS_116-false",
          "mainTitle": "AWS Lambda logs may be lost as a dead-letter queue is not used",
          "secondTitle": "It is always important to understand why your application/function failed and to ensure that no data was dropped or compromised. A dead-letter queue (DLQ) is a holding queue for messages that cannot be delivered to their destination queues.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4264210a0f3c689905",
          "issueId": "584102675-oxPolicy_securityScan_55-CKV_AWS_117-false",
          "mainTitle": "AWS Lambda is not configured inside a VPC",
          "secondTitle": "AWS Lambda functions should run in a secure VPC with access to AWS services and the internet. By using a VPC, the function can be secured behind a network firewall, and access to the Lambda function can be controlled by network access control lists (ACLs) and security groups.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4264210a0f3c6899d0",
          "issueId": "584102675-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689b01",
          "issueId": "584102675-oxPolicy_securityScan_120-jsonwebtoken_8.5.1",
          "mainTitle": "jsonwebtoken@8.5.1 is a JavaScript direct dependency having 3 direct and 1 indirect vulnerabilities. CVE-2022-23539 (CVSS:8.1, Weak Encryption) is the most severe vulnerability.",
          "secondTitle": "jsonwebtoken\\@8.5.1 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 3 direct and 1 indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 16 indirect dependencies<br><br>There are a total of 4 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Medium : 4<br><br>\n          The following 2 dependencies have vulnerabilities: jsonwebtoken\\@8.5.1, semver\\@5.7.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689e4e",
          "issueId": "584102675-oxPolicy_CICD_general_1-CKV_GHA_2-false",
          "mainTitle": "GitHub Actions run command is vulnerable to shell injection",
          "secondTitle": "GitHub Actions run commands that are vulnerable to shell injection pose a security risk by potentially allowing unauthorized code execution.",
          "name": "CI/CD workflow security issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_general_1",
            "name": "CI/CD workflow security issue",
            "detailedDescription": "Protecting workflow files from a security perspective involves practices such as implementing access controls, regularly reviewing and updating the files, scanning for vulnerabilities, and monitoring for unauthorized changes. By taking these steps, organizations can minimize the risk of security breaches, ensure the integrity of their systems, and maintain a secure development environment."
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689e72",
          "issueId": "584102675-oxPolicy_CICD_pin_action_commit_sha_1-aws-actions/configure-aws-credentials_Multi-currency-management",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: aws-actions/configure-aws-credentials",
          "secondTitle": "The workflow is using a third-party Actions 'aws-actions/configure-aws-credentials' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689e8b",
          "issueId": "584102675-oxPolicy_CICD_pin_action_commit_sha_1-aws-actions/amazon-ecr-login_Multi-currency-management",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: aws-actions/amazon-ecr-login",
          "secondTitle": "The workflow is using a third-party Actions 'aws-actions/amazon-ecr-login' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689ec9",
          "issueId": "584102675-oxPolicy_securityScan_205-DS125134-false",
          "mainTitle": "Always use a valid certificate, even during testing.",
          "secondTitle": "Disabled certificate validation",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689f3d",
          "issueId": "584102675-oxPolicy_securityScan_205-javascript.jsonwebtoken.security.audit.jwt-decode-without-verify-false",
          "mainTitle": "JWT is decoded before its signature is verified",
          "secondTitle": "The 'jwt.decode' function in the jsonwebtoken package in JavaScript is used without verifying the signature of the token. If an attacker is able to modify the JWT without being detected, and the application trusts the JWT, the attacker could potentially impersonate a legitimate user or access sensitive information or functionality.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689f64",
          "issueId": "584102675-oxPolicy_securityScan_205-problem-based-packs.insecure-transport.js-node.bypass-tls-verification-false",
          "mainTitle": "Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized to false bypasses verification against the list of trusted CAs, which also leads to insecure transport. These options lead to vulnerability to MTM attacks, and should not be used.",
          "secondTitle": "Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized to false bypasses verification against the list of trusted CAs, which also leads to insecure transport. These options lead to vulnerability to MTM attacks, and should not be used.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc4364210a0f3c689f8b",
          "issueId": "584102675-oxPolicy_securityScan_205-problem-based-packs.insecure-transport.js-node.using-http-server-false",
          "mainTitle": "Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.",
          "secondTitle": "Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf264210a0f3c674136",
          "issueId": "647669373-oxPolicy_securityScan_55-CKV_DOCKER_3-false",
          "mainTitle": "Dockerfile has only a root user",
          "secondTitle": "Containers should run as a non-root user. It is good practice to run the container as a non-root user, where possible",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "snyk-bot"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c674159",
          "issueId": "647669373-oxPolicy_securityScan_55-CKV_DOCKER_7-false",
          "mainTitle": "Dockerfile has 'FROM' with the 'latest' version tag",
          "secondTitle": "The 'FROM' statement uses the ':latest' tag, which points to the latest version of an image. Relying on ':latest' can lead to uncontrolled behavior when the image is updated, potentially introducing changes or issues beyond your control.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Liran Yogev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c674189",
          "issueId": "647669373-oxPolicy_securityScan_55-CKV_DOCKER_4-false",
          "mainTitle": "Dockerfile has unsafe 'ADD' instruction",
          "secondTitle": "Using 'ADD' instead of 'COPY' can introduce the risk of Zip-based vulnerabilities when extracting tar files. To avoid unnecessary risks, it is recommended to use 'COPY' for copying files unless there is a specific need to extract a tar file.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Amir Halatzi"
          ],
          "occurrences": 67,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c6741e2",
          "issueId": "647669373-oxPolicy_securityScan_55-CKV_DOCKER_8-false",
          "mainTitle": "Dockerfile has root as last defined user",
          "secondTitle": "By default, containers run as the root user, which has unrestricted access to the host system. Running containers as a non-root user can help prevent privilege escalation attacks and reduce the impact of any successful exploitation of vulnerabilities in the container.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Liran Yogev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c6741fb",
          "issueId": "647669373-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edcc964210a0f3c694d32",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_10-false",
          "mainTitle": "K8s container does not have a CPU request",
          "secondTitle": "This is not a security issue. Setting a CPU request is considered best practise.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcc964210a0f3c694d56",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_11-false",
          "mainTitle": "K8s container does not have a CPU limit",
          "secondTitle": "This is not a security issue. Setting a CPU limit is considered best practise.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcc964210a0f3c694d7a",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_12-false",
          "mainTitle": "K8s container does not have a memory request",
          "secondTitle": "This is not a security issue. Setting a memory request is considered best practise.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694d9e",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_13-false",
          "mainTitle": "K8s container does not have a memory limit",
          "secondTitle": "This is not a security issue. Setting a memory limit is considered best practise.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694dc2",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_14-false",
          "mainTitle": "K8s container is not pulling a specific image version",
          "secondTitle": "Adding a ':fixed' tag to a container image makes it easier to determine what it contains. Especially when you specify the version. Avoid not assigning or setting the image tag to ':latest'.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694e10",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_22-false",
          "mainTitle": "K8s container does not use a read-only filesystem",
          "secondTitle": "Using a read-only filesystem can prevent attackers from permanently taking over a container.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694e60",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_28-false",
          "mainTitle": "K8s container does not use NET_RAW capabilities",
          "secondTitle": "NET_RAW capability allows the binary to use RAW and PACKET sockets as well as binding to any address for transparent proxying. With Docker as the container runtime NET_RAW capability is enabled by default and may be misused by malicious containers.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694e86",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_29-false",
          "mainTitle": "K8s pod does not have a securityContext assigned",
          "secondTitle": "securityContext defines privilege and access control settings for your pod or container, and holds security configurations that will be applied to a container. Well-defined privilege and access control settings will enhance assurance that your pod is running with the properties it requires to function.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694eac",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_30-false",
          "mainTitle": "K8s container does not have a securityContext assigned",
          "secondTitle": "securityContext defines privilege and access control settings for your pod or container, and holds security configurations that will be applied to a container. Well-defined privilege and access control settings will enhance assurance that your pod is running with the properties it requires to function.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694ed2",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_31-false",
          "mainTitle": "K8s container secure computing mode is not configured to the secure default setting",
          "secondTitle": "Secure computing mode (seccomp) is a Linux kernel feature used to restrict actions available within the container. The default seccomp profile provides a reliable setting for running containers with seccomp and disables non-essential system calls.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694ef7",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_37-false",
          "mainTitle": "K8s container is not restricted to default capabilities",
          "secondTitle": "Limiting the admission of containers with securityContext capabilities ensures that only a small number of containers have extended capabilities outside the default range. This helps ensure that if a container becomes compromised it is unable to provide a productive path for an attacker to move laterally to other containers in the pod.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694f1d",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_38-false",
          "mainTitle": "K8s Service Account token should be mounted only when required",
          "secondTitle": "The Service Account token is being used during the authentication stage and can become useful for attackers if the service account is privileged and they have access to such a token. With this token an attacker can easily impersonate the service account and use REST APIs.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694f42",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_40-false",
          "mainTitle": "K8s container should run under a high UID to prevent privilege escalation",
          "secondTitle": "Linux provides isolation for running processes which limits access to resources. To prevent container privilege-escalation attacks apps should run as unprivileged users.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694f68",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_43-false",
          "mainTitle": "K8s image to be deployed is not selected by digest",
          "secondTitle": "Pulling an image by digest ensures that you do not have different versions of the image deployed. This is a safer method to deploy images.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694f8d",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_8-false",
          "mainTitle": "K8s liveness probe is not configured",
          "secondTitle": "The kubelet uses liveness probes to know when to schedule restarts for containers. Restarting a container in a deadlock state can help to make the application more available, despite bugs.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694fb0",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_K8S_9-false",
          "mainTitle": "K8s readiness probe is not configured",
          "secondTitle": "Readiness Probe is a Kubernetes capability that enables teams to make their applications more reliable and robust. This probe regulates under what circumstances the pod should be taken out of the list of service endpoints so that it no longer responds to requests.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c694fd3",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_DOCKER_3-false",
          "mainTitle": "Dockerfile has only a root user",
          "secondTitle": "Containers should run as a non-root user. It is good practice to run the container as a non-root user, where possible",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c695000",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_DOCKER_4-false",
          "mainTitle": "Dockerfile has unsafe 'ADD' instruction",
          "secondTitle": "Using 'ADD' instead of 'COPY' can introduce the risk of Zip-based vulnerabilities when extracting tar files. To avoid unnecessary risks, it is recommended to use 'COPY' for copying files unless there is a specific need to extract a tar file.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c69525d",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.jquery.security.audit.jquery-insecure-method-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in JQuery method",
          "secondTitle": "User controlled data in a jQuery's '.$METHOD(...)' is an anti-pattern that can lead to XSS vulnerabilities. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 12,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c695296",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.jquery.security.audit.jquery-insecure-selector-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in JQuery selector",
          "secondTitle": "User controlled data in a '$(...)' is an anti-pattern that can lead to XSS vulnerabilities. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 44,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c6952ef",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.jquery.security.audit.prohibit-jquery-html-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in JQuery .html() function",
          "secondTitle": "JQuery's '.html()' is susceptible to Cross Site Scripting (XSS) attacks. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 21,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c695331",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.lang.security.audit.detect-non-literal-regexp-false",
          "mainTitle": "Denial-of-Service (DoS) vulnerability due to regex input",
          "secondTitle": "RegExp() is called with a variable, and this might allow an attacker to utilize a Denial-of-Service attack on your application with a long-running regular expression.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 75,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c6953a7",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop-false",
          "mainTitle": "Prototype Pollution vulnerability",
          "secondTitle": "By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c695431",
          "issueId": "310663043-oxPolicy_securityScan_205-java.spring.security.audit.spring-csrf-disabled-false",
          "mainTitle": "CSRF protection is disabled for this configuration. This is a security risk.",
          "secondTitle": "CSRF protection is disabled for this configuration. This is a security risk.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c69545e",
          "issueId": "310663043-oxPolicy_securityScan_205-java.spring.security.unrestricted-request-mapping-false",
          "mainTitle": "Cross-Site Request Forgery (CSRF) vulnerability due to unrestricted Request Mapping",
          "secondTitle": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ren\u00e9 Zubcevic"
          ],
          "occurrences": 16,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c6954ca",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.browser.security.insecure-document-method-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability via insecure document methods usage",
          "secondTitle": "A potentially insecure DOM (Document Object Model) manipulation method in JavaScript code that runs in a web browser was detected. Using insecure DOM manipulation methods can result in cross-site scripting (XSS) vulnerabilities, which can allow an attacker to execute malicious JavaScript code in the context of the affected website. This can result in sensitive data theft, unauthorized access to the user's session, or other malicious activities.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 29,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c695514",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.browser.security.insecure-innerhtml-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in Element.innerHTML",
          "secondTitle": "Usage of the insecure innerHTML property in JavaScript code running in a web browser was detected. The innerHTML property allows a developer to set the HTML content of an element directly, making it vulnerable to Cross-Site Scripting (XSS) attacks, which can allow an attacker to execute malicious JavaScript code in the context of the affected website. This can result in sensitive data theft, unauthorized access to the user's session, or other malicious activities.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 29,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c69558f",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.lang.security.audit.unsafe-dynamic-method-false",
          "mainTitle": "Command Injection vulnerability due to dynamic code execution",
          "secondTitle": "Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may lead to a command injection vulnerability.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 46,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c6955eb",
          "issueId": "310663043-oxPolicy_securityScan_205-DS148264-false",
          "mainTitle": "Usage of non-cryptographic random number generator",
          "secondTitle": "This detection only matters if the random number generator is being used in a security related function. If so, this means that an input to the function is unsafe and can be guessed.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c695679",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.express.security.audit.xss.ejs.var-in-href-false",
          "mainTitle": "Cross-Site Scripting (XSS) vulnerability due to unescaped variable injection in 'href'",
          "secondTitle": "If untrusted data is used in the `href` attribute of a link, an attacker could inject malicious code that gets executed when a user clicks on the link. This could lead to the theft of sensitive information, such as user credentials or session cookies.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c6956d7",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.lang.security.audit.detect-non-literal-require-false",
          "mainTitle": "Code Injection vulnerability due to non-literal package import",
          "secondTitle": "Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load and run arbitrary code, or access arbitrary files.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c69577d",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.lang.security.audit.prototype-pollution.prototype-pollution-assignment-false",
          "mainTitle": "Prototype Pollution vulnerability due to detected assignment to prototype object",
          "secondTitle": "By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 8,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edccb64210a0f3c6958ec",
          "issueId": "310663043-oxPolicy_securityScan_205-java.lang.security.audit.crypto.weak-random-false",
          "mainTitle": "Weak cryptographic algorithm used",
          "secondTitle": "Detected use of the functions 'Math.random()' or 'java.util.Random()'. These are both not cryptographically strong random number generators (RNGs).",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ren\u00e9 Zubcevic"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edccb64210a0f3c695920",
          "issueId": "310663043-oxPolicy_securityScan_205-java.lang.security.audit.tainted-session-from-http-request-false",
          "mainTitle": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.",
          "secondTitle": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ren\u00e9 Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edccb64210a0f3c6959a7",
          "issueId": "310663043-oxPolicy_securityScan_205-java.lang.security.audit.object-deserialization-false",
          "mainTitle": "Insecure Deserialization of objects using ObjectInputStream",
          "secondTitle": "Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ren\u00e9 Zubcevic"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edccb64210a0f3c6959d7",
          "issueId": "310663043-oxPolicy_securityScan_205-java.lang.security.audit.cookie-missing-httponly-false",
          "mainTitle": "Information Disclosure vulnerability as cookie can be read by client-side script",
          "secondTitle": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edccb64210a0f3c695a05",
          "issueId": "310663043-oxPolicy_securityScan_205-java.lang.security.audit.cookie-missing-secure-flag-false",
          "mainTitle": "Cookie can be transmitted over an insecure channel",
          "secondTitle": "Missing 'Secure' flag usage in Java for cookies was detected. Cookies with the 'Secure' flag can only be transmitted over an encrypted connection, helping to prevent eavesdropping or tampering with the cookie's contents. If cookies are transmitted over an unencrypted connection, an attacker can potentially steal or modify their contents.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edccb64210a0f3c695a33",
          "issueId": "310663043-oxPolicy_securityScan_205-java.servlets.security.cookie-issecure-false-false",
          "mainTitle": "Cookie can be transmitted over an insecure channel",
          "secondTitle": "A Java Servlets application has 'isSecure' flag set to false for cookies. Cookies with the 'isSecure' flag set to false may not be transmitted over an encrypted connection. If cookies are transmitted over an unencrypted connection, an attacker can potentially steal or modify their contents.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edccb64210a0f3c695a62",
          "issueId": "310663043-oxPolicy_securityScan_205-java.lang.security.audit.sqli.jdbc-sqli-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability due to formatted string in a SQL statement",
          "secondTitle": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Nanne Baars"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edccb64210a0f3c695aeb",
          "issueId": "310663043-oxPolicy_securityScan_205-java.lang.security.xmlinputfactory-possible-xxe-false",
          "mainTitle": "XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.",
          "secondTitle": "XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656eded464210a0f3c6a0f3f",
          "issueId": "585303099-oxPolicy_securityScan_55-CKV2_GHA_1-false",
          "mainTitle": "Github Actions job has top-level write-all permissions",
          "secondTitle": "Granting top-level write-all permissions in Github Actions can lead to unauthorized or accidental modifications to the repository, potentially introducing security vulnerabilities or causing significant damage. To prevent such incidents, it's important to grant only the necessary permissions for specific Github Actions jobs.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a0fa1",
          "issueId": "585303099-oxPolicy_securityScan_55-CKV_DOCKER_3-false",
          "mainTitle": "Dockerfile has only a root user",
          "secondTitle": "Containers should run as a non-root user. It is good practice to run the container as a non-root user, where possible",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Liad-OX"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a10a5",
          "issueId": "585303099-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a1160",
          "issueId": "585303099-oxPolicy_securityScan_120-decode-uri-component_0.2.0",
          "mainTitle": "decode-uri-component@0.2.0 is a JavaScript direct dependency having 1 direct vulnerability and no indirect vulnerabilities. CVE-2022-38900 (CVSS:7.5, Improper Input Validation) is the most severe vulnerability.",
          "secondTitle": "decode-uri-component\\@0.2.0 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: decode-uri-component\\@0.2.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Eyal Paz"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656eded464210a0f3c6a1198",
          "issueId": "585303099-oxPolicy_securityScan_120-pycrypto_2.6.1",
          "mainTitle": "pycrypto@2.6.1 is a Python direct dependency having 2 direct vulnerabilities and no indirect vulnerabilities. CVE-2013-7459 (CVSS:9.8, Buffer Overflow) is the most severe vulnerability.",
          "secondTitle": "pycrypto\\@2.6.1 is a Python package that was added as a direct dependency. It contains:<br><br>&bull; 2 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 2 vulnerabilities with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: pycrypto\\@2.6.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a11d4",
          "issueId": "585303099-oxPolicy_securityScan_120-numpy_1.15.4",
          "mainTitle": "numpy@1.15.4 is a Python direct dependency having 5 direct vulnerabilities and no indirect vulnerabilities. CVE-2019-6446 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "numpy\\@1.15.4 is a Python package that was added as a direct dependency. It contains:<br><br>&bull; 5 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 5 vulnerabilities with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There are a total of 5 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 1<br>&bull; Medium : 3<br><br>\n          The following dependency has vulnerabilities: numpy\\@1.15.4",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a121e",
          "issueId": "585303099-oxPolicy_securityScan_120-tensorflow_2.1.0",
          "mainTitle": "tensorflow@2.1.0 is a Python direct dependency having 397 direct and 1 indirect vulnerabilities. CVE-2020-15205 (CVSS:9.8, Buffer Overflow) is the most severe vulnerability.",
          "secondTitle": "tensorflow\\@2.1.0 is a Python package that was added as a direct dependency. It contains:<br><br>&bull; 397 direct and 1 indirect vulnerabilities<br>&bull; 234 vulnerabilities with  publicly available exploits<br>&bull; 35 indirect dependencies<br><br>There are a total of 398 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 7<br>&bull; High : 95<br>&bull; Medium : 194<br>&bull; Low : 102<br><br>\n          The following 2 dependencies have vulnerabilities: tensorflow\\@2.1.0, scipy\\@1.4.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 398,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a1933",
          "issueId": "585303099-oxPolicy_securityScan_120-notebook_5.7.8",
          "mainTitle": "notebook@5.7.8 is a Python direct dependency having 5 direct vulnerabilities and no indirect vulnerabilities. CVE-2021-32798 (CVSS:9.6, Cross-site scripting) is the most severe vulnerability.",
          "secondTitle": "notebook\\@5.7.8 is a Python package that was added as a direct dependency. It contains:<br><br>&bull; 5 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 2 vulnerabilities with  publicly available exploits<br>&bull; 58 indirect dependencies<br><br>There are a total of 5 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 2<br>&bull; Medium : 2<br><br>\n          The following dependency has vulnerabilities: notebook\\@5.7.8",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a197e",
          "issueId": "585303099-oxPolicy_securityScan_120-jupyterlab_3.0.16",
          "mainTitle": "jupyterlab@3.0.16 is a Python direct dependency having 1 direct and 2 indirect vulnerabilities. CVE-2021-32797 (CVSS:9.6, Cross-site scripting) is the most severe vulnerability.",
          "secondTitle": "jupyterlab\\@3.0.16 is a Python package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct and 2 indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 75 indirect dependencies<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br>&bull; Medium : 2<br><br>\n          The following 2 dependencies have vulnerabilities: jupyterlab\\@3.0.16, jupyter-server\\@1.24.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a1a0b",
          "issueId": "585303099-oxPolicy_securityScan_120-joblib_1.1.0",
          "mainTitle": "joblib@1.1.0 is a Python direct dependency having 1 direct vulnerability and no indirect vulnerabilities. CVE-2022-21797 (CVSS:9.8) is the most severe vulnerability.",
          "secondTitle": "joblib\\@1.1.0 is a Python package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br><br>\n          The following dependency has vulnerabilities: joblib\\@1.1.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a1a3c",
          "issueId": "585303099-oxPolicy_securityScan_120-pillow_8.3.2",
          "mainTitle": "pillow@8.3.2 is a Python direct dependency having 9 direct vulnerabilities and no indirect vulnerabilities. CVE-2022-22817 (CVSS:9.8, Improper Input Validation) is the most severe vulnerability.",
          "secondTitle": "pillow\\@8.3.2 is a Python package that was added as a direct dependency. It contains:<br><br>&bull; 9 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There are a total of 9 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 4<br>&bull; Medium : 2<br>&bull; Low : 1<br><br>\n          The following dependency has vulnerabilities: pillow\\@8.3.2",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 9,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a1a96",
          "issueId": "585303099-oxPolicy_securityScan_120-certifi_2022.6.15",
          "mainTitle": "certifi@2022.6.15 is a Python direct dependency having 2 direct vulnerabilities and no indirect vulnerabilities. CVE-2023-37920 (CVSS:9.8, Insufficient Verification of Data Authenticity) is the most severe vulnerability.",
          "secondTitle": "certifi\\@2022.6.15 is a Python package that was added as a direct dependency. It contains:<br><br>&bull; 2 direct vulnerabilities and no indirect vulnerabilities<br>&bull; No indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br>&bull; Medium : 1<br><br>\n          The following dependency has vulnerabilities: certifi\\@2022.6.15",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a1acf",
          "issueId": "585303099-oxPolicy_securityScan_120-torch_1.8.1",
          "mainTitle": "torch@1.8.1 is a Python direct dependency having 1 direct vulnerability and no indirect vulnerabilities. CVE-2022-45907 (CVSS:9.8, Code Injection) is the most severe vulnerability.",
          "secondTitle": "torch\\@1.8.1 is a Python package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 2 indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br><br>\n          The following dependency has vulnerabilities: torch\\@1.8.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a1b04",
          "issueId": "585303099-oxPolicy_securityScan_120-werkzeug_1.0.1",
          "mainTitle": "werkzeug@1.0.1 is a Python direct dependency having 3 direct vulnerabilities and no indirect vulnerabilities. CVE-2023-25577 (CVSS:7.5, Improper Memory Management) is the most severe vulnerability.",
          "secondTitle": "werkzeug\\@1.0.1 is a Python package that was added as a direct dependency. It contains:<br><br>&bull; 3 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 1 indirect dependencies<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br>&bull; Medium : 1<br>&bull; Low : 1<br><br>\n          The following dependency has vulnerabilities: werkzeug\\@1.0.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded564210a0f3c6a1c7e",
          "issueId": "585303099-oxPolicy_securityScan_secrets_1-generic-password-false-false",
          "mainTitle": "Generic Password was found in the code of a private repository",
          "secondTitle": "Generic Password was found in the code of a private repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded564210a0f3c6a1d9c",
          "issueId": "585303099-oxPolicy_CICD_general_1-CKV2_GHA_1-false",
          "mainTitle": "Github Actions job has top-level write-all permissions",
          "secondTitle": "Granting top-level write-all permissions in Github Actions can lead to unauthorized or accidental modifications to the repository, potentially introducing security vulnerabilities or causing significant damage. To prevent such incidents, it's important to grant only the necessary permissions for specific Github Actions jobs.",
          "name": "CI/CD workflow security issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_general_1",
            "name": "CI/CD workflow security issue",
            "detailedDescription": "Protecting workflow files from a security perspective involves practices such as implementing access controls, regularly reviewing and updating the files, scanning for vulnerabilities, and monitoring for unauthorized changes. By taking these steps, organizations can minimize the risk of security breaches, ensure the integrity of their systems, and maintain a secure development environment."
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698819933402
        },
        {
          "id": "656eded564210a0f3c6a1dd7",
          "issueId": "585303099-oxPolicy_CICD_pin_action_commit_sha_1-google-github-actions/auth_Bank-Website-Backend",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: google-github-actions/auth",
          "secondTitle": "The workflow is using a third-party Actions 'google-github-actions/auth' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded564210a0f3c6a1e85",
          "issueId": "585303099-oxPolicy_securityScan_205-javascript.lang.security.html-in-template-string-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability due to interpolated variables",
          "secondTitle": "This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS).",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "mirox13"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1697176812236
        },
        {
          "id": "656eded564210a0f3c6a1f81",
          "issueId": "585303099-oxPolicy_securityScan_205-python.lang.security.audit.insecure-transport.ftplib.use-ftp-tls-false",
          "mainTitle": "FTP is not a secure protocol for sending files",
          "secondTitle": "FTP is an insecure protocol that sends data, including passwords, in clear text. If an attacker is able to intercept the communication, sensitive information such as login credentials, IP and data with PII can be easily obtained.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edbfe64210a0f3c6754c2",
          "issueId": "585479391-oxPolicy_securityScan_55-CKV_DOCKER_3-false",
          "mainTitle": "Dockerfile has only a root user",
          "secondTitle": "Containers should run as a non-root user. It is good practice to run the container as a non-root user, where possible",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "585479391",
            "name": "OX-Security-Demo/Investment-management",
            "businessPriority": 66.5142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edbfe64210a0f3c6754e3",
          "issueId": "585479391-oxPolicy_securityScan_55-CKV_DOCKER_7-false",
          "mainTitle": "Dockerfile has 'FROM' with the 'latest' version tag",
          "secondTitle": "The 'FROM' statement uses the ':latest' tag, which points to the latest version of an image. Relying on ':latest' can lead to uncontrolled behavior when the image is updated, potentially introducing changes or issues beyond your control.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "585479391",
            "name": "OX-Security-Demo/Investment-management",
            "businessPriority": 66.5142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edbfe64210a0f3c6754fb",
          "issueId": "585479391-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "585479391",
            "name": "OX-Security-Demo/Investment-management",
            "businessPriority": 66.5142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edbfe64210a0f3c67555f",
          "issueId": "585479391-oxPolicy_CICD_pin_action_commit_sha_1-docker/setup-qemu-action_Investment-management",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/setup-qemu-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/setup-qemu-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "585479391",
            "name": "OX-Security-Demo/Investment-management",
            "businessPriority": 66.5142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edbfe64210a0f3c675575",
          "issueId": "585479391-oxPolicy_CICD_pin_action_commit_sha_1-docker/setup-buildx-action_Investment-management",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/setup-buildx-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/setup-buildx-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "585479391",
            "name": "OX-Security-Demo/Investment-management",
            "businessPriority": 66.5142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edbfe64210a0f3c67558b",
          "issueId": "585479391-oxPolicy_CICD_pin_action_commit_sha_1-docker/login-action_Investment-management",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/login-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/login-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "585479391",
            "name": "OX-Security-Demo/Investment-management",
            "businessPriority": 66.5142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edbfe64210a0f3c6755a1",
          "issueId": "585479391-oxPolicy_deployment_221-alpine_latest_Dockerfile",
          "mainTitle": "alpine@latest is a base image defined in Dockerfile having 4 vulnerabilities. Top risk: CVE-2023-5363 (CVSS:7.5)",
          "secondTitle": "alpine\\@latest is the base image used in Dockerfile.<br><br> There are a total of 4 vulnerabilities in alpine\\@latest.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 2<br>&bull; Medium : 2<br><br>\n          The following 2 dependencies have vulnerabilities: libcrypto3\\@3.1.3-r0, libssl3\\@3.1.3-r0",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585479391",
            "name": "OX-Security-Demo/Investment-management",
            "businessPriority": 66.5142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc0c64210a0f3c6799a6",
          "issueId": "585497913-oxPolicy_securityScan_55-CKV_DOCKER_3-false",
          "mainTitle": "Dockerfile has only a root user",
          "secondTitle": "Containers should run as a non-root user. It is good practice to run the container as a non-root user, where possible",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c6799c3",
          "issueId": "585497913-oxPolicy_securityScan_55-CKV_DOCKER_7-false",
          "mainTitle": "Dockerfile has 'FROM' with the 'latest' version tag",
          "secondTitle": "The 'FROM' statement uses the ':latest' tag, which points to the latest version of an image. Relying on ':latest' can lead to uncontrolled behavior when the image is updated, potentially introducing changes or issues beyond your control.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679a01",
          "issueId": "585497913-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679a65",
          "issueId": "585497913-oxPolicy_CICD_pin_action_commit_sha_1-docker/setup-qemu-action_BankForensicsCollector",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/setup-qemu-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/setup-qemu-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679a7a",
          "issueId": "585497913-oxPolicy_CICD_pin_action_commit_sha_1-docker/setup-buildx-action_BankForensicsCollector",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/setup-buildx-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/setup-buildx-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679a8f",
          "issueId": "585497913-oxPolicy_CICD_pin_action_commit_sha_1-docker/login-action_BankForensicsCollector",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/login-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/login-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679af9",
          "issueId": "585497913-oxPolicy_securityScan_205-DS148264-false",
          "mainTitle": "Usage of non-cryptographic random number generator",
          "secondTitle": "This detection only matters if the random number generator is being used in a security related function. If so, this means that an input to the function is unsafe and can be guessed.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679b2e",
          "issueId": "585497913-oxPolicy_deployment_221-alpine_latest_Dockerfile",
          "mainTitle": "alpine@latest is a base image defined in Dockerfile having 4 vulnerabilities. Top risk: CVE-2023-5363 (CVSS:7.5)",
          "secondTitle": "alpine\\@latest is the base image used in Dockerfile.<br><br> There are a total of 4 vulnerabilities in alpine\\@latest.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 2<br>&bull; Medium : 2<br><br>\n          The following 2 dependencies have vulnerabilities: libcrypto3\\@3.1.3-r0, libssl3\\@3.1.3-r0",
          "name": "Vulnerable dependency (CVE) in DockerFile base image",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_deployment_221",
            "name": "Vulnerable dependency (CVE) in DockerFile base image",
            "detailedDescription": "DockerFiles detail the blueprint for containers, specifying the base images used. By scanning DockerFiles directly for vulnerabilities in these base images, rather than just the resultant container image, organizations can identify and remediate security flaws at the foundational level. This approach allows for a more targeted and efficient response to vulnerabilities, potentially preventing unauthorized access, data breaches, and other security incidents before they occur."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc1764210a0f3c67f4c3",
          "issueId": "637651212-oxPolicy_securityScan_55-CKV_DOCKER_3-false",
          "mainTitle": "Dockerfile has only a root user",
          "secondTitle": "Containers should run as a non-root user. It is good practice to run the container as a non-root user, where possible",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "637651212",
            "name": "OX-Security-Demo/Lines-Credits",
            "businessPriority": 59.58571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1764210a0f3c67f4e1",
          "issueId": "637651212-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "637651212",
            "name": "OX-Security-Demo/Lines-Credits",
            "businessPriority": 59.58571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1764210a0f3c67f55b",
          "issueId": "637651212-oxPolicy_CICD_pin_action_commit_sha_1-docker/setup-qemu-action_Lines-Credits",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/setup-qemu-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/setup-qemu-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "637651212",
            "name": "OX-Security-Demo/Lines-Credits",
            "businessPriority": 59.58571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1764210a0f3c67f571",
          "issueId": "637651212-oxPolicy_CICD_pin_action_commit_sha_1-docker/setup-buildx-action_Lines-Credits",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/setup-buildx-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/setup-buildx-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "637651212",
            "name": "OX-Security-Demo/Lines-Credits",
            "businessPriority": 59.58571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1764210a0f3c67f587",
          "issueId": "637651212-oxPolicy_CICD_pin_action_commit_sha_1-docker/login-action_Lines-Credits",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/login-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/login-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "637651212",
            "name": "OX-Security-Demo/Lines-Credits",
            "businessPriority": 59.58571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67dd5b",
          "issueId": "586554191-oxPolicy_securityScan_55-CKV_DOCKER_3-false",
          "mainTitle": "Dockerfile has only a root user",
          "secondTitle": "Containers should run as a non-root user. It is good practice to run the container as a non-root user, where possible",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67dd79",
          "issueId": "586554191-oxPolicy_securityScan_55-CKV_DOCKER_6-false",
          "mainTitle": "Dockerfile has deprecated 'MAINTAINER' instruction",
          "secondTitle": "Docker images can contain metadata information in the form of key-value pairs using LABEL instructions. One such metadata is the maintainer, which provides information about the person who maintains the Docker image. The MAINTAINER instruction was used earlier to specify this information, but it is now deprecated.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67dd8e",
          "issueId": "586554191-oxPolicy_securityScan_secrets_history_1-97caa7397e5c2331b7585072b8d14d27",
          "mainTitle": "MySQL Database Password was found in the history of a public repository",
          "secondTitle": "MySQL Database Password was found in the history of a public repository.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67ddd4",
          "issueId": "586554191-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67de96",
          "issueId": "586554191-oxPolicy_securityScan_120-org.codehaus.jackson:jackson-mapper-asl_1.9.13",
          "mainTitle": "jackson-mapper-asl@1.9.13 is a Java direct dependency having 2 direct vulnerabilities and no indirect vulnerabilities. CVE-2019-10202 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "org.codehaus.jackson:jackson-mapper-asl\\@1.9.13 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 2 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 1 indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: org.codehaus.jackson:jackson-mapper-asl\\@1.9.13",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67df60",
          "issueId": "586554191-oxPolicy_securityScan_120-org.liquibase:liquibase-core_4.5.0",
          "mainTitle": "liquibase-core@4.5.0 is a Java direct dependency having 1 indirect vulnerability and no direct vulnerabilities. CVE-2022-0839 (CVSS:9.8, Information Exposure) is the most severe vulnerability.",
          "secondTitle": "org.liquibase:liquibase-core\\@4.5.0 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 2 indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br><br>\n          The following dependency has vulnerabilities: org.liquibase:liquibase-core\\@4.5.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67df7e",
          "issueId": "586554191-oxPolicy_securityScan_120-org.apache.commons:commons-text_1.9",
          "mainTitle": "commons-text@1.9 is a Java direct dependency having 1 indirect vulnerability and no direct vulnerabilities. CVE-2022-42889 (CVSS:9.8, Code Injection) is the most severe vulnerability.",
          "secondTitle": "org.apache.commons:commons-text\\@1.9 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; 1 indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br><br>\n          The following dependency has vulnerabilities: org.apache.commons:commons-text\\@1.9",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67e066",
          "issueId": "586554191-oxPolicy_securityScan_205-java.spring.security.unrestricted-request-mapping-false",
          "mainTitle": "Cross-Site Request Forgery (CSRF) vulnerability due to unrestricted Request Mapping",
          "secondTitle": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edb4064210a0f3c67500e",
          "issueId": "585531998-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "585531998",
            "name": "OX-Security-Demo/Insurance-Service",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67bc2f",
          "issueId": "593520605-oxPolicy_securityScan_55-CKV_DOCKER_3-false",
          "mainTitle": "Dockerfile has only a root user",
          "secondTitle": "Containers should run as a non-root user. It is good practice to run the container as a non-root user, where possible",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67bc4d",
          "issueId": "593520605-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67bd1b",
          "issueId": "593520605-oxPolicy_securityScan_120-io.springfox:springfox-swagger2_2.9.2",
          "mainTitle": "springfox-swagger2@2.9.2 is a Java direct dependency having 3 indirect vulnerabilities and no direct vulnerabilities. CVE-2023-2976 (CVSS:7.1, Improper Access Control) is the most severe vulnerability.",
          "secondTitle": "io.springfox:springfox-swagger2\\@2.9.2 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 3 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 14 indirect dependencies<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Medium : 2<br>&bull; Low : 1<br><br>\n          The following dependency has vulnerabilities: com.google.guava:guava\\@20.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67bd49",
          "issueId": "593520605-oxPolicy_securityScan_120-org.codehaus.jackson:jackson-mapper-asl_1.9.13",
          "mainTitle": "jackson-mapper-asl@1.9.13 is a Java direct dependency having 2 direct vulnerabilities and no indirect vulnerabilities. CVE-2019-10202 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "org.codehaus.jackson:jackson-mapper-asl\\@1.9.13 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 2 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 1 indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: org.codehaus.jackson:jackson-mapper-asl\\@1.9.13",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67bde4",
          "issueId": "593520605-oxPolicy_securityScan_120-org.postgresql:postgresql_42.2.0",
          "mainTitle": "postgresql@42.2.0 is a Java direct dependency having 6 direct vulnerabilities and no indirect vulnerabilities. CVE-2022-21724 (CVSS:9.8, Improper Initialization) is the most severe vulnerability.",
          "secondTitle": "org.postgresql:postgresql\\@42.2.0 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 6 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 3 vulnerabilities with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There are a total of 6 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 3<br>&bull; Medium : 2<br>&bull; Low : 1<br><br>\n          The following dependency has vulnerabilities: org.postgresql:postgresql\\@42.2.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67be51",
          "issueId": "593520605-oxPolicy_securityScan_120-org.apache.commons:commons-text_1.9",
          "mainTitle": "commons-text@1.9 is a Java direct dependency having 1 indirect vulnerability and no direct vulnerabilities. CVE-2022-42889 (CVSS:9.8, Code Injection) is the most severe vulnerability.",
          "secondTitle": "org.apache.commons:commons-text\\@1.9 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; 1 indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br><br>\n          The following dependency has vulnerabilities: org.apache.commons:commons-text\\@1.9",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67be9a",
          "issueId": "593520605-oxPolicy_CICD_pin_action_commit_sha_1-docker/setup-qemu-action_Currency-Credits",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/setup-qemu-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/setup-qemu-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67beb0",
          "issueId": "593520605-oxPolicy_CICD_pin_action_commit_sha_1-docker/setup-buildx-action_Currency-Credits",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/setup-buildx-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/setup-buildx-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67bec6",
          "issueId": "593520605-oxPolicy_CICD_pin_action_commit_sha_1-docker/login-action_Currency-Credits",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: docker/login-action",
          "secondTitle": "The workflow is using a third-party Actions 'docker/login-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Oxy"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf164210a0f3c67352b",
          "issueId": "708853940-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "NirHarhas"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "708853940",
            "name": "oxsecurity/ox-queries",
            "businessPriority": 20.785714285714285,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698129622295
        },
        {
          "id": "656edb8264210a0f3c6752c3",
          "issueId": "363001753-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>This workflow has permission to open Pull Requests. A compromised workflow will allow a malicious actor to bypass review requirements when pushing code. <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "363001753",
            "name": "michaelhorty/TMCLI",
            "businessPriority": 19.4,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edb8264210a0f3c6752d4",
          "issueId": "363001753-oxPolicy_CICD_pin_action_commit_sha_1-github/codeql-action_TMCLI",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: github/codeql-action",
          "secondTitle": "The workflow is using a third-party Actions 'github/codeql-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "mhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "363001753",
            "name": "michaelhorty/TMCLI",
            "businessPriority": 19.4,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690950622620
        },
        {
          "id": "656edaed64210a0f3c671b3e",
          "issueId": "708845747-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "708845747",
            "name": "oxsecurity/ox-cli",
            "businessPriority": 15.242857142857142,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698129622295
        },
        {
          "id": "656edb7f64210a0f3c6751d1",
          "issueId": "167596016-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>This workflow has permission to open Pull Requests. A compromised workflow will allow a malicious actor to bypass review requirements when pushing code. <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "167596016",
            "name": "michaelhorty/CxCLI",
            "businessPriority": 15.242857142857142,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edcc464210a0f3c6903fd",
          "issueId": "335646257-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>This workflow has permission to open Pull Requests. A compromised workflow will allow a malicious actor to bypass review requirements when pushing code. <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "335646257",
            "name": "michaelhorty/VCCLI",
            "businessPriority": 15.242857142857142,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcc464210a0f3c69040d",
          "issueId": "335646257-oxPolicy_securityScan_120-RestSharp_106.11.7",
          "mainTitle": "RestSharp@106.11.7 is a C# direct dependency having 1 direct vulnerability and no indirect vulnerabilities. CVE-2021-27293 (CVSS:7.5, Insufficient Comparison) is the most severe vulnerability.",
          "secondTitle": "RestSharp\\@106.11.7 is a C# package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: RestSharp\\@106.11.7",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "335646257",
            "name": "michaelhorty/VCCLI",
            "businessPriority": 15.242857142857142,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1687149008777
        },
        {
          "id": "656edcc464210a0f3c69042c",
          "issueId": "335646257-oxPolicy_securityScan_120-Newtonsoft.Json_12.0.3",
          "mainTitle": "Newtonsoft.Json@12.0.3 is a C# direct dependency having 1 direct vulnerability and no indirect vulnerabilities. Top risk: GHSA-5crp-9r3c-p9vr is the most severe vulnerability.",
          "secondTitle": "Newtonsoft.Json\\@12.0.3 is a C# package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: Newtonsoft.Json\\@12.0.3",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "335646257",
            "name": "michaelhorty/VCCLI",
            "businessPriority": 15.242857142857142,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1687149008777
        },
        {
          "id": "656edf1f64210a0f3c6a5394",
          "issueId": "167596016-oxPolicy_webhookConfiguration_1",
          "mainTitle": "Insecure webhook: no SSL",
          "secondTitle": "",
          "name": "Webhook without SSL/TLS",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_webhookConfiguration_1",
            "name": "Webhook without SSL/TLS",
            "detailedDescription": "If communication to your server is not happening via SSL, then your data may be intercepted. This means that your code may be visible to an attacker."
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "167596016",
            "name": "michaelhorty/CxCLI",
            "businessPriority": 15.242857142857142,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edf1f64210a0f3c6a53e0",
          "issueId": "335646257-oxPolicy_policyLicenseFile_1",
          "mainTitle": "License file missing from public repo",
          "secondTitle": "A license file is missing from the public repo VCCLI. License files allow external users to identify if the files in a repo can be re-used or edited. Without a license file present, repos are considered NOT to be open source. ",
          "name": "License file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policyLicenseFile_1",
            "name": "License file missing in repo",
            "detailedDescription": "If no License file is included as part of a repository, then it is assumed that the repository is not meant to be used or edited by anyone outside your organization. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "335646257",
            "name": "michaelhorty/VCCLI",
            "businessPriority": 15.242857142857142,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edf1f64210a0f3c6a53e7",
          "issueId": "335646257-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo VCCLI. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "335646257",
            "name": "michaelhorty/VCCLI",
            "businessPriority": 15.242857142857142,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edaef64210a0f3c672d52",
          "issueId": "715723869-oxPolicy_securityScan_55-CKV2_GHA_1-false",
          "mainTitle": "Github Actions job has top-level write-all permissions",
          "secondTitle": "Granting top-level write-all permissions in Github Actions can lead to unauthorized or accidental modifications to the repository, potentially introducing security vulnerabilities or causing significant damage. To prevent such incidents, it's important to grant only the necessary permissions for specific Github Actions jobs.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Nick Liffen"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672d96",
          "issueId": "715723869-oxPolicy_securityScan_55-CKV_DOCKER_7-false",
          "mainTitle": "Dockerfile has 'FROM' with the 'latest' version tag",
          "secondTitle": "The 'FROM' statement uses the ':latest' tag, which points to the latest version of an image. Relying on ':latest' can lead to uncontrolled behavior when the image is updated, potentially introducing changes or issues beyond your control.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Jannik Hollenbach"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672db0",
          "issueId": "715723869-oxPolicy_securityScan_secrets_history_1-generic-password-false-false",
          "mainTitle": "Generic Password was found in the history of a public repository",
          "secondTitle": "Generic Password was found in the history of a public repository.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "ShubhamPalriwala"
          ],
          "occurrences": 10,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672e0b",
          "issueId": "715723869-oxPolicy_securityScan_secrets_history_1-generic-secret-false-false",
          "mainTitle": "Generic Secret was found in the history of a public repository",
          "secondTitle": "Generic Secret was found in the history of a public repository.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "ShubhamPalriwala"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672e35",
          "issueId": "715723869-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672e44",
          "issueId": "715723869-oxPolicy_securityScan_secrets_1-generic-password-false-false",
          "mainTitle": "Generic Password was found in the code of a public repository",
          "secondTitle": "Generic Password was found in the code of a public repository.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 22,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672f41",
          "issueId": "715723869-oxPolicy_CICD_general_1-CKV2_GHA_1-false",
          "mainTitle": "Github Actions job has top-level write-all permissions",
          "secondTitle": "Granting top-level write-all permissions in Github Actions can lead to unauthorized or accidental modifications to the repository, potentially introducing security vulnerabilities or causing significant damage. To prevent such incidents, it's important to grant only the necessary permissions for specific Github Actions jobs.",
          "name": "CI/CD workflow security issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Nick Liffen"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_general_1",
            "name": "CI/CD workflow security issue",
            "detailedDescription": "Protecting workflow files from a security perspective involves practices such as implementing access controls, regularly reviewing and updating the files, scanning for vulnerabilities, and monitoring for unauthorized changes. By taking these steps, organizations can minimize the risk of security breaches, ensure the integrity of their systems, and maintain a secure development environment."
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672f6f",
          "issueId": "715723869-oxPolicy_CICD_pin_action_commit_sha_1-github/codeql-action_juiceshop_clone",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: github/codeql-action",
          "secondTitle": "The workflow is using a third-party Actions 'github/codeql-action' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672f86",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.sequelize.security.audit.sequelize-raw-query-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability due to usage of raw query",
          "secondTitle": "The use of the raw SQL query in a JavaScript application using the Sequelize library was detected. This is used to execute raw SQL statements, which can lead to a SQL injection, if the raw query is constructed with untrusted input without proper validation or escaping.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "ShubhamPalriwala"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672fea",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.browser.security.insecure-innerhtml-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in Element.innerHTML",
          "secondTitle": "Usage of the insecure innerHTML property in JavaScript code running in a web browser was detected. The innerHTML property allows a developer to set the HTML content of an element directly, making it vulnerable to Cross-Site Scripting (XSS) attacks, which can allow an attacker to execute malicious JavaScript code in the context of the affected website. This can result in sensitive data theft, unauthorized access to the user's session, or other malicious activities.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c673011",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal-false",
          "mainTitle": "Path Traversal vulnerability due to user controlled path variables",
          "secondTitle": "If an attacker able to modify path variable passed to functions, he would be able to access files on the system",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Soham Parate"
          ],
          "occurrences": 12,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c67303a",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.security.audit.vm-runincontext-context-injection-false",
          "mainTitle": "Make sure that unverified user data can not reach vm.runInContext.",
          "secondTitle": "Make sure that unverified user data can not reach vm.runInContext.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c67305f",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.express.security.audit.express-res-sendfile-false",
          "mainTitle": "Path Traversal vulnerability due to user input in res.sendFile",
          "secondTitle": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ziyang Li"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c673087",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.express.security.audit.unknown-value-in-redirect-false",
          "mainTitle": "It looks like 'toUrl' is read from user input and it is used to as a redirect. Ensure 'toUrl' is not externally controlled, otherwise this is an open redirect.",
          "secondTitle": "It looks like 'toUrl' is read from user input and it is used to as a redirect. Ensure 'toUrl' is not externally controlled, otherwise this is an open redirect.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c6730f0",
          "issueId": "715723869-oxPolicy_securityScan_205-contrib.nodejsscan.node_md5-false",
          "mainTitle": "Usage of Weak MD5 Hashing Algorithm",
          "secondTitle": "MD5 is known to be vulnerable to collision attacks and is generally considered cryptographically broken and unsuitable for further use. Relying on MD5 for sensitive operations can compromise data integrity and security.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Jannik Hollenbach"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c673110",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.security.audit.detect-non-literal-fs-filename-false",
          "mainTitle": "Path Traversal vulnerability in FS call argument",
          "secondTitle": "If an attacker able to modify variable passed to FS calls functions, he would be able to access any file on the system",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Soham Parate"
          ],
          "occurrences": 25,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c673164",
          "issueId": "715723869-oxPolicy_securityScan_205-contrib.nodejsscan.node_insecure_random_generator-false",
          "mainTitle": "Usage of Weak Random Number Generators",
          "secondTitle": "Relying on `crypto.pseudoRandomBytes()` or `Math.random()` can lead to predictable outcomes as they are not cryptographically secure random number generators. Predictable randomness can be exploited in various scenarios, like generating session tokens, password resets, or cryptographic operations.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 11,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c67318c",
          "issueId": "715723869-oxPolicy_securityScan_205-contrib.nodejsscan.node_username-false",
          "mainTitle": "A hardcoded username in plain text is identified. Store it properly in an environment variable.",
          "secondTitle": "A hardcoded username in plain text is identified. Store it properly in an environment variable.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c6731ad",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.sequelize.security.audit.express-sequelize-injection-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability due to user input in sequelize statement",
          "secondTitle": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "ShubhamPalriwala"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c67362c",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.security.html-in-template-string-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability due to interpolated variables",
          "secondTitle": "This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS).",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c673656",
          "issueId": "715723869-oxPolicy_securityScan_205-sast.javascript.nodejs.node_timing_attack_fix-false",
          "mainTitle": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/",
          "secondTitle": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c673677",
          "issueId": "715723869-oxPolicy_securityScan_205-DS148264-false",
          "mainTitle": "Usage of non-cryptographic random number generator",
          "secondTitle": "This detection only matters if the random number generator is being used in a security related function. If so, this means that an input to the function is unsafe and can be guessed.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c67369e",
          "issueId": "715723869-oxPolicy_securityScan_205-contrib.nodejsscan.node_password-false",
          "mainTitle": "A hardcoded password in plain text is identified. Store it properly in an environment variable.",
          "secondTitle": "A hardcoded password in plain text is identified. Store it properly in an environment variable.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c6736e0",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.security.audit.unsafe-dynamic-method-false",
          "mainTitle": "Command Injection vulnerability due to dynamic code execution",
          "secondTitle": "Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may lead to a command injection vulnerability.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "rishabhkeshan"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c67372b",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop-false",
          "mainTitle": "Prototype Pollution vulnerability",
          "secondTitle": "By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c673750",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.browser.security.insecure-document-method-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability via insecure document methods usage",
          "secondTitle": "A potentially insecure DOM (Document Object Model) manipulation method in JavaScript code that runs in a web browser was detected. Using insecure DOM manipulation methods can result in cross-site scripting (XSS) vulnerabilities, which can allow an attacker to execute malicious JavaScript code in the context of the affected website. This can result in sensitive data theft, unauthorized access to the user's session, or other malicious activities.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c673778",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.security.audit.detect-non-literal-regexp-false",
          "mainTitle": "Denial-of-Service (DoS) vulnerability due to regex input",
          "secondTitle": "RegExp() is called with a variable, and this might allow an attacker to utilize a Denial-of-Service attack on your application with a long-running regular expression.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Soham Parate"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c67379d",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.security.audit.hardcoded-hmac-key-false",
          "mainTitle": "HMAC key is hardcoded",
          "secondTitle": "A HMAC (Hash-based Message Authentication Code) key is a secret cryptographic key used to verify the integrity and authenticity of a message or data using a hash function. The use of a hardcoded HMAC key can lead to security vulnerabilities, as an attacker can obtain the key and use it to forge or tamper with messages.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Jannik Hollenbach"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c6737c3",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.express.security.audit.express-detect-notevil-usage-false",
          "mainTitle": "Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function.",
          "secondTitle": "Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c673823",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.express.security.audit.express-path-join-resolve-traversal-false",
          "mainTitle": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
          "secondTitle": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "shantanu69"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c673847",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.express.security.audit.express-libxml-vm-noent-false",
          "mainTitle": "Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it.",
          "secondTitle": "Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c673868",
          "issueId": "715723869-oxPolicy_securityScan_205-contrib.nodejsscan.node_ssrf-false",
          "mainTitle": "User controlled URL in http client libraries can result in Server Side Request Forgery (SSRF).",
          "secondTitle": "User controlled URL in http client libraries can result in Server Side Request Forgery (SSRF).",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c673888",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.express.security.audit.express-ssrf-false",
          "mainTitle": "The following request request.get() was found to be crafted from user-input `req` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. ",
          "secondTitle": "The following request request.get() was found to be crafted from user-input `req` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. ",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c6738be",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.express.security.audit.express-open-redirect-false",
          "mainTitle": "The application redirects to a URL specified by user-supplied input `query` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.",
          "secondTitle": "The application redirects to a URL specified by user-supplied input `query` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c6738de",
          "issueId": "715723869-oxPolicy_securityScan_205-contrib.nodejsscan.node_nosqli_js_injection-false",
          "mainTitle": "Untrusted user input in MongoDB $where operator can result in NoSQL JavaScript Injection.",
          "secondTitle": "Untrusted user input in MongoDB $where operator can result in NoSQL JavaScript Injection.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "ShubhamPalriwala"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c6738fb",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.express.security.express-insecure-template-usage-false",
          "mainTitle": "User data from `req` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.",
          "secondTitle": "User data from `req` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c67391c",
          "issueId": "715723869-oxPolicy_securityScan_205-contrib.nodejsscan.node_logic_bypass-false",
          "mainTitle": "Exposure Risk from User-Controlled Data Driving Business Logic",
          "secondTitle": "Leveraging user-controlled data directly for making critical business decisions in an application can lead to unauthorized access, data breaches, or undesired functionality. Attackers can manipulate such data to bypass restrictions, gain privileges, or trigger unintended actions, ultimately compromising the security and functionality of the application and potentially revealing sensitive information.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "ShubhamPalriwala"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c67393d",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.security.audit.unknown-value-with-script-tag-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability as a result of an unknown value being used in a script tag",
          "secondTitle": "An unknown value is concatenated with a <script> tag in JavaScript code. This is a common pattern that can lead to XSS vulnerabilities. Attackers can inject malicious code into the unknown value, which can then execute in the user's browser.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "ShubhamPalriwala"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c673966",
          "issueId": "715723869-oxPolicy_securityScan_205-sast.javascript.nodejs.yaml_deserialize_fix-false",
          "mainTitle": "User controlled data in 'yaml.load()' function can result in Remote Code Injection.",
          "secondTitle": "User controlled data in 'yaml.load()' function can result in Remote Code Injection.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c67398a",
          "issueId": "715723869-oxPolicy_securityScan_205-contrib.nodejsscan.generic_cors-false",
          "mainTitle": "CORS Policy Set to Allow All Origins",
          "secondTitle": "Setting the `Access-Control-Allow-Origin` response header to \"*\" effectively disables the CORS Same Origin Policy restrictions. This allows any website to make requests to your application, potentially leading to data leaks, security breaches, or unwanted third-party interactions.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c6739ae",
          "issueId": "715723869-oxPolicy_securityScan_205-contrib.nodejsscan.helmet_header_feature_policy-false",
          "mainTitle": "Feature-Policy header is present. More information: https://helmetjs.github.io/docs/feature-policy/",
          "secondTitle": "Feature-Policy header is present. More information: https://helmetjs.github.io/docs/feature-policy/",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c6739cb",
          "issueId": "715723869-oxPolicy_securityScan_205-contrib.nodejsscan.helmet_header_nosniff-false",
          "mainTitle": "Content-Type-Options header is present. More information: https://helmetjs.github.io/docs/dont-sniff-mimetype/",
          "secondTitle": "Content-Type-Options header is present. More information: https://helmetjs.github.io/docs/dont-sniff-mimetype/",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c673a0d",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.express.security.audit.express-check-directory-listing-false",
          "mainTitle": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
          "secondTitle": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c673a30",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.express.security.audit.xss.pug.template-explicit-unescape-false",
          "mainTitle": "XSS vulnerability due to explicit unescape in Pug template",
          "secondTitle": "Explicit unescape in Pug template can allow for untrusted input to execute as code leading to Cross-Site Scripting (XSS) attacks.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc3464210a0f3c680ba2",
          "issueId": "307444027-oxPolicy_codeSbomLicenses_1-pkg:maven/mysql/mysql-connector-java@5.1.48",
          "mainTitle": "Library with unapproved license directly referenced in code: mysql:mysql-connector-java@5.1.48 (GPL-3.0-or-later, The GNU General Public License, Version 2)",
          "secondTitle": "Your code contains direct reference to mysql:mysql-connector-java which has an unapproved license",
          "name": "Unapproved license used by direct dependency in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Chris Campbell"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_codeSbomLicenses_1",
            "name": "Unapproved license used by direct dependency in code",
            "detailedDescription": "Using unauthorized libraries based on their licenses may require your project to be open sourced or lead to copyright infringement. A U.S. Federal court has ruled that an open-source license is an enforceable contract."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680bb9",
          "issueId": "307444027-oxPolicy_securityScan_secrets_history_1-generic-password-false-false",
          "mainTitle": "Generic Password was found in the history of a public repository",
          "secondTitle": "Generic Password was found in the history of a public repository.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Boy Baukema"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680bea",
          "issueId": "307444027-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>This workflow has permission to open Pull Requests. A compromised workflow will allow a malicious actor to bypass review requirements when pushing code. <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680bfc",
          "issueId": "307444027-oxPolicy_securityScan_120-org.keycloak:keycloak-saml-core_1.8.1.Final",
          "mainTitle": "keycloak-saml-core@1.8.1.Final is a Java direct dependency having 1 direct and 5 indirect vulnerabilities. CVE-2021-40690 (CVSS:7.5, Information Exposure) is the most severe vulnerability.",
          "secondTitle": "org.keycloak:keycloak-saml-core\\@1.8.1.Final is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct and 5 indirect vulnerabilities<br>&bull; 1 indirect dependencies<br><br>There are a total of 6 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 2<br>&bull; Medium : 4<br><br>\n          The following 2 dependencies have vulnerabilities: org.apache.santuario:xmlsec\\@1.5.1, org.keycloak:keycloak-saml-core\\@1.8.1.Final",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Julian"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680c3f",
          "issueId": "307444027-oxPolicy_securityScan_120-org.apache.sling:maven-sling-plugin_2.0.4-incubator",
          "mainTitle": "maven-sling-plugin@2.0.4-incubator is a Java direct dependency having 9 indirect vulnerabilities and no direct vulnerabilities. CVE-2017-1000487 (CVSS:9.8, Code Injection) is the most severe vulnerability.",
          "secondTitle": "org.apache.sling:maven-sling-plugin\\@2.0.4-incubator is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 9 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 4 vulnerabilities with  publicly available exploits<br>&bull; 19 indirect dependencies<br><br>There are a total of 9 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 2<br>&bull; Medium : 6<br><br>\n          The following 4 dependencies have vulnerabilities: org.codehaus.plexus:plexus-utils\\@1.0.4, org.codehaus.plexus:plexus-archiver\\@1.0-alpha-3, org.apache.sling:org.apache.sling.commons.json\\@2.0.4-incubator, org.apache.sling:org.apache.sling.api\\@2.0.2-incubator",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Julian"
          ],
          "occurrences": 9,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc3464210a0f3c680c9c",
          "issueId": "307444027-oxPolicy_securityScan_120-org.mindrot:jbcrypt_0.3m",
          "mainTitle": "jbcrypt@0.3m is a Java direct dependency having 1 indirect vulnerability and no direct vulnerabilities. CVE-2015-0886 (CVSS:5, Incorrect Calculation) is the most severe vulnerability.",
          "secondTitle": "org.mindrot:jbcrypt\\@0.3m is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Medium : 1<br><br>\n          The following dependency has vulnerabilities: org.mindrot:jbcrypt\\@0.3m",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Julian"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680cca",
          "issueId": "307444027-oxPolicy_securityScan_120-org.apache.commons:commons-collections4_4.0",
          "mainTitle": "commons-collections4@4.0 is a Java direct dependency having 2 indirect vulnerabilities and no direct vulnerabilities. CVE-2015-7501 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "org.apache.commons:commons-collections4\\@4.0 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 2 indirect vulnerabilities and no direct vulnerabilities<br>&bull; No indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: org.apache.commons:commons-collections4\\@4.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Boy Baukema"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680d5a",
          "issueId": "307444027-oxPolicy_securityScan_120-commons-fileupload:commons-fileupload_1.3.2",
          "mainTitle": "commons-fileupload@1.3.2 is a Java direct dependency having 2 indirect vulnerabilities and no direct vulnerabilities. CVE-2016-1000031 (CVSS:9.8, Improper Access Control) is the most severe vulnerability.",
          "secondTitle": "commons-fileupload:commons-fileupload\\@1.3.2 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 2 indirect vulnerabilities and no direct vulnerabilities<br>&bull; No indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: commons-fileupload:commons-fileupload\\@1.3.2",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Chris Campbell"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680d92",
          "issueId": "307444027-oxPolicy_securityScan_120-org.springframework:spring-core_4.3.10.RELEASE",
          "mainTitle": "spring-core@4.3.10.RELEASE is a Java direct dependency having 13 indirect vulnerabilities and no direct vulnerabilities. CVE-2018-1270 (CVSS:9.8, Code Injection) is the most severe vulnerability.",
          "secondTitle": "org.springframework:spring-core\\@4.3.10.RELEASE is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 13 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 1 indirect dependencies<br><br>There are a total of 13 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 5<br>&bull; Medium : 6<br><br>\n          The following dependency has vulnerabilities: org.springframework:spring-core\\@4.3.10.RELEASE",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Boy Baukema"
          ],
          "occurrences": 13,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680e08",
          "issueId": "307444027-oxPolicy_securityScan_120-mysql:mysql-connector-java_5.1.48",
          "mainTitle": "mysql-connector-java@5.1.48 is a Java direct dependency having 3 direct vulnerabilities and no indirect vulnerabilities. CVE-2018-3258 (CVSS:8.8, Improper Privilege Management) is the most severe vulnerability.",
          "secondTitle": "mysql:mysql-connector-java\\@5.1.48 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 3 direct vulnerabilities and no indirect vulnerabilities<br>&bull; No indirect dependencies<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br>&bull; Medium : 2<br><br>\n          The following dependency has vulnerabilities: mysql:mysql-connector-java\\@5.1.48",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Chris Campbell"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680e40",
          "issueId": "307444027-oxPolicy_securityScan_120-org.slf4j:slf4j-log4j12_1.7.7",
          "mainTitle": "slf4j-log4j12@1.7.7 is a Java direct dependency having 5 indirect vulnerabilities and no direct vulnerabilities. CVE-2019-17571 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "org.slf4j:slf4j-log4j12\\@1.7.7 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 5 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 2 indirect dependencies<br><br>There are a total of 5 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 3<br>&bull; High : 2<br><br>\n          The following dependency has vulnerabilities: log4j:log4j\\@1.2.17",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Chris Campbell"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc3464210a0f3c680e8e",
          "issueId": "307444027-oxPolicy_securityScan_120-commons-io:commons-io_2.4",
          "mainTitle": "commons-io@2.4 is a Java direct dependency having 1 indirect vulnerability and no direct vulnerabilities. CVE-2021-29425 (CVSS:4.8, Path Traversal) is the most severe vulnerability.",
          "secondTitle": "commons-io:commons-io\\@2.4 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Medium : 1<br><br>\n          The following dependency has vulnerabilities: commons-io:commons-io\\@2.4",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Matt Runkle"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680f4a",
          "issueId": "307444027-oxPolicy_CICD_pin_action_commit_sha_1-papeloto/action-zip_VDemo_JAVA",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: papeloto/action-zip",
          "secondTitle": "The workflow is using a third-party Actions 'papeloto/action-zip' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680f62",
          "issueId": "307444027-oxPolicy_CICD_pin_action_commit_sha_1-wei/curl_VDemo_JAVA",
          "mainTitle": "Workflow uses third-party Actions that are not tied to a specific release: wei/curl",
          "secondTitle": "The workflow is using a third-party Actions 'wei/curl' that are not tied to a specific release. By not tying the workflow to a specific release, a compromise of the third-party Actions can lead to a compromise on your system. <br><br> <br> Note: Third Party Actions are external repos that are being used in your build system.",
          "name": "Unpinned (SHA) Third-Party Actions in GitHub",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_pin_action_commit_sha_1",
            "name": "Unpinned (SHA) Third-Party Actions in GitHub",
            "detailedDescription": "A compromise of a single action within a workflow can be very significant, as that compromised action would have access to all secrets configured on your repository and may be able to use the GITHUB_TOKEN to write to the repository. Consequently, there is a significant risk in sourcing actions from third-party repositories on GitHub. "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c680fa4",
          "issueId": "307444027-oxPolicy_securityScan_205-java.lang.security.audit.formatted-sql-string-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability in format string query",
          "secondTitle": "A SQL injection vulnerability in Java code was detected by checking for the use of string formatting when constructing SQL queries. User-supplied data may be used in formatted SQL strings. This data is not properly validated and sanitized before use. A successful SQL injection attack could allow an attacker to execute arbitrary SQL commands on the database, potentially compromising sensitive data such as passwords, financial information, and more.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Boy Baukema"
          ],
          "occurrences": 12,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c681003",
          "issueId": "307444027-oxPolicy_securityScan_205-java.lang.security.audit.unsafe-reflection-false",
          "mainTitle": "Unsafe Reflection due to user input in 'Class.forName'",
          "secondTitle": "Unsafe usage of Java's Reflection API in the 'java.lang.Class.forName' method, which can lead to security vulnerabilities was detected. The rule identifies the use of Reflection to access private fields or methods, bypassing the intended access controls. A successful attack exploiting this vulnerability could allow an attacker to access sensitive data or execute arbitrary code.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Boy Baukema"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c68102d",
          "issueId": "307444027-oxPolicy_securityScan_205-java.spring.security.injection.tainted-sql-string-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability due to manually-constructed SQL string",
          "secondTitle": "A successful SQL injection attack can result in unauthorized access to sensitive data, such as passwords, credit card details, or personal user information. Many high-profile data breaches in recent years have been the result of SQL injection attacks",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Matt Runkle"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c68105b",
          "issueId": "307444027-oxPolicy_securityScan_205-java.lang.security.audit.cookie-missing-httponly-false",
          "mainTitle": "Information Disclosure vulnerability as cookie can be read by client-side script",
          "secondTitle": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Matt Runkle"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c681088",
          "issueId": "307444027-oxPolicy_securityScan_205-java.lang.security.audit.cookie-missing-secure-flag-false",
          "mainTitle": "Cookie can be transmitted over an insecure channel",
          "secondTitle": "Missing 'Secure' flag usage in Java for cookies was detected. Cookies with the 'Secure' flag can only be transmitted over an encrypted connection, helping to prevent eavesdropping or tampering with the cookie's contents. If cookies are transmitted over an unencrypted connection, an attacker can potentially steal or modify their contents.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Matt Runkle"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c6810b5",
          "issueId": "307444027-oxPolicy_securityScan_205-java.lang.security.audit.crypto.use-of-md5-false",
          "mainTitle": "MD5 hash algorithm used is considered insecure",
          "secondTitle": "MD5 is not collision resistant and is therefore not suitable as a cryptographic signature.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Matt Runkle"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c6810e2",
          "issueId": "307444027-oxPolicy_securityScan_205-java.lang.security.audit.sqli.jdbc-sqli-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability due to formatted string in a SQL statement",
          "secondTitle": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Boy Baukema"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c681111",
          "issueId": "307444027-oxPolicy_securityScan_205-java.spring.security.injection.tainted-file-path-false",
          "mainTitle": "Path Traversal vulnerability due to user controlled path variables",
          "secondTitle": "If an attacker able to modify path variable passed to functions, he would be able to access files on the system",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Matt Runkle"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c68116a",
          "issueId": "307444027-oxPolicy_securityScan_205-java.lang.security.audit.object-deserialization-false",
          "mainTitle": "Insecure Deserialization of objects using ObjectInputStream",
          "secondTitle": "Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Matt Runkle"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c681197",
          "issueId": "307444027-oxPolicy_securityScan_205-java.lang.security.audit.xss.jsp.no-scriptlets-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability due to JSP Scriptlets usage",
          "secondTitle": "JSP scriptlet detected. Scriptlets may lead to Cross Site Scripting (XSS) vulnerability and are considered bad practice.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Boy Baukema"
          ],
          "occurrences": 68,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3564210a0f3c681240",
          "issueId": "307444027-oxPolicy_securityScan_205-java.lang.security.audit.xss.jsp.use-escapexml-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability due to unescaped output",
          "secondTitle": "Detected an Expression Language segment that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a Cross-Site Scripting vulnerability.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Chris Campbell"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3564210a0f3c68126d",
          "issueId": "307444027-oxPolicy_securityScan_205-java.lang.security.audit.xss.jsp.use-jstl-escaping-false",
          "mainTitle": "Detected an Expression Language segment in a tag that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a cross-site scripting vulnerability. Instead, use the 'out' tag from the JSTL taglib to escape this expression. See https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm for more information.",
          "secondTitle": "Detected an Expression Language segment in a tag that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a cross-site scripting vulnerability. Instead, use the 'out' tag from the JSTL taglib to escape this expression. See https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm for more information.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Chris Campbell"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3564210a0f3c6812c9",
          "issueId": "307444027-oxPolicy_securityScan_205-contrib.nodejsscan.node_insecure_random_generator-false",
          "mainTitle": "Usage of Weak Random Number Generators",
          "secondTitle": "Relying on `crypto.pseudoRandomBytes()` or `Math.random()` can lead to predictable outcomes as they are not cryptographically secure random number generators. Predictable randomness can be exploited in various scenarios, like generating session tokens, password resets, or cryptographic operations.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Chris Campbell"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc3564210a0f3c6812f5",
          "issueId": "307444027-oxPolicy_securityScan_205-javascript.jquery.security.audit.jquery-insecure-selector-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in JQuery selector",
          "secondTitle": "User controlled data in a '$(...)' is an anti-pattern that can lead to XSS vulnerabilities. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Chris Campbell"
          ],
          "occurrences": 29,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3564210a0f3c68133e",
          "issueId": "307444027-oxPolicy_securityScan_205-javascript.jquery.security.audit.prohibit-jquery-html-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in JQuery .html() function",
          "secondTitle": "JQuery's '.html()' is susceptible to Cross Site Scripting (XSS) attacks. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Chris Campbell"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3564210a0f3c68136b",
          "issueId": "307444027-oxPolicy_securityScan_205-javascript.lang.security.audit.unsafe-dynamic-method-false",
          "mainTitle": "Command Injection vulnerability due to dynamic code execution",
          "secondTitle": "Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may lead to a command injection vulnerability.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Chris Campbell"
          ],
          "occurrences": 13,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edf1f64210a0f3c6a53d5",
          "issueId": "307444027-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo VDemo_JAVA. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698217241590
        },
        {
          "id": "656edaf164210a0f3c673ac9",
          "issueId": "704226371-oxPolicy_securityScan_205-B301-false",
          "mainTitle": "Insecure Serialization due to Pickle usage",
          "secondTitle": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "704226371",
            "name": "michaelhorty/OX-API-Client",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1697176812236
        },
        {
          "id": "656edaf264210a0f3c673e07",
          "issueId": "222751603-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>This workflow has permission to open Pull Requests. A compromised workflow will allow a malicious actor to bypass review requirements when pushing code. <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "222751603",
            "name": "michaelhorty/AQL2XLS_WinApp",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edaf264210a0f3c673e17",
          "issueId": "222751603-oxPolicy_securityScan_120-RestSharp_106.6.10",
          "mainTitle": "RestSharp@106.6.10 is a C# direct dependency having 1 direct vulnerability and no indirect vulnerabilities. CVE-2021-27293 (CVSS:7.5, Insufficient Comparison) is the most severe vulnerability.",
          "secondTitle": "RestSharp\\@106.6.10 is a XML package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: RestSharp\\@106.6.10",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "222751603",
            "name": "michaelhorty/AQL2XLS_WinApp",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edaf264210a0f3c673e36",
          "issueId": "222751603-oxPolicy_securityScan_120-Newtonsoft.Json_12.0.3",
          "mainTitle": "Newtonsoft.Json@12.0.3 is a C# direct dependency having 1 direct vulnerability and no indirect vulnerabilities. Top risk: GHSA-5crp-9r3c-p9vr is the most severe vulnerability.",
          "secondTitle": "Newtonsoft.Json\\@12.0.3 is a XML package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: Newtonsoft.Json\\@12.0.3",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "222751603",
            "name": "michaelhorty/AQL2XLS_WinApp",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edaf364210a0f3c674aac",
          "issueId": "688093659-oxPolicy_securityScan_205-java.spring.security.audit.spring-csrf-disabled-false",
          "mainTitle": "CSRF protection is disabled for this configuration. This is a security risk.",
          "secondTitle": "CSRF protection is disabled for this configuration. This is a security risk.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "688093659",
            "name": "MH-New-Organization/MH_NO_WEBG",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edaf364210a0f3c674ac9",
          "issueId": "688093659-oxPolicy_securityScan_205-java.spring.security.unrestricted-request-mapping-false",
          "mainTitle": "Cross-Site Request Forgery (CSRF) vulnerability due to unrestricted Request Mapping",
          "secondTitle": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 9,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "688093659",
            "name": "MH-New-Organization/MH_NO_WEBG",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edaf364210a0f3c674bdc",
          "issueId": "708855481-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "708855481",
            "name": "oxsecurity/ox-api-client",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698129622295
        },
        {
          "id": "656edaf364210a0f3c674beb",
          "issueId": "708855481-oxPolicy_securityScan_205-B301-false",
          "mainTitle": "Insecure Serialization due to Pickle usage",
          "secondTitle": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "708855481",
            "name": "oxsecurity/ox-api-client",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698129622295
        },
        {
          "id": "656edcbd64210a0f3c690297",
          "issueId": "373373380-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>This workflow has permission to open Pull Requests. A compromised workflow will allow a malicious actor to bypass review requirements when pushing code. <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "373373380",
            "name": "michaelhorty/TMGUI",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edcbd64210a0f3c6902a7",
          "issueId": "373373380-oxPolicy_securityScan_120-RestSharp_106.11.7",
          "mainTitle": "RestSharp@106.11.7 is a C# direct dependency having 1 direct vulnerability and no indirect vulnerabilities. CVE-2021-27293 (CVSS:7.5, Insufficient Comparison) is the most severe vulnerability.",
          "secondTitle": "RestSharp\\@106.11.7 is a C# package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: RestSharp\\@106.11.7",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "373373380",
            "name": "michaelhorty/TMGUI",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edcc864210a0f3c693235",
          "issueId": "179169985-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>This workflow has permission to open Pull Requests. A compromised workflow will allow a malicious actor to bypass review requirements when pushing code. <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "179169985",
            "name": "michaelhorty/CxMOreporting",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edcc864210a0f3c693245",
          "issueId": "179169985-oxPolicy_securityScan_120-RestSharp_106.6.9",
          "mainTitle": "RestSharp@106.6.9 is a C# direct dependency having 1 direct vulnerability and no indirect vulnerabilities. CVE-2021-27293 (CVSS:7.5, Insufficient Comparison) is the most severe vulnerability.",
          "secondTitle": "RestSharp\\@106.6.9 is a C# package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: RestSharp\\@106.6.9",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "179169985",
            "name": "michaelhorty/CxMOreporting",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edcc864210a0f3c693263",
          "issueId": "179169985-oxPolicy_securityScan_120-Newtonsoft.Json_12.0.1",
          "mainTitle": "Newtonsoft.Json@12.0.1 is a C# direct dependency having 1 direct vulnerability and no indirect vulnerabilities. Top risk: GHSA-5crp-9r3c-p9vr is the most severe vulnerability.",
          "secondTitle": "Newtonsoft.Json\\@12.0.1 is a C# package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: Newtonsoft.Json\\@12.0.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "179169985",
            "name": "michaelhorty/CxMOreporting",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edf1f64210a0f3c6a52f8",
          "issueId": "222751603-oxPolicy_policyLicenseFile_1",
          "mainTitle": "License file missing from public repo",
          "secondTitle": "A license file is missing from the public repo AQL2XLS_WinApp. License files allow external users to identify if the files in a repo can be re-used or edited. Without a license file present, repos are considered NOT to be open source. ",
          "name": "License file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policyLicenseFile_1",
            "name": "License file missing in repo",
            "detailedDescription": "If no License file is included as part of a repository, then it is assumed that the repository is not meant to be used or edited by anyone outside your organization. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "222751603",
            "name": "michaelhorty/AQL2XLS_WinApp",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edf1f64210a0f3c6a52ff",
          "issueId": "222751603-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo AQL2XLS_WinApp. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "222751603",
            "name": "michaelhorty/AQL2XLS_WinApp",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edf1f64210a0f3c6a532f",
          "issueId": "688093659-oxPolicy_dspm_RequireSignedCommits",
          "mainTitle": "Signed commits are not being enforced",
          "secondTitle": "Signing commits improves security by verifying the identity of the author of the commit.  Currently, the protected branch of this repo does not enforce signed commits. ",
          "name": "Branch Protection allows unsigned commits",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_dspm_RequireSignedCommits",
            "name": "Branch Protection allows unsigned commits",
            "detailedDescription": "Signing commits is needed because it is pretty easy to add anyone as the author of a commit. Git allows a committer to change the author of a commit easily. In the case of a signed commit, any change to the author will make the commit appear unsigned."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "688093659",
            "name": "MH-New-Organization/MH_NO_WEBG",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698474625568
        },
        {
          "id": "656edf1f64210a0f3c6a533c",
          "issueId": "688093659-oxPolicy_policyLicenseFile_1",
          "mainTitle": "License file missing from public repo",
          "secondTitle": "A license file is missing from the public repo MH_NO_WEBG. License files allow external users to identify if the files in a repo can be re-used or edited. Without a license file present, repos are considered NOT to be open source. ",
          "name": "License file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policyLicenseFile_1",
            "name": "License file missing in repo",
            "detailedDescription": "If no License file is included as part of a repository, then it is assumed that the repository is not meant to be used or edited by anyone outside your organization. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "688093659",
            "name": "MH-New-Organization/MH_NO_WEBG",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edf1f64210a0f3c6a5342",
          "issueId": "688093659-oxPolicy_policyCodeownersFile_1",
          "mainTitle": "CODEOWNERS file missing from public repo with branch protection",
          "secondTitle": "A CODEOWNERS file is missing from the public repo MH_NO_WEBG with branch protection turned on. Defining a CODEOWNERS file allows you to specify the users who would be automatically assigned to review code in the repo. ",
          "name": "CODEOWNERS file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policyCodeownersFile_1",
            "name": "CODEOWNERS file missing in repo",
            "detailedDescription": "Using a CODEOWNERS file allows you to enumerate the default reviewers for the repo. The granularity of reviews can be set at the file level as well. This ensures that your reviewers approve changes to code that they are experts of. This is especially useful if you are utilizing branch protection."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "688093659",
            "name": "MH-New-Organization/MH_NO_WEBG",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698474625568
        },
        {
          "id": "656edf1f64210a0f3c6a5349",
          "issueId": "688093659-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo MH_NO_WEBG. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "688093659",
            "name": "MH-New-Organization/MH_NO_WEBG",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edaf164210a0f3c6738ae",
          "issueId": "629437774-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "629437774",
            "name": "OX-Security-Demo/Bank-Backup-Operator",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc5264210a0f3c68edd4",
          "issueId": "191856056-oxPolicy_codeSbomLicenses_1-pkg:maven/hsqldb/hsqldb@1.8.0.7",
          "mainTitle": "Library with unapproved license directly referenced in code: hsqldb:hsqldb@1.8.0.7 (HSQLDB License)",
          "secondTitle": "Your code contains direct reference to hsqldb:hsqldb which has an unapproved license",
          "name": "Unapproved license used by direct dependency in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_codeSbomLicenses_1",
            "name": "Unapproved license used by direct dependency in code",
            "detailedDescription": "Using unauthorized libraries based on their licenses may require your project to be open sourced or lead to copyright infringement. A U.S. Federal court has ruled that an open-source license is an enforceable contract."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68edec",
          "issueId": "191856056-oxPolicy_codeSbomLicenses_1-pkg:maven/net.sourceforge.jtds/jtds@1.2.2",
          "mainTitle": "Library with unapproved license directly referenced in code: net.sourceforge.jtds:jtds@1.2.2 (LGPL-3.0-or-later, LGPL)",
          "secondTitle": "Your code contains direct reference to net.sourceforge.jtds:jtds which has an unapproved license",
          "name": "Unapproved license used by direct dependency in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_codeSbomLicenses_1",
            "name": "Unapproved license used by direct dependency in code",
            "detailedDescription": "Using unauthorized libraries based on their licenses may require your project to be open sourced or lead to copyright infringement. A U.S. Federal court has ruled that an open-source license is an enforceable contract."
          },
          "category": {
            "name": "SBOM",
            "categoryId": 7
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68ee04",
          "issueId": "191856056-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>This workflow has permission to open Pull Requests. A compromised workflow will allow a malicious actor to bypass review requirements when pushing code. <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68ee17",
          "issueId": "191856056-oxPolicy_securityScan_120-axis:axis_1.2",
          "mainTitle": "axis@1.2 is a Java direct dependency having 2 indirect vulnerabilities and no direct vulnerabilities. CVE-2018-8032 (CVSS:6.1, Cross-site scripting) is the most severe vulnerability.",
          "secondTitle": "axis:axis\\@1.2 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 2 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Medium : 2<br><br>\n          The following dependency has vulnerabilities: axis:axis\\@1.2",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68ef43",
          "issueId": "191856056-oxPolicy_securityScan_120-org.springframework.security:spring-security-core_3.2.4.RELEASE",
          "mainTitle": "spring-security-core@3.2.4.RELEASE is a Java direct dependency having 7 direct vulnerabilities and no indirect vulnerabilities. CVE-2014-3527 (CVSS:9.8, Improper Authentication) is the most severe vulnerability.",
          "secondTitle": "org.springframework.security:spring-security-core\\@3.2.4.RELEASE is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 7 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 2 indirect dependencies<br><br>There are a total of 7 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 2<br>&bull; High : 3<br>&bull; Medium : 2<br><br>\n          The following dependency has vulnerabilities: org.springframework.security:spring-security-core\\@3.2.4.RELEASE",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 7,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f01f",
          "issueId": "191856056-oxPolicy_securityScan_120-commons-collections:commons-collections_3.1",
          "mainTitle": "commons-collections@3.1 is a Java direct dependency having 2 indirect vulnerabilities and no direct vulnerabilities. CVE-2015-7501 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "commons-collections:commons-collections\\@3.1 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 2 indirect vulnerabilities and no direct vulnerabilities<br>&bull; No indirect dependencies<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: commons-collections:commons-collections\\@3.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f15e",
          "issueId": "191856056-oxPolicy_securityScan_120-commons-digester:commons-digester_1.4.1",
          "mainTitle": "commons-digester@1.4.1 is a Java direct dependency having 1 indirect vulnerability and no direct vulnerabilities. CVE-2019-10086 (CVSS:7.3, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "commons-digester:commons-digester\\@1.4.1 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; 1 indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: commons-beanutils:commons-beanutils\\@1.6",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc5264210a0f3c68f1a9",
          "issueId": "191856056-oxPolicy_securityScan_120-log4j:log4j_1.2.17",
          "mainTitle": "log4j@1.2.17 is a Java direct dependency having 5 direct vulnerabilities and no indirect vulnerabilities. CVE-2019-17571 (CVSS:9.8, Deserialization of Untrusted Data) is the most severe vulnerability.",
          "secondTitle": "log4j:log4j\\@1.2.17 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 5 direct vulnerabilities and no indirect vulnerabilities<br>&bull; No indirect dependencies<br><br>There are a total of 5 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 3<br>&bull; High : 2<br><br>\n          The following dependency has vulnerabilities: log4j:log4j\\@1.2.17",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f1f2",
          "issueId": "191856056-oxPolicy_securityScan_120-junit:junit_4.8.1",
          "mainTitle": "junit@4.8.1 is a Java direct dependency having 1 direct vulnerability and no indirect vulnerabilities. CVE-2020-15250 (CVSS:5.5, Improper Access Control) is the most severe vulnerability.",
          "secondTitle": "junit:junit\\@4.8.1 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Medium : 1<br><br>\n          The following dependency has vulnerabilities: junit:junit\\@4.8.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f227",
          "issueId": "191856056-oxPolicy_securityScan_120-org.springframework.security:spring-security-web_3.2.4.RELEASE",
          "mainTitle": "spring-security-web@3.2.4.RELEASE is a Java direct dependency having 1 direct vulnerability and no indirect vulnerabilities. CVE-2021-22112 (CVSS:8.8, Improper Privilege Management) is the most severe vulnerability.",
          "secondTitle": "org.springframework.security:spring-security-web\\@3.2.4.RELEASE is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: org.springframework.security:spring-security-web\\@3.2.4.RELEASE",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f266",
          "issueId": "191856056-oxPolicy_securityScan_120-commons-io:commons-io_1.3.2",
          "mainTitle": "commons-io@1.3.2 is a Java direct dependency having 1 direct vulnerability and no indirect vulnerabilities. CVE-2021-29425 (CVSS:4.8, Path Traversal) is the most severe vulnerability.",
          "secondTitle": "commons-io:commons-io\\@1.3.2 is a Java package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; No indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Medium : 1<br><br>\n          The following dependency has vulnerabilities: commons-io:commons-io\\@1.3.2",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656edc5264210a0f3c68f395",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.jquery.security.audit.jquery-insecure-selector-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in JQuery selector",
          "secondTitle": "User controlled data in a '$(...)' is an anti-pattern that can lead to XSS vulnerabilities. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 28,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f3e6",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.lang.security.audit.unsafe-dynamic-method-false",
          "mainTitle": "Command Injection vulnerability due to dynamic code execution",
          "secondTitle": "Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may lead to a command injection vulnerability.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 38,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f442",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.jquery.security.audit.prohibit-jquery-html-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in JQuery .html() function",
          "secondTitle": "JQuery's '.html()' is susceptible to Cross Site Scripting (XSS) attacks. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 12,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f504",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.browser.security.insecure-document-method-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability via insecure document methods usage",
          "secondTitle": "A potentially insecure DOM (Document Object Model) manipulation method in JavaScript code that runs in a web browser was detected. Using insecure DOM manipulation methods can result in cross-site scripting (XSS) vulnerabilities, which can allow an attacker to execute malicious JavaScript code in the context of the affected website. This can result in sensitive data theft, unauthorized access to the user's session, or other malicious activities.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 29,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f556",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.browser.security.insecure-innerhtml-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in Element.innerHTML",
          "secondTitle": "Usage of the insecure innerHTML property in JavaScript code running in a web browser was detected. The innerHTML property allows a developer to set the HTML content of an element directly, making it vulnerable to Cross-Site Scripting (XSS) attacks, which can allow an attacker to execute malicious JavaScript code in the context of the affected website. This can result in sensitive data theft, unauthorized access to the user's session, or other malicious activities.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 29,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f5a8",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.lang.security.audit.detect-non-literal-regexp-false",
          "mainTitle": "Denial-of-Service (DoS) vulnerability due to regex input",
          "secondTitle": "RegExp() is called with a variable, and this might allow an attacker to utilize a Denial-of-Service attack on your application with a long-running regular expression.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 93,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f638",
          "issueId": "191856056-oxPolicy_securityScan_205-contrib.owasp.java.ssrf.owasp.java.ssrf.java.net.url-false",
          "mainTitle": "Potential SSRF via URL Input",
          "secondTitle": "Server Side Request Forgery (SSRF) allows an attacker to make requests on behalf of your server. This can expose internal services, leak sensitive data, or even lead to remote code execution if internal services have known vulnerabilities.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc5264210a0f3c68f6a1",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.security.audit.formatted-sql-string-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability in format string query",
          "secondTitle": "A SQL injection vulnerability in Java code was detected by checking for the use of string formatting when constructing SQL queries. User-supplied data may be used in formatted SQL strings. This data is not properly validated and sanitized before use. A successful SQL injection attack could allow an attacker to execute arbitrary SQL commands on the database, potentially compromising sensitive data such as passwords, financial information, and more.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 8,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f6de",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.security.audit.sqli.jdbc-sqli-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability due to formatted string in a SQL statement",
          "secondTitle": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 41,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f73c",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.security.audit.unsafe-reflection-false",
          "mainTitle": "Unsafe Reflection due to user input in 'Class.forName'",
          "secondTitle": "Unsafe usage of Java's Reflection API in the 'java.lang.Class.forName' method, which can lead to security vulnerabilities was detected. The rule identifies the use of Reflection to access private fields or methods, bypassing the intended access controls. A successful attack exploiting this vulnerability could allow an attacker to access sensitive data or execute arbitrary code.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f7df",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.security.audit.cookie-missing-httponly-false",
          "mainTitle": "Information Disclosure vulnerability as cookie can be read by client-side script",
          "secondTitle": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f819",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.security.audit.cookie-missing-secure-flag-false",
          "mainTitle": "Cookie can be transmitted over an insecure channel",
          "secondTitle": "Missing 'Secure' flag usage in Java for cookies was detected. Cookies with the 'Secure' flag can only be transmitted over an encrypted connection, helping to prevent eavesdropping or tampering with the cookie's contents. If cookies are transmitted over an unencrypted connection, an attacker can potentially steal or modify their contents.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f853",
          "issueId": "191856056-oxPolicy_securityScan_205-java.servlets.security.cookie-issecure-false-false",
          "mainTitle": "Cookie can be transmitted over an insecure channel",
          "secondTitle": "A Java Servlets application has 'isSecure' flag set to false for cookies. Cookies with the 'isSecure' flag set to false may not be transmitted over an encrypted connection. If cookies are transmitted over an unencrypted connection, an attacker can potentially steal or modify their contents.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f88d",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.security.audit.cbc-padding-oracle-false",
          "mainTitle": "Insecure cipher mode (CBC with PKCS5Padding) is vulnerable to padding oracle attacks",
          "secondTitle": "CBC cipher mode without an integrity check, can lead to padding oracle attacks. A padding oracle attack allows an attacker to decrypt the contents of an encrypted message by sending modified ciphertexts to the receiver and analyzing the errors that occur.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f8c5",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.security.audit.crypto.des-is-deprecated-false",
          "mainTitle": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.",
          "secondTitle": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f8fc",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.security.audit.crypto.use-of-md5-false",
          "mainTitle": "MD5 hash algorithm used is considered insecure",
          "secondTitle": "MD5 is not collision resistant and is therefore not suitable as a cryptographic signature.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f933",
          "issueId": "191856056-oxPolicy_securityScan_205-DS148264-false",
          "mainTitle": "Usage of non-cryptographic random number generator",
          "secondTitle": "This detection only matters if the random number generator is being used in a security related function. If so, this means that an input to the function is unsafe and can be guessed.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc5264210a0f3c68f96c",
          "issueId": "191856056-oxPolicy_securityScan_205-contrib.owasp.java.xxe.owasp.java.xxe.org.xml.sax.XMLReader-false",
          "mainTitle": "XMLReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing",
          "secondTitle": "XMLReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc5264210a0f3c68f9d4",
          "issueId": "191856056-oxPolicy_securityScan_205-java.spring.security.unrestricted-request-mapping-false",
          "mainTitle": "Cross-Site Request Forgery (CSRF) vulnerability due to unrestricted Request Mapping",
          "secondTitle": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 14,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68fa17",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.security.audit.crypto.unencrypted-socket-false",
          "mainTitle": "Data Leakage vulnerability due to unencrypted Socket",
          "secondTitle": "A potential use of unencrypted network communications was detected in Java. Specifically, unencrypted sockets (using java.net.Socket), which could allow an attacker to easily intercept and read the sensitive data transmitted over the socket.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68fa4e",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.security.audit.xss.jsp.use-escapexml-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability due to unescaped output",
          "secondTitle": "Detected an Expression Language segment that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a Cross-Site Scripting vulnerability.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 33,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68faa4",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.security.audit.xss.jsp.use-jstl-escaping-false",
          "mainTitle": "Detected an Expression Language segment in a tag that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a cross-site scripting vulnerability. Instead, use the 'out' tag from the JSTL taglib to escape this expression. See https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm for more information.",
          "secondTitle": "Detected an Expression Language segment in a tag that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a cross-site scripting vulnerability. Instead, use the 'out' tag from the JSTL taglib to escape this expression. See https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm for more information.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 27,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68faf3",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.security.audit.xss.jsp.no-scriptlets-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability due to JSP Scriptlets usage",
          "secondTitle": "JSP scriptlet detected. Scriptlets may lead to Cross Site Scripting (XSS) vulnerability and are considered bad practice.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 609,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5364210a0f3c68fd89",
          "issueId": "191856056-oxPolicy_securityScan_205-DS224000-false",
          "mainTitle": "T-SQL stored procedure used can provide access to system resources",
          "secondTitle": "The content flagged is a potentially dangerous T-SQL command that can allow access to system resources, generate web pages and send emails.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc5364210a0f3c68fe78",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.lang.security.audit.prototype-pollution.prototype-pollution-assignment-false",
          "mainTitle": "Prototype Pollution vulnerability due to detected assignment to prototype object",
          "secondTitle": "By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5364210a0f3c68ff41",
          "issueId": "191856056-oxPolicy_securityScan_205-DS197836-false",
          "mainTitle": "Taking a hash of a time value is suspicious, as there is insufficient entropy to protect against brute-force attacks.",
          "secondTitle": "Do not take the hash of low-entropy content.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc5364210a0f3c68ff7a",
          "issueId": "191856056-oxPolicy_securityScan_205-DS101155-false",
          "mainTitle": "Always use a valid certificate, even during testing.",
          "secondTitle": "Disabled certificate validation",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc5364210a0f3c68ffb0",
          "issueId": "191856056-oxPolicy_securityScan_205-DS106863-false",
          "mainTitle": "Use AES instead.",
          "secondTitle": "Do not use the DES symmetric block cipher.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc5364210a0f3c68ffe5",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.lang.security.audit.detect-non-literal-require-false",
          "mainTitle": "Code Injection vulnerability due to non-literal package import",
          "secondTitle": "Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load and run arbitrary code, or access arbitrary files.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5364210a0f3c690037",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.browser.security.eval-detected-false",
          "mainTitle": "Command Injection vulnerability due to dynamic code execution",
          "secondTitle": "User controlled data in eval() or similar functions may result in Code Injection",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 8,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5364210a0f3c690074",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.jquery.security.audit.jquery-insecure-method-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in JQuery method",
          "secondTitle": "User controlled data in a jQuery's '.$METHOD(...)' is an anti-pattern that can lead to XSS vulnerabilities. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 8,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edf1f64210a0f3c6a5311",
          "issueId": "629437774-oxPolicy_policyLicenseFile_1",
          "mainTitle": "License file missing from public repo",
          "secondTitle": "A license file is missing from the public repo Bank-Backup-Operator. License files allow external users to identify if the files in a repo can be re-used or edited. Without a license file present, repos are considered NOT to be open source. ",
          "name": "License file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policyLicenseFile_1",
            "name": "License file missing in repo",
            "detailedDescription": "If no License file is included as part of a repository, then it is assumed that the repository is not meant to be used or edited by anyone outside your organization. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "629437774",
            "name": "OX-Security-Demo/Bank-Backup-Operator",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1f64210a0f3c6a5316",
          "issueId": "629437774-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo Bank-Backup-Operator. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "629437774",
            "name": "OX-Security-Demo/Bank-Backup-Operator",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf364210a0f3c674d37",
          "issueId": "672064956-oxPolicy_securityScan_205-python.lang.security.audit.dangerous-subprocess-use-tainted-env-args-false",
          "mainTitle": "Command Injection vulnerability due to dangerous subprocess usage with tainted env argument",
          "secondTitle": "Detected subprocess function with argument tainted by environment variable. If this data can be controlled by a malicious actor, it may be an instance of command injection.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674d5a",
          "issueId": "672064956-oxPolicy_securityScan_205-python.sqlalchemy.security.sqlalchemy-execute-raw-query-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability in format string query",
          "secondTitle": "A successful SQL injection attack can result in unauthorized access to sensitive data, such as passwords, credit card details, or personal user information. Many high-profile data breaches in recent years have been the result of SQL injection attacks",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674d85",
          "issueId": "672064956-oxPolicy_securityScan_205-B201-false",
          "mainTitle": "Arbitary Code Execution (ACE) vulnerability in Flask",
          "secondTitle": "Running Flask applications in debug mode includes a feature that allows arbitrary code execution. Documentation for Flask strongly suggests that debug mode should never be enabled on production systems.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674dae",
          "issueId": "672064956-oxPolicy_securityScan_205-python.flask.security.audit.debug-enabled-false",
          "mainTitle": "Data leakage vulnerability in Flask debug mode",
          "secondTitle": "Flask's debug mode provides developers with convenient debugging features such as displaying stack traces in the browser. However, it can also expose sensitive information to attackers and should not be enabled in production environments.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674df0",
          "issueId": "672064956-oxPolicy_securityScan_205-B113-false",
          "mainTitle": "request_without_timeout",
          "secondTitle": "Requests call without timeout",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674e14",
          "issueId": "672064956-oxPolicy_securityScan_205-B108-false",
          "mainTitle": "Insecure temporary file vulnerability due to creation method",
          "secondTitle": "There are many different methods to create temporary files. However, not all of these methods are unsafe and should not be used.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 22,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674e83",
          "issueId": "672064956-oxPolicy_securityScan_205-B608-false",
          "mainTitle": "SQL Injection (SQLI) vulnerability in format string query",
          "secondTitle": "A successful SQL injection attack can result in unauthorized access to sensitive data, such as passwords, credit card details, or personal user information. Many high-profile data breaches in recent years have been the result of SQL injection attacks",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674ec9",
          "issueId": "672064956-oxPolicy_securityScan_205-python.flask.security.xss.audit.template-unescaped-with-safe-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability due to explicitly disabled autoescaping in 'safe' filter",
          "secondTitle": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment which may lead to XSS injection.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674f0f",
          "issueId": "672064956-oxPolicy_securityScan_205-python.cryptography.security.crypto-mode-without-authentication-false",
          "mainTitle": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ",
          "secondTitle": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699687834876
        },
        {
          "id": "656edb4264210a0f3c6750c5",
          "issueId": "354893981-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>This workflow has permission to open Pull Requests. A compromised workflow will allow a malicious actor to bypass review requirements when pushing code. <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "354893981",
            "name": "michaelhorty/TMDB_Explore",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edb4264210a0f3c6750d6",
          "issueId": "354893252-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>This workflow has permission to open Pull Requests. A compromised workflow will allow a malicious actor to bypass review requirements when pushing code. <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "354893252",
            "name": "michaelhorty/TMDBexplore",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edf1f64210a0f3c6a5354",
          "issueId": "672064956-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo vulpy. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf264210a0f3c673c6b",
          "issueId": "329712156-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>This workflow has permission to open Pull Requests. A compromised workflow will allow a malicious actor to bypass review requirements when pushing code. <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "329712156",
            "name": "michaelhorty/VeracodeAzureYMLSamples",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edaf264210a0f3c673c7d",
          "issueId": "688095954-oxPolicy_securityScan_205-java.spring.security.audit.spring-csrf-disabled-false",
          "mainTitle": "CSRF protection is disabled for this configuration. This is a security risk.",
          "secondTitle": "CSRF protection is disabled for this configuration. This is a security risk.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "688095954",
            "name": "michaelhorty/TEST_REPO",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edaf264210a0f3c673cb4",
          "issueId": "688095954-oxPolicy_securityScan_205-java.spring.security.unrestricted-request-mapping-false",
          "mainTitle": "Cross-Site Request Forgery (CSRF) vulnerability due to unrestricted Request Mapping",
          "secondTitle": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 9,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "688095954",
            "name": "michaelhorty/TEST_REPO",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edaf264210a0f3c673e52",
          "issueId": "647668897-oxPolicy_CICD_workflow_min_perm_settings_1",
          "mainTitle": "Workflow settings should be configured with minimum required permissions",
          "secondTitle": "The workflow is configured with more than the basic permissions. This means that someone who gets access to the GITHUB_TOKEN generated from an execution of a job may be able to elevate their privileges if the GITHUB_TOKEN has a higher permission than them. <br> <br>",
          "name": "Excessive permissions in workflow setting",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "N/A"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_CICD_workflow_min_perm_settings_1",
            "name": "Excessive permissions in workflow setting",
            "detailedDescription": "In GitHub Actions before each job begins, GitHub fetches an installation access token for the job (GITHUB_TOKEN). The GITHUB_TOKEN expires when a job finishes or after a maximum of 24 hours. Ensure the GITHUB_TOKEN is configured with the least privileges to run your jobs. Any user with write access to your repository has read access to all secrets configured in your repository. Therefore, you should ensure that the credentials being used within workflows have the least privileges required.  "
          },
          "category": {
            "name": "CI/CD Posture",
            "categoryId": 25
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c673e61",
          "issueId": "647668897-oxPolicy_securityScan_120-gorm.io/driver/postgres_1.0.8",
          "mainTitle": "gorm.io/driver/postgres@1.0.8 is a Go direct dependency having 15 indirect vulnerabilities and no direct vulnerabilities. CVE-2022-3064 (CVSS:7.5, Resource Exhaustion) is the most severe vulnerability.",
          "secondTitle": "gorm.io/driver/postgres\\@1.0.8 is a Go package that was added as a direct dependency. It contains:<br><br>&bull; 15 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 2 vulnerabilities with  publicly available exploits<br>&bull; 144 indirect dependencies<br><br>There are a total of 15 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 10<br>&bull; Medium : 5<br><br>\n          The following 4 dependencies have vulnerabilities: gopkg.in/yaml.v2\\@2.2.2, golang.org/x/crypto\\@0.0.0-20200622213623-75b288015ac9, golang.org/x/net\\@0.0.0-20190813141303-74dc4d7220e7, golang.org/x/text\\@0.3.3",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "sugiarto"
          ],
          "occurrences": 15,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c673ec2",
          "issueId": "647668897-oxPolicy_securityScan_120-github.com/urfave/cli_1.22.5",
          "mainTitle": "urfave/cli@1.22.5 is a Go direct dependency having 3 indirect vulnerabilities and no direct vulnerabilities. CVE-2022-3064 (CVSS:7.5, Resource Exhaustion) is the most severe vulnerability.",
          "secondTitle": "github.com/urfave/cli\\@1.22.5 is a Go package that was added as a direct dependency. It contains:<br><br>&bull; 3 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 7 indirect dependencies<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br>&bull; Medium : 2<br><br>\n          The following dependency has vulnerabilities: gopkg.in/yaml.v2\\@2.2.2",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "sugiarto"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c673eeb",
          "issueId": "647668897-oxPolicy_securityScan_120-github.com/unrolled/render_1.4.0",
          "mainTitle": "unrolled/render@1.4.0 is a Go direct dependency having 1 indirect vulnerability and no direct vulnerabilities. CVE-2022-29526 (CVSS:5.3, Improper Privilege Management) is the most severe vulnerability.",
          "secondTitle": "github.com/unrolled/render\\@1.4.0 is a Go package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; 1 vulnerability with  publicly available exploits<br>&bull; 3 indirect dependencies<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Medium : 1<br><br>\n          The following dependency has vulnerabilities: golang.org/x/sys\\@0.0.0-20210525143221-35b2ab0089ea",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Gie-Art"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699687834876
        },
        {
          "id": "656edaf264210a0f3c673f38",
          "issueId": "647668897-oxPolicy_securityScan_205-javascript.browser.security.insecure-document-method-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability via insecure document methods usage",
          "secondTitle": "A potentially insecure DOM (Document Object Model) manipulation method in JavaScript code that runs in a web browser was detected. Using insecure DOM manipulation methods can result in cross-site scripting (XSS) vulnerabilities, which can allow an attacker to execute malicious JavaScript code in the context of the affected website. This can result in sensitive data theft, unauthorized access to the user's session, or other malicious activities.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Gie-Art"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c673f5e",
          "issueId": "647668897-oxPolicy_securityScan_205-javascript.browser.security.insecure-innerhtml-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in Element.innerHTML",
          "secondTitle": "Usage of the insecure innerHTML property in JavaScript code running in a web browser was detected. The innerHTML property allows a developer to set the HTML content of an element directly, making it vulnerable to Cross-Site Scripting (XSS) attacks, which can allow an attacker to execute malicious JavaScript code in the context of the affected website. This can result in sensitive data theft, unauthorized access to the user's session, or other malicious activities.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Gie-Art"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c673f84",
          "issueId": "647668897-oxPolicy_securityScan_205-go.lang.security.audit.net.use-tls-false",
          "mainTitle": "HTTP server without TLS usage",
          "secondTitle": "Using HTTP server without TLS may lead to data leakage or information exposure",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "sugiarto"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c673fa8",
          "issueId": "647668897-oxPolicy_securityScan_205-go.lang.security.injection.tainted-url-host-false",
          "mainTitle": "A request was found to be crafted from user-input `r`. This can lead to Server-Side Request Forgery (SSRF) vulnerabilities, potentially exposing sensitive data. It is recommend where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to prevent abuse, including using an allowlist.",
          "secondTitle": "A request was found to be crafted from user-input `r`. This can lead to Server-Side Request Forgery (SSRF) vulnerabilities, potentially exposing sensitive data. It is recommend where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to prevent abuse, including using an allowlist.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Sugiarto"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c673fc8",
          "issueId": "647668897-oxPolicy_securityScan_205-javascript.jquery.security.audit.jquery-insecure-selector-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in JQuery selector",
          "secondTitle": "User controlled data in a '$(...)' is an anti-pattern that can lead to XSS vulnerabilities. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Gie-Art"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c673fed",
          "issueId": "647668897-oxPolicy_securityScan_205-javascript.jquery.security.audit.prohibit-jquery-html-false",
          "mainTitle": "Cross Site Scripting (XSS) vulnerability in JQuery .html() function",
          "secondTitle": "JQuery's '.html()' is susceptible to Cross Site Scripting (XSS) attacks. This enables attackers to execute malicious JavaScript, which typically allows them to hijack other users' account",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Gie-Art"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c67402f",
          "issueId": "647668897-oxPolicy_securityScan_205-contrib.nodejsscan.generic_error_disclosure-false",
          "mainTitle": "Exposure of Error Messages with Stack Traces",
          "secondTitle": "Displaying error messages with stack traces can inadvertently reveal sensitive details about the application's internal workings, file paths, database structures, or other critical information.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Gie-Art"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699687834876
        },
        {
          "id": "656edaf264210a0f3c674066",
          "issueId": "647668897-oxPolicy_securityScan_205-javascript.lang.security.audit.detect-non-literal-regexp-false",
          "mainTitle": "Denial-of-Service (DoS) vulnerability due to regex input",
          "secondTitle": "RegExp() is called with a variable, and this might allow an attacker to utilize a Denial-of-Service attack on your application with a long-running regular expression.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Gie-Art"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c674087",
          "issueId": "647668897-oxPolicy_securityScan_205-javascript.lang.security.audit.unsafe-dynamic-method-false",
          "mainTitle": "Command Injection vulnerability due to dynamic code execution",
          "secondTitle": "Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may lead to a command injection vulnerability.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Gie-Art"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c6740ae",
          "issueId": "647668897-oxPolicy_securityScan_205-javascript.lang.security.insecure-object-assign-false",
          "mainTitle": "Mass Assignment vulnerability due to insecure object assign",
          "secondTitle": "User control data in 'Object.assign' can cause web response to include data that it should not have or can lead to a mass assignment vulnerability",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Gie-Art"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c6740ce",
          "issueId": "647668897-oxPolicy_securityScan_205-go.lang.security.audit.crypto.math-random-used-false",
          "mainTitle": "Insecure Random Number Generation 'math/rand'function usage",
          "secondTitle": "Insecure Random Nubmer Generation function produces much lower quality of randomness. This can be used by attacker to predict values.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "sugiarto"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1f64210a0f3c6a52eb",
          "issueId": "647668897-oxPolicy_policyLicenseFile_1",
          "mainTitle": "License file missing from public repo",
          "secondTitle": "A license file is missing from the public repo Bank-ecommerce. License files allow external users to identify if the files in a repo can be re-used or edited. Without a license file present, repos are considered NOT to be open source. ",
          "name": "License file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "N/A"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policyLicenseFile_1",
            "name": "License file missing in repo",
            "detailedDescription": "If no License file is included as part of a repository, then it is assumed that the repository is not meant to be used or edited by anyone outside your organization. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1f64210a0f3c6a52f0",
          "issueId": "647668897-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo Bank-ecommerce. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "N/A"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edf1f64210a0f3c6a531e",
          "issueId": "329712156-oxPolicy_policyLicenseFile_1",
          "mainTitle": "License file missing from public repo",
          "secondTitle": "A license file is missing from the public repo VeracodeAzureYMLSamples. License files allow external users to identify if the files in a repo can be re-used or edited. Without a license file present, repos are considered NOT to be open source. ",
          "name": "License file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policyLicenseFile_1",
            "name": "License file missing in repo",
            "detailedDescription": "If no License file is included as part of a repository, then it is assumed that the repository is not meant to be used or edited by anyone outside your organization. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "329712156",
            "name": "michaelhorty/VeracodeAzureYMLSamples",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edf1f64210a0f3c6a5325",
          "issueId": "329712156-oxPolicy_policySecurityFile_1",
          "mainTitle": "Security Policy missing from public repo",
          "secondTitle": "The SECURITY.md file (Security Policy) is missing from the public repo VeracodeAzureYMLSamples. This may discourage users who discover security vulnerabilities from reporting them. The Security Policy file\u2019s presence also indicates that you have a security vulnerability handling procedure in place.",
          "name": "Security Policy file missing in repo",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Low",
          "policy": {
            "id": "oxPolicy_policySecurityFile_1",
            "name": "Security Policy file missing in repo",
            "detailedDescription": "If no SECURITY.md file is included as part of a repository, then users may be discouraged to report vulnerabilities that they find in the code. This is typically not what you would want for public repositories."
          },
          "category": {
            "name": "Git Posture",
            "categoryId": 3
          },
          "app": {
            "id": "329712156",
            "name": "michaelhorty/VeracodeAzureYMLSamples",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edc0b64210a0f3c6789b6",
          "issueId": "584352228-oxPolicy_securityScan_55-CKV_DOCKER_2-false",
          "mainTitle": "Dockerfile has no healthcheck instruction",
          "secondTitle": "A healthcheck is a command that allows a container to report its status to the Docker engine, indicating whether it is healthy or not. This is important for ensuring the availability and reliability of the application, as well as for detecting and responding to security incidents or attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c6793a7",
          "issueId": "584352228-oxPolicy_securityScan_secrets_history_1-4760190a57520c65e940a2da397a91f1",
          "mainTitle": "Inactive GitHub Access Token was found in the history of a private repository",
          "secondTitle": "Inactive GitHub Access Token was found in the history of a private repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>GitHub is a platform to build, scale and deliver secure software.\nIt contains your code repositories.\nThe GitHub API key grants authentication to use the GitHub API.\nAn attacker with knowledge of the exposed key will be able to perform different operations such as injecting malicious code, and will have access to all the account\u2019s secrets, permissions, projects, issues, repositories, deployments, pulls, users and more.\nDepending on the roles associated with the key modifications to all accessible projects can be done.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0b64210a0f3c6793df",
          "issueId": "584352228-oxPolicy_securityScan_secrets_history_1-898d80698e3ace7f5bf8ada8c67b06f2",
          "mainTitle": "Inactive JSON Web Token was found in the history of a private repository",
          "secondTitle": "Inactive JSON Web Token was found in the history of a private repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>JSON Web Tokens (JWTs) are an open, industry standard way for securely authenticating between two processes. They are commonly used in modern web applications. If a JWT is compromised then an attacker will have full access to the account the JWT is supposed to authenticate. In a lot of cases this is the equivalent of having a username and password.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c6797e5",
          "issueId": "584352228-oxPolicy_securityScan_secrets_1-cc7bb648c082b4416de4779a962dccd2",
          "mainTitle": "Inactive AWS Access Key was found in the code of a private repository",
          "secondTitle": "Inactive AWS Access Key was found in the code of a private repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc0c64210a0f3c67981b",
          "issueId": "584352228-oxPolicy_securityScan_secrets_1-6b43d4f8cec5358c77d15157a57953e2",
          "mainTitle": "Inactive AWS Secret Key was found in the code of a private repository",
          "secondTitle": "Inactive AWS Secret Key was found in the code of a private repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>AWS is a cloud platform.\nThe secret access key is used to sign programmatic requests that you make to AWS.\nAn attacker with knowledge of the exposed key will be able to access any and all resources attached to the key.\nThis can allow direct access to AWS services with potential permissions to add, delete, monitor and edit services.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c67988c",
          "issueId": "584352228-oxPolicy_securityScan_secrets_1-dc26b0ae35ce146d889b32e9514ba60f",
          "mainTitle": "Inactive JSON Web Token was found in the code of a private repository",
          "secondTitle": "Inactive JSON Web Token was found in the code of a private repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>JSON Web Tokens (JWTs) are an open, industry standard way for securely authenticating between two processes. They are commonly used in modern web applications. If a JWT is compromised then an attacker will have full access to the account the JWT is supposed to authenticate. In a lot of cases this is the equivalent of having a username and password.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679924",
          "issueId": "584352228-oxPolicy_securityScan_secrets_1-b9c9527811233a302cc738c252dca946",
          "mainTitle": "Inactive AWS Access Key was found in the code of a private repository",
          "secondTitle": "Inactive AWS Access Key was found in the code of a private repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc0c64210a0f3c67995b",
          "issueId": "584352228-oxPolicy_securityScan_secrets_1-fe5f1a9212f83347079578eec689b5b3",
          "mainTitle": "Inactive AWS Secret Key was found in the code of a private repository",
          "secondTitle": "Inactive AWS Secret Key was found in the code of a private repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>AWS is a cloud platform.\nThe secret access key is used to sign programmatic requests that you make to AWS.\nAn attacker with knowledge of the exposed key will be able to access any and all resources attached to the key.\nThis can allow direct access to AWS services with potential permissions to add, delete, monitor and edit services.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679cb8",
          "issueId": "584352228-oxPolicy_securityScan_205-javascript.lang.best-practice.javascript-alert-false",
          "mainTitle": "found alert() call; should this be in production code?",
          "secondTitle": "found alert() call; should this be in production code?",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679d5c",
          "issueId": "584352228-oxPolicy_securityScan_205-contrib.owasp.java.ssrf.owasp.java.ssrf.possible.import.statements-false",
          "mainTitle": "Non-exhaustive list of Libraries that provide functionality to accept URL as a parameter",
          "secondTitle": "Non-exhaustive list of Libraries that provide functionality to accept URL as a parameter",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584352228",
            "name": "OX-Security-Demo/Bank-Website",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc4264210a0f3c6898a8",
          "issueId": "584102675-oxPolicy_securityScan_55-CKV_DOCKER_2-false",
          "mainTitle": "Dockerfile has no healthcheck instruction",
          "secondTitle": "A healthcheck is a command that allows a container to report its status to the Docker engine, indicating whether it is healthy or not. This is important for ensuring the availability and reliability of the application, as well as for detecting and responding to security incidents or attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4264210a0f3c68994a",
          "issueId": "584102675-oxPolicy_securityScan_secrets_history_1-655c43d737f9758417f12eda153c136a",
          "mainTitle": "Inactive GitHub Access Token was found in the history of a public repository",
          "secondTitle": "Inactive GitHub Access Token was found in the history of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>GitHub is a platform to build, scale and deliver secure software.\nIt contains your code repositories.\nThe GitHub API key grants authentication to use the GitHub API.\nAn attacker with knowledge of the exposed key will be able to perform different operations such as injecting malicious code, and will have access to all the account\u2019s secrets, permissions, projects, issues, repositories, deployments, pulls, users and more.\nDepending on the roles associated with the key modifications to all accessible projects can be done.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4264210a0f3c6899e2",
          "issueId": "584102675-oxPolicy_securityScan_120-axios_0.15.3",
          "mainTitle": "axios@0.15.3 is a JavaScript direct dependency having 4 direct and 2 indirect vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "axios\\@0.15.3 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 4 direct and 2 indirect vulnerabilities<br>&bull; 3 indirect dependencies<br>&bull; NOT imported into your code<br><br>There are a total of 6 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 3<br>&bull; Medium : 3<br><br>\n          The following 2 dependencies have vulnerabilities: axios\\@0.15.3, follow-redirects\\@1.0.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4264210a0f3c689a29",
          "issueId": "584102675-oxPolicy_securityScan_120-class-validator_0.12.2",
          "mainTitle": "class-validator@0.12.2 is a JavaScript direct dependency having 1 direct and 2 indirect vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "class-validator\\@0.12.2 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct and 2 indirect vulnerabilities<br>&bull; 4 indirect dependencies<br>&bull; NOT imported into your code<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; Medium : 2<br><br>\n          The following 2 dependencies have vulnerabilities: class-validator\\@0.12.2, validator\\@13.0.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689a9f",
          "issueId": "584102675-oxPolicy_securityScan_120-xlsx_0.16.9",
          "mainTitle": "xlsx@0.16.9 is a JavaScript direct dependency having 4 direct vulnerabilities and no indirect vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "xlsx\\@0.16.9 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 4 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 14 indirect dependencies<br>&bull; NOT imported into your code<br><br>There are a total of 4 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br>&bull; Medium : 3<br><br>\n          The following dependency has vulnerabilities: xlsx\\@0.16.9",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689ad7",
          "issueId": "584102675-oxPolicy_securityScan_120-json-schema_0.2.5",
          "mainTitle": "json-schema@0.2.5 is a JavaScript direct dependency having 1 direct vulnerability and no indirect vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "json-schema\\@0.2.5 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; No indirect dependencies<br>&bull; NOT imported into your code<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br><br>\n          The following dependency has vulnerabilities: json-schema\\@0.2.5",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689b43",
          "issueId": "584102675-oxPolicy_securityScan_120-next_12.0.10",
          "mainTitle": "next@12.0.10 is a JavaScript direct dependency having 2 direct and 1 indirect vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "next\\@12.0.10 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 2 direct and 1 indirect vulnerabilities<br>&bull; 20 indirect dependencies<br>&bull; NOT imported into your code<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Medium : 2<br>&bull; Low : 1<br><br>\n          The following 2 dependencies have vulnerabilities: next\\@12.0.10, postcss\\@8.4.5",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689b75",
          "issueId": "584102675-oxPolicy_securityScan_120-jest_26.6.3",
          "mainTitle": "jest@26.6.3 is a JavaScript direct dependency having 6 indirect vulnerabilities and no direct vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "jest\\@26.6.3 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 6 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 310 indirect dependencies<br>&bull; NOT imported into your code<br><br>There are a total of 6 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; Medium : 5<br><br>\n          The following 6 dependencies have vulnerabilities: @babel/traverse\\@7.21.2, tough-cookie\\@4.1.2, semver\\@6.3.0, semver\\@7.5.1, semver\\@5.7.1, word-wrap\\@1.2.3",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689bc0",
          "issueId": "584102675-oxPolicy_securityScan_120-@graphql-codegen/typescript-operations_2.3.2",
          "mainTitle": "@graphql-codegen/typescript-operations@2.3.2 is a JavaScript direct dependency having 2 indirect vulnerabilities and no direct vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "@graphql-codegen/typescript-operations\\@2.3.2 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 2 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 206 indirect dependencies<br>&bull; NOT imported into your code<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; Medium : 1<br><br>\n          The following 2 dependencies have vulnerabilities: @babel/traverse\\@7.21.2, semver\\@6.3.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689bfc",
          "issueId": "584102675-oxPolicy_securityScan_120-serverless-offline_11.6.0",
          "mainTitle": "serverless-offline@11.6.0 is a JavaScript direct dependency having 1 indirect vulnerability and no direct vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "serverless-offline\\@11.6.0 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; 400 indirect dependencies<br>&bull; NOT imported into your code<br>&bull; Used for development only<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br>&bull; Medium : 1<br><br>\n          The following 2 dependencies have vulnerabilities: fast-xml-parser\\@4.1.2, semver\\@6.3.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689c2f",
          "issueId": "584102675-oxPolicy_securityScan_120-socket.io_3.1.2",
          "mainTitle": "socket.io@3.1.2 is a JavaScript direct dependency having 2 indirect vulnerabilities and no direct vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "socket.io\\@3.1.2 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 2 indirect vulnerabilities and no direct vulnerabilities<br>&bull; 24 indirect dependencies<br>&bull; NOT imported into your code<br><br>There are a total of 2 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br>&bull; Medium : 1<br><br>\n          The following 2 dependencies have vulnerabilities: socket.io-parser\\@4.0.5, engine.io\\@4.1.2",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689c60",
          "issueId": "584102675-oxPolicy_securityScan_120-rookout_0.1.130",
          "mainTitle": "rookout@0.1.130 is a JavaScript direct dependency having 1 indirect vulnerability and no direct vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "rookout\\@0.1.130 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; 33 indirect dependencies<br>&bull; NOT imported into your code<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br><br>\n          The following dependency has vulnerabilities: crypto-js\\@3.3.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698474625568
        },
        {
          "id": "656edc4364210a0f3c689c8c",
          "issueId": "584102675-oxPolicy_securityScan_120-apollo-server_3.11.1",
          "mainTitle": "apollo-server@3.11.1 is a JavaScript direct dependency having 1 indirect vulnerability and no direct vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "apollo-server\\@3.11.1 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 1 indirect vulnerability and no direct vulnerabilities<br>&bull; 141 indirect dependencies<br>&bull; NOT imported into your code<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Low : 1<br><br>\n          The following dependency has vulnerabilities: apollo-server-core\\@3.11.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689d10",
          "issueId": "584102675-oxPolicy_securityScan_secrets_1-ef8a2acdddc145083df32bbfc8f71409",
          "mainTitle": "Inactive GitHub Access Token was found in the code of a public repository",
          "secondTitle": "Inactive GitHub Access Token was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>GitHub is a platform to build, scale and deliver secure software.\nIt contains your code repositories.\nThe GitHub API key grants authentication to use the GitHub API.\nAn attacker with knowledge of the exposed key will be able to perform different operations such as injecting malicious code, and will have access to all the account\u2019s secrets, permissions, projects, issues, repositories, deployments, pulls, users and more.\nDepending on the roles associated with the key modifications to all accessible projects can be done.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689d7a",
          "issueId": "584102675-oxPolicy_securityScan_secrets_1-1977f549f736efc37c2cc31e902e68d2",
          "mainTitle": "Inactive AWS Access Key was found in the code of a public repository",
          "secondTitle": "Inactive AWS Access Key was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc4364210a0f3c689dac",
          "issueId": "584102675-oxPolicy_securityScan_secrets_1-f3d1c10c3554a3475b80dee7494472cf",
          "mainTitle": "Inactive AWS Secret Key was found in the code of a public repository",
          "secondTitle": "Inactive AWS Secret Key was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>AWS is a cloud platform.\nThe secret access key is used to sign programmatic requests that you make to AWS.\nAn attacker with knowledge of the exposed key will be able to access any and all resources attached to the key.\nThis can allow direct access to AWS services with potential permissions to add, delete, monitor and edit services.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689ea4",
          "issueId": "584102675-oxPolicy_securityScan_205-typescript.react.portability.i18next.jsx-not-internationalized-false",
          "mainTitle": "JSX element not internationalized",
          "secondTitle": "Incorrect encoding can lead to errors in business logic",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc4364210a0f3c689f16",
          "issueId": "584102675-oxPolicy_securityScan_205-javascript.express.security.audit.express-check-csurf-middleware-usage-false",
          "mainTitle": "Cross Site Request Forgery (CSRF) vulnerability due to undetected 'csurf/csrf' middleware",
          "secondTitle": "A Cross-Site Request Forgery (CSRF) attack is a type of exploit in which an attacker tricks a victim into performing actions on behalf of the attacker without the victim's knowledge or consent. To prevent these attacks, Express.js applications can use the csurf middleware. A successful CSRF attack can result in unauthorized actions being taken on behalf of the victim, such as transferring funds, changing passwords, or modifying account information.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "584102675",
            "name": "OX-Security-Demo/Multi-currency-management",
            "businessPriority": 97,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c674170",
          "issueId": "647669373-oxPolicy_securityScan_55-CKV_DOCKER_2-false",
          "mainTitle": "Dockerfile has no healthcheck instruction",
          "secondTitle": "A healthcheck is a command that allows a container to report its status to the Docker engine, indicating whether it is healthy or not. This is important for ensuring the availability and reliability of the application, as well as for detecting and responding to security incidents or attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "snyk-bot"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "647669373",
            "name": "OX-Security-Demo/Backend-Server",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edcc964210a0f3c694ce1",
          "issueId": "310663043-oxPolicy_securityScan_55-CKV_DOCKER_2-false",
          "mainTitle": "Dockerfile has no healthcheck instruction",
          "secondTitle": "A healthcheck is a command that allows a container to report its status to the Docker engine, indicating whether it is healthy or not. This is important for ensuring the availability and reliability of the application, as well as for detecting and responding to security incidents or attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ren\u00e9 Zubcevic"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c6950d1",
          "issueId": "310663043-oxPolicy_securityScan_secrets_1-865c4ad634285e574e53949851e71c30",
          "mainTitle": "Inactive JSON Web Token was found in the code of a public repository",
          "secondTitle": "Inactive JSON Web Token was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>JSON Web Tokens (JWTs) are an open, industry standard way for securely authenticating between two processes. They are commonly used in modern web applications. If a JWT is compromised then an attacker will have full access to the account the JWT is supposed to authenticate. In a lot of cases this is the equivalent of having a username and password.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c695101",
          "issueId": "310663043-oxPolicy_securityScan_secrets_1-0c68006a7d514121bc4e0166be3beaaa",
          "mainTitle": "Inactive JSON Web Token was found in the code of a public repository",
          "secondTitle": "Inactive JSON Web Token was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>JSON Web Tokens (JWTs) are an open, industry standard way for securely authenticating between two processes. They are commonly used in modern web applications. If a JWT is compromised then an attacker will have full access to the account the JWT is supposed to authenticate. In a lot of cases this is the equivalent of having a username and password.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c69515e",
          "issueId": "310663043-oxPolicy_securityScan_205-DS172411-false",
          "mainTitle": "Edit the setTimeout so that no untrusted data is included. If untrusted data is absolutely necessary a great deal of care should be taken to ensure it is properly escaped so that it cannot be executed. This is not as simple as just escaping quotes.",
          "secondTitle": "Review setTimeout for untrusted data",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 155,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edcca64210a0f3c6953d4",
          "issueId": "310663043-oxPolicy_securityScan_205-DS176209-false",
          "mainTitle": "A \"TODO\" or similar was left in source code, possibly indicating incomplete functionality",
          "secondTitle": "Suspicious comment",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 52,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edcca64210a0f3c69549a",
          "issueId": "310663043-oxPolicy_securityScan_205-contrib.owasp.java.ssrf.owasp.java.ssrf.possible.import.statements-false",
          "mainTitle": "Non-exhaustive list of Libraries that provide functionality to accept URL as a parameter",
          "secondTitle": "Non-exhaustive list of Libraries that provide functionality to accept URL as a parameter",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edcca64210a0f3c69555e",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.browser.security.js-open-redirect-from-function-false",
          "mainTitle": "Open redirection vulnerability when running code in browser",
          "secondTitle": "An open redirection vulnerability in JavaScript code running in a browser was detected. Open redirection vulnerabilities occur when the code allows user-controlled data to redirect a user to an arbitrary URL, potentially including malicious ones. An attacker could potentially use an open redirection vulnerability to steal sensitive information, such as credentials or session tokens, or to conduct phishing attacks.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 6,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c69564a",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.lang.best-practice.javascript-alert-false",
          "mainTitle": "found alert() call; should this be in production code?",
          "secondTitle": "found alert() call; should this be in production code?",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 5,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c6956a7",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.lang.best-practice.lazy-load-module-false",
          "mainTitle": "Lazy loading can complicate code bundling if care is not taken, also `require`s are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. The best practice is to `require` modules at the beginning of each file, before and outside of any functions.",
          "secondTitle": "Lazy loading can complicate code bundling if care is not taken, also `require`s are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. The best practice is to `require` modules at the beginning of each file, before and outside of any functions.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 7,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c695708",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.lang.best-practice.javascript-prompt-false",
          "mainTitle": "found prompt() call; should this be in production code?",
          "secondTitle": "found prompt() call; should this be in production code?",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 7,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c69573a",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.lang.correctness.useless-assignment-false",
          "mainTitle": "`t` is assigned twice; the first assignment is useless",
          "secondTitle": "`t` is assigned twice; the first assignment is useless",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 26,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c6957b1",
          "issueId": "310663043-oxPolicy_securityScan_205-typescript.react.portability.i18next.i18next-key-format-false",
          "mainTitle": "Incorrect format of translation key in i18next",
          "secondTitle": "Translation key '$KEY' should match format 'MODULE.FEATURE.*'. Incorrect format may lead to visualization problems on website.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 10,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c6957e5",
          "issueId": "310663043-oxPolicy_securityScan_205-javascript.lang.best-practice.javascript-debugger-false",
          "mainTitle": "found debugger call; should this be in production code?",
          "secondTitle": "found debugger call; should this be in production code?",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1685648137586
        },
        {
          "id": "656edcca64210a0f3c69583e",
          "issueId": "310663043-oxPolicy_securityScan_205-DS189424-false",
          "mainTitle": "Edit the eval so that no untrusted data is included. If untrusted data is absolutely necessary a great deal of care should be taken to ensure it is properly escaped so that it cannot be executed. This is not as simple as just escaping quotes.",
          "secondTitle": "Review eval for untrusted data",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edccb64210a0f3c695979",
          "issueId": "310663043-oxPolicy_securityScan_205-DS425010-false",
          "mainTitle": "Either add integrity protection or use a data format like JSON.",
          "secondTitle": "Do not deserialize untrusted data.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Ren\u00e9 Zubcevic"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edccb64210a0f3c695ac0",
          "issueId": "310663043-oxPolicy_securityScan_205-contrib.owasp.java.xxe.owasp.java.xxe.possible.import.statements-false",
          "mainTitle": "Non-exhaustive list of Libraries that provide functionality to accept XML as an input",
          "secondTitle": "Non-exhaustive list of Libraries that provide functionality to accept XML as an input",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Rene Zubcevic"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "310663043",
            "name": "michaelhorty/WebGoat",
            "businessPriority": 70.67142857142856,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656eded464210a0f3c6a0f75",
          "issueId": "585303099-oxPolicy_securityScan_55-CKV_DOCKER_2-false",
          "mainTitle": "Dockerfile has no healthcheck instruction",
          "secondTitle": "A healthcheck is a command that allows a container to report its status to the Docker engine, indicating whether it is healthy or not. This is important for ensuring the availability and reliability of the application, as well as for detecting and responding to security incidents or attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Liad-OX"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a1020",
          "issueId": "585303099-oxPolicy_securityScan_secrets_history_1-07c82dcd0703b89bb48676d456b06674",
          "mainTitle": "Inactive GitHub Access Token was found in the history of a private repository",
          "secondTitle": "Inactive GitHub Access Token was found in the history of a private repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>GitHub is a platform to build, scale and deliver secure software.\nIt contains your code repositories.\nThe GitHub API key grants authentication to use the GitHub API.\nAn attacker with knowledge of the exposed key will be able to perform different operations such as injecting malicious code, and will have access to all the account\u2019s secrets, permissions, projects, issues, repositories, deployments, pulls, users and more.\nDepending on the roles associated with the key modifications to all accessible projects can be done.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a1064",
          "issueId": "585303099-oxPolicy_securityScan_secrets_history_1-bae8771faadf03a15526d3a333507bc7",
          "mainTitle": "Inactive GitHub OAuth Access Token was found in the history of a private repository",
          "secondTitle": "Inactive GitHub OAuth Access Token was found in the history of a private repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>GitHub is a platform to build, scale and deliver secure software.\nIt contains your code repositories.\nA GitHub OAuth token is a secure token that is issued by GitHub when a user authorizes an application to access their GitHub account and resources. In general, an attacker who has obtained a GitHub OAuth token can perform a wide range of actions that can cause harm to the user or the organization associated with the user. For example, the attacker could use the token to delete repositories, modify repository settings, or steal sensitive information stored within the repositories.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded464210a0f3c6a10b7",
          "issueId": "585303099-oxPolicy_securityScan_120-ansi-regex_6.0.0",
          "mainTitle": "ansi-regex@6.0.0 is a JavaScript direct dependency having 1 direct vulnerability and no indirect vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "ansi-regex\\@6.0.0 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; No indirect dependencies<br>&bull; NOT imported into your code<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; High : 1<br><br>\n          The following dependency has vulnerabilities: ansi-regex\\@6.0.0",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Eyal Paz"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656eded464210a0f3c6a10ed",
          "issueId": "585303099-oxPolicy_securityScan_120-convict_6.2.1",
          "mainTitle": "convict@6.2.1 is a JavaScript direct dependency having 3 direct vulnerabilities and no indirect vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "convict\\@6.2.1 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 3 direct vulnerabilities and no indirect vulnerabilities<br>&bull; 2 indirect dependencies<br>&bull; NOT imported into your code<br><br>There are a total of 3 vulnerabilities.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br>&bull; High : 2<br><br>\n          The following dependency has vulnerabilities: convict\\@6.2.1",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "mirox13"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1697608519894
        },
        {
          "id": "656eded464210a0f3c6a112a",
          "issueId": "585303099-oxPolicy_securityScan_120-ejs_3.1.6",
          "mainTitle": "ejs@3.1.6 is a JavaScript direct dependency having 1 direct vulnerability and no indirect vulnerabilities. The dependency is not imported into the code.",
          "secondTitle": "ejs\\@3.1.6 is a JavaScript package that was added as a direct dependency. It contains:<br><br>&bull; 1 direct vulnerability and no indirect vulnerabilities<br>&bull; 15 indirect dependencies<br>&bull; NOT imported into your code<br><br>There is 1 vulnerability.<br><br>The severities of the CVEs are as follows:<br>&bull; Critical : 1<br><br>\n          The following dependency has vulnerabilities: ejs\\@3.1.6",
          "name": "Vulnerable dependency (CVE) in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Eyal Paz"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_120",
            "name": "Vulnerable dependency (CVE) in code",
            "detailedDescription": "OSS/SCA is a critical tool that identifies vulnerabilities within open-source and third-party components of software applications. Ignoring OSS issues exposes applications to potential breaches, unauthorized access, and system malfunctions. As reliance on third-party libraries grows, the significance of addressing these vulnerabilities becomes paramount. The Log4J incident is one example of this. OSS scanning is the most basic way of determining if an application is using vulnerable dependencies."
          },
          "category": {
            "name": "Open Source Security",
            "categoryId": 6
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656eded564210a0f3c6a1d5a",
          "issueId": "585303099-oxPolicy_securityScan_secrets_1-5da94cb795f825485216c7020900424f",
          "mainTitle": "Inactive GitHub Access Token was found in the code of a private repository",
          "secondTitle": "Inactive GitHub Access Token was found in the code of a private repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>GitHub is a platform to build, scale and deliver secure software.\nIt contains your code repositories.\nThe GitHub API key grants authentication to use the GitHub API.\nAn attacker with knowledge of the exposed key will be able to perform different operations such as injecting malicious code, and will have access to all the account\u2019s secrets, permissions, projects, issues, repositories, deployments, pulls, users and more.\nDepending on the roles associated with the key modifications to all accessible projects can be done.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656eded564210a0f3c6a1e21",
          "issueId": "585303099-oxPolicy_securityScan_205-python.lang.security.audit.insecure-transport.requests.request-with-http-false",
          "mainTitle": "Man-in-the-Middle (MitM) vulnerability due to 'http://' usage",
          "secondTitle": "Detected a request using 'http://' in the 'requests.post' or 'requests.get' methods. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Eyal Paz"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656eded564210a0f3c6a1e55",
          "issueId": "585303099-oxPolicy_securityScan_205-python.requests.best-practice.use-timeout-false",
          "mainTitle": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.",
          "secondTitle": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Eyal Paz"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656eded564210a0f3c6a1fb5",
          "issueId": "585303099-oxPolicy_securityScan_205-javascript.express.security.audit.express-check-csurf-middleware-usage-false",
          "mainTitle": "Cross Site Request Forgery (CSRF) vulnerability due to undetected 'csurf/csrf' middleware",
          "secondTitle": "A Cross-Site Request Forgery (CSRF) attack is a type of exploit in which an attacker tricks a victim into performing actions on behalf of the attacker without the victim's knowledge or consent. To prevent these attacks, Express.js applications can use the csurf middleware. A successful CSRF attack can result in unauthorized actions being taken on behalf of the victim, such as transferring funds, changing passwords, or modifying account information.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Eyal Paz"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585303099",
            "name": "OX-Security-Demo/Bank-Website-Backend",
            "businessPriority": 69.28571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1700828743229
        },
        {
          "id": "656edbfe64210a0f3c6754aa",
          "issueId": "585479391-oxPolicy_securityScan_55-CKV_DOCKER_2-false",
          "mainTitle": "Dockerfile has no healthcheck instruction",
          "secondTitle": "A healthcheck is a command that allows a container to report its status to the Docker engine, indicating whether it is healthy or not. This is important for ensuring the availability and reliability of the application, as well as for detecting and responding to security incidents or attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "585479391",
            "name": "OX-Security-Demo/Investment-management",
            "businessPriority": 66.5142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edbfe64210a0f3c67552e",
          "issueId": "585479391-oxPolicy_securityScan_secrets_1-2cfb21d103ab2ef7e9fa0cb73ddf325c",
          "mainTitle": "Inactive GitHub Access Token was found in the code of a public repository",
          "secondTitle": "Inactive GitHub Access Token was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>GitHub is a platform to build, scale and deliver secure software.\nIt contains your code repositories.\nThe GitHub API key grants authentication to use the GitHub API.\nAn attacker with knowledge of the exposed key will be able to perform different operations such as injecting malicious code, and will have access to all the account\u2019s secrets, permissions, projects, issues, repositories, deployments, pulls, users and more.\nDepending on the roles associated with the key modifications to all accessible projects can be done.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585479391",
            "name": "OX-Security-Demo/Investment-management",
            "businessPriority": 66.5142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679992",
          "issueId": "585497913-oxPolicy_securityScan_55-CKV_DOCKER_2-false",
          "mainTitle": "Dockerfile has no healthcheck instruction",
          "secondTitle": "A healthcheck is a command that allows a container to report its status to the Docker engine, indicating whether it is healthy or not. This is important for ensuring the availability and reliability of the application, as well as for detecting and responding to security incidents or attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c6799d7",
          "issueId": "585497913-oxPolicy_securityScan_secrets_history_1-c7f76691346d1c9becb936f48e4638e9",
          "mainTitle": "Inactive GitHub Access Token was found in the history of a public repository",
          "secondTitle": "Inactive GitHub Access Token was found in the history of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>GitHub is a platform to build, scale and deliver secure software.\nIt contains your code repositories.\nThe GitHub API key grants authentication to use the GitHub API.\nAn attacker with knowledge of the exposed key will be able to perform different operations such as injecting malicious code, and will have access to all the account\u2019s secrets, permissions, projects, issues, repositories, deployments, pulls, users and more.\nDepending on the roles associated with the key modifications to all accessible projects can be done.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679a10",
          "issueId": "585497913-oxPolicy_securityScan_secrets_1-11c88d697593fc8d917df6ad5b392690",
          "mainTitle": "Inactive AWS Access Key was found in the code of a public repository",
          "secondTitle": "Inactive AWS Access Key was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc0c64210a0f3c679a3b",
          "issueId": "585497913-oxPolicy_securityScan_secrets_1-5631e41a62a03b27965d939b1a078530",
          "mainTitle": "Inactive AWS Secret Key was found in the code of a public repository",
          "secondTitle": "Inactive AWS Secret Key was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>AWS is a cloud platform.\nThe secret access key is used to sign programmatic requests that you make to AWS.\nAn attacker with knowledge of the exposed key will be able to access any and all resources attached to the key.\nThis can allow direct access to AWS services with potential permissions to add, delete, monitor and edit services.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1701763814500
        },
        {
          "id": "656edc0c64210a0f3c679ac4",
          "issueId": "585497913-oxPolicy_securityScan_205-DS161085-false",
          "mainTitle": "calloc handles the most common integer math in memory allocation (# of elements * their size) with error handling to prevent overflows in most implementations, and zeros out memory",
          "secondTitle": "Problematic C function detected (malloc)",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc0c64210a0f3c679ade",
          "issueId": "585497913-oxPolicy_securityScan_205-DS176209-false",
          "mainTitle": "A \"TODO\" or similar was left in source code, possibly indicating incomplete functionality",
          "secondTitle": "Suspicious comment",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "585497913",
            "name": "OX-Security-Demo/BankForensicsCollector",
            "businessPriority": 62.357142857142854,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1764210a0f3c67f4ae",
          "issueId": "637651212-oxPolicy_securityScan_55-CKV_DOCKER_2-false",
          "mainTitle": "Dockerfile has no healthcheck instruction",
          "secondTitle": "A healthcheck is a command that allows a container to report its status to the Docker engine, indicating whether it is healthy or not. This is important for ensuring the availability and reliability of the application, as well as for detecting and responding to security incidents or attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "637651212",
            "name": "OX-Security-Demo/Lines-Credits",
            "businessPriority": 59.58571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1764210a0f3c67f530",
          "issueId": "637651212-oxPolicy_securityScan_secrets_1-677e52a4584af44b8cb2093c0cd78dd4",
          "mainTitle": "Inactive GitHub Access Token was found in the code of a public repository",
          "secondTitle": "Inactive GitHub Access Token was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>GitHub is a platform to build, scale and deliver secure software.\nIt contains your code repositories.\nThe GitHub API key grants authentication to use the GitHub API.\nAn attacker with knowledge of the exposed key will be able to perform different operations such as injecting malicious code, and will have access to all the account\u2019s secrets, permissions, projects, issues, repositories, deployments, pulls, users and more.\nDepending on the roles associated with the key modifications to all accessible projects can be done.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "637651212",
            "name": "OX-Security-Demo/Lines-Credits",
            "businessPriority": 59.58571428571428,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67dd46",
          "issueId": "586554191-oxPolicy_securityScan_55-CKV_DOCKER_2-false",
          "mainTitle": "Dockerfile has no healthcheck instruction",
          "secondTitle": "A healthcheck is a command that allows a container to report its status to the Docker engine, indicating whether it is healthy or not. This is important for ensuring the availability and reliability of the application, as well as for detecting and responding to security incidents or attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67dfc1",
          "issueId": "586554191-oxPolicy_securityScan_secrets_1-b9c9527811233a302cc738c252dca946",
          "mainTitle": "Inactive AWS Access Key was found in the code of a public repository",
          "secondTitle": "Inactive AWS Access Key was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc1564210a0f3c67dfea",
          "issueId": "586554191-oxPolicy_securityScan_secrets_1-fe5f1a9212f83347079578eec689b5b3",
          "mainTitle": "Inactive AWS Secret Key was found in the code of a public repository",
          "secondTitle": "Inactive AWS Secret Key was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>AWS is a cloud platform.\nThe secret access key is used to sign programmatic requests that you make to AWS.\nAn attacker with knowledge of the exposed key will be able to access any and all resources attached to the key.\nThis can allow direct access to AWS services with potential permissions to add, delete, monitor and edit services.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67e012",
          "issueId": "586554191-oxPolicy_securityScan_secrets_1-92bb9aa19f885c5ebfeddf4007de0c61",
          "mainTitle": "Inactive Slack Access Token was found in the code of a public repository",
          "secondTitle": "Inactive Slack Access Token was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>Slack is a messaging app for businesses.\nIt commonly has integrations with other applications including logging apps, code repositories, and build systems.\nThe Slack API token grants authentication to use the Slack API.\nAn attacker with knowledge of the exposed token will be able to perform different operations such as injecting fake data and prevent your access by creating, deleting, editing and getting data on calls, invitations, events and more.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1564210a0f3c67e03c",
          "issueId": "586554191-oxPolicy_securityScan_secrets_1-abba18d356618e98111983388b7c628e",
          "mainTitle": "Inactive Slack Access Token was found in the code of a public repository",
          "secondTitle": "Inactive Slack Access Token was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>Slack is a messaging app for businesses.\nIt commonly has integrations with other applications including logging apps, code repositories, and build systems.\nThe Slack API token grants authentication to use the Slack API.\nAn attacker with knowledge of the exposed token will be able to perform different operations such as injecting fake data and prevent your access by creating, deleting, editing and getting data on calls, invitations, events and more.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "586554191",
            "name": "OX-Security-Demo/Liquidity-management",
            "businessPriority": 37.41428571428571,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67bc1a",
          "issueId": "593520605-oxPolicy_securityScan_55-CKV_DOCKER_2-false",
          "mainTitle": "Dockerfile has no healthcheck instruction",
          "secondTitle": "A healthcheck is a command that allows a container to report its status to the Docker engine, indicating whether it is healthy or not. This is important for ensuring the availability and reliability of the application, as well as for detecting and responding to security incidents or attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67be6f",
          "issueId": "593520605-oxPolicy_securityScan_secrets_1-e0641b9dffc94230b8dc262843feef28",
          "mainTitle": "Inactive GitHub Access Token was found in the code of a public repository",
          "secondTitle": "Inactive GitHub Access Token was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>GitHub is a platform to build, scale and deliver secure software.\nIt contains your code repositories.\nThe GitHub API key grants authentication to use the GitHub API.\nAn attacker with knowledge of the exposed key will be able to perform different operations such as injecting malicious code, and will have access to all the account\u2019s secrets, permissions, projects, issues, repositories, deployments, pulls, users and more.\nDepending on the roles associated with the key modifications to all accessible projects can be done.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edc1364210a0f3c67bedc",
          "issueId": "593520605-oxPolicy_securityScan_205-DS176209-false",
          "mainTitle": "A \"TODO\" or similar was left in source code, possibly indicating incomplete functionality",
          "secondTitle": "Suspicious comment",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "593520605",
            "name": "OX-Security-Demo/Currency-Credits",
            "businessPriority": 34.64285714285714,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaef64210a0f3c672d7c",
          "issueId": "715723869-oxPolicy_securityScan_55-CKV_DOCKER_2-false",
          "mainTitle": "Dockerfile has no healthcheck instruction",
          "secondTitle": "A healthcheck is a command that allows a container to report its status to the Docker engine, indicating whether it is healthy or not. This is important for ensuring the availability and reliability of the application, as well as for detecting and responding to security incidents or attacks.",
          "name": "IaC issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Jannik Hollenbach"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_55",
            "name": "IaC issue",
            "detailedDescription": "Infrastructure as Code (IaC) has revolutionized how infrastructure is provisioned and managed, but it also introduces potential risks if not correctly configured or maintained. Misconfigurations in IaC can lead to a wide range of security and operational issues, from unauthorized access to resource inefficiencies. As cloud environments become more intricate, addressing these IaC issues is of utmost importance."
          },
          "category": {
            "name": "Infrastructure as Code Scan",
            "categoryId": 8
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672dd9",
          "issueId": "715723869-oxPolicy_securityScan_secrets_history_1-1e8ffa5947751b68fa67f780ddf8b90d",
          "mainTitle": "Inactive JSON Web Token was found in the history of a public repository",
          "secondTitle": "Inactive JSON Web Token was found in the history of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>JSON Web Tokens (JWTs) are an open, industry standard way for securely authenticating between two processes. They are commonly used in modern web applications. If a JWT is compromised then an attacker will have full access to the account the JWT is supposed to authenticate. In a lot of cases this is the equivalent of having a username and password.",
          "name": "Secret in Git history",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "ShubhamPalriwala"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_history_1",
            "name": "Secret in Git history",
            "detailedDescription": "Even when secrets are removed from code, they are not removed from the GIT history. An active secret may give an unauthorized user an entry point into your organization. Ensure that all secrets in Git History are no longer active."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672ea3",
          "issueId": "715723869-oxPolicy_securityScan_secrets_1-3238cd41307062a8256c427ac9723baa",
          "mainTitle": "Inactive JSON Web Token was found in the code of a public repository",
          "secondTitle": "Inactive JSON Web Token was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>JSON Web Tokens (JWTs) are an open, industry standard way for securely authenticating between two processes. They are commonly used in modern web applications. If a JWT is compromised then an attacker will have full access to the account the JWT is supposed to authenticate. In a lot of cases this is the equivalent of having a username and password.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672ed5",
          "issueId": "715723869-oxPolicy_securityScan_secrets_1-8e922db80cac1bee51c0f9b6d223fcf6",
          "mainTitle": "Inactive JSON Web Token was found in the code of a public repository",
          "secondTitle": "Inactive JSON Web Token was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>JSON Web Tokens (JWTs) are an open, industry standard way for securely authenticating between two processes. They are commonly used in modern web applications. If a JWT is compromised then an attacker will have full access to the account the JWT is supposed to authenticate. In a lot of cases this is the equivalent of having a username and password.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672f0b",
          "issueId": "715723869-oxPolicy_securityScan_secrets_1-80de4a21c9d52689b67d54db026b443f",
          "mainTitle": "Inactive JSON Web Token was found in the code of a public repository",
          "secondTitle": "Inactive JSON Web Token was found in the code of a public repository. The secret is disabled or revoked by the system it is meant to connect to.  \n          <br/>JSON Web Tokens (JWTs) are an open, industry standard way for securely authenticating between two processes. They are commonly used in modern web applications. If a JWT is compromised then an attacker will have full access to the account the JWT is supposed to authenticate. In a lot of cases this is the equivalent of having a username and password.",
          "name": "Secret in code",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_secrets_1",
            "name": "Secret in code",
            "detailedDescription": "Embedding secrets, such as API keys, passwords, or tokens, directly within code is a precarious practice. It not only jeopardizes data confidentiality but also presents a significant risk should the codebase be accidentally exposed or compromised. As code repositories can be cloned, shared, or become public, maintaining secrets outside the code is essential for safeguarding sensitive information."
          },
          "category": {
            "name": "Secret/PII Scan",
            "categoryId": 5
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672faa",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.correctness.no-replaceall-false",
          "mainTitle": "The string method replaceAll is not supported in all versions of javascript, and is not supported by older browser versions. Consider using replace() with a regex as the first argument instead like mystring.replace(/bad/g, \"good\") instead of mystring.replaceAll(\"bad\", \"good\") (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)",
          "secondTitle": "The string method replaceAll is not supported in all versions of javascript, and is not supported by older browser versions. Consider using replace() with a regex as the first argument instead like mystring.replace(/bad/g, \"good\") instead of mystring.replaceAll(\"bad\", \"good\") (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c672fc8",
          "issueId": "715723869-oxPolicy_securityScan_205-DS172411-false",
          "mainTitle": "Edit the setTimeout so that no untrusted data is included. If untrusted data is absolutely necessary a great deal of care should be taken to ensure it is properly escaped so that it cannot be executed. This is not as simple as just escaping quotes.",
          "secondTitle": "Review setTimeout for untrusted data",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "rishabhkeshan"
          ],
          "occurrences": 7,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c6730a6",
          "issueId": "715723869-oxPolicy_securityScan_205-DS176209-false",
          "mainTitle": "A \"TODO\" or similar was left in source code, possibly indicating incomplete functionality",
          "secondTitle": "Suspicious comment",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bj\u00f6rn Kimminich"
          ],
          "occurrences": 48,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c673146",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.best-practice.lazy-load-module-false",
          "mainTitle": "Lazy loading can complicate code bundling if care is not taken, also `require`s are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. The best practice is to `require` modules at the beginning of each file, before and outside of any functions.",
          "secondTitle": "Lazy loading can complicate code bundling if care is not taken, also `require`s are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. The best practice is to `require` modules at the beginning of each file, before and outside of any functions.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bj\u00f6rn Kimminich"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaef64210a0f3c6731d1",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.audit.detect-replaceall-sanitization-false",
          "mainTitle": "Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.",
          "secondTitle": "Detected a call to `replaceAll()` in an attempt to HTML escape the string `tableData[i].description`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c6736c0",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.correctness.missing-template-string-indicator-false",
          "mainTitle": "This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?",
          "secondTitle": "This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "rishabhkeshan"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c67370c",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.correctness.useless-assignment-false",
          "mainTitle": "`delay` is assigned twice; the first assignment is useless",
          "secondTitle": "`delay` is assigned twice; the first assignment is useless",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bjoern Kimminich"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c6737e5",
          "issueId": "715723869-oxPolicy_securityScan_205-DS189424-false",
          "mainTitle": "Edit the eval so that no untrusted data is included. If untrusted data is absolutely necessary a great deal of care should be taken to ensure it is properly escaped so that it cannot be executed. This is not as simple as just escaping quotes.",
          "secondTitle": "Review eval for untrusted data",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c673805",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.lang.correctness.eqeq-is-bad-false",
          "mainTitle": "Detected a useless comparison operation `bot == bot` or `bot != bot`. This operation is always true. If testing for floating point NaN, use `math.isnan`, or `cmath.isnan` if the number is complex.",
          "secondTitle": "Detected a useless comparison operation `bot == bot` or `bot != bot`. This operation is always true. If testing for floating point NaN, use `math.isnan`, or `cmath.isnan` if the number is complex.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Bj\u00f6rn Kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edaf164210a0f3c6739e8",
          "issueId": "715723869-oxPolicy_securityScan_205-javascript.express.security.audit.express-check-csurf-middleware-usage-false",
          "mainTitle": "Cross Site Request Forgery (CSRF) vulnerability due to undetected 'csurf/csrf' middleware",
          "secondTitle": "A Cross-Site Request Forgery (CSRF) attack is a type of exploit in which an attacker tricks a victim into performing actions on behalf of the attacker without the victim's knowledge or consent. To prevent these attacks, Express.js applications can use the csurf middleware. A successful CSRF attack can result in unauthorized actions being taken on behalf of the victim, such as transferring funds, changing passwords, or modifying account information.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "bjoern.kimminich"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "715723869",
            "name": "michaelhorty/juiceshop_clone",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc3464210a0f3c680f7a",
          "issueId": "307444027-oxPolicy_securityScan_205-DS176209-false",
          "mainTitle": "A \"TODO\" or similar was left in source code, possibly indicating incomplete functionality",
          "secondTitle": "Suspicious comment",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Boy Baukema"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc3464210a0f3c680fdb",
          "issueId": "307444027-oxPolicy_securityScan_205-java.lang.correctness.eqeq-false",
          "mainTitle": "`action == action` or `action != action` is always true. (Unless the value compared is a float or double). To test if `action` is not-a-number, use `Double.isNaN(action)`.",
          "secondTitle": "`action == action` or `action != action` is always true. (Unless the value compared is a float or double). To test if `action` is not-a-number, use `Double.isNaN(action)`.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Chris Campbell"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc3464210a0f3c68113f",
          "issueId": "307444027-oxPolicy_securityScan_205-DS425010-false",
          "mainTitle": "Either add integrity protection or use a data format like JSON.",
          "secondTitle": "Do not deserialize untrusted data.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Boy Baukema"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc3564210a0f3c681299",
          "issueId": "307444027-oxPolicy_securityScan_205-DS172411-false",
          "mainTitle": "Edit the setTimeout so that no untrusted data is included. If untrusted data is absolutely necessary a great deal of care should be taken to ensure it is properly escaped so that it cannot be executed. This is not as simple as just escaping quotes.",
          "secondTitle": "Review setTimeout for untrusted data",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Chris Campbell"
          ],
          "occurrences": 7,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "307444027",
            "name": "michaelhorty/VDemo_JAVA",
            "businessPriority": 13.857142857142858,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edaf164210a0f3c673ae9",
          "issueId": "704226371-oxPolicy_securityScan_205-python.lang.best-practice.unspecified-open-encoding-false",
          "mainTitle": "Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").",
          "secondTitle": "Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "704226371",
            "name": "michaelhorty/OX-API-Client",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1697176812236
        },
        {
          "id": "656edaf364210a0f3c674a91",
          "issueId": "688093659-oxPolicy_securityScan_205-DS176209-false",
          "mainTitle": "A \"TODO\" or similar was left in source code, possibly indicating incomplete functionality",
          "secondTitle": "Suspicious comment",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "688093659",
            "name": "MH-New-Organization/MH_NO_WEBG",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edaf364210a0f3c674af0",
          "issueId": "688093659-oxPolicy_securityScan_205-contrib.owasp.java.ssrf.owasp.java.ssrf.possible.import.statements-false",
          "mainTitle": "Non-exhaustive list of Libraries that provide functionality to accept URL as a parameter",
          "secondTitle": "Non-exhaustive list of Libraries that provide functionality to accept URL as a parameter",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "688093659",
            "name": "MH-New-Organization/MH_NO_WEBG",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699687834876
        },
        {
          "id": "656edaf364210a0f3c674c0c",
          "issueId": "708855481-oxPolicy_securityScan_205-python.lang.best-practice.unspecified-open-encoding-false",
          "mainTitle": "Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").",
          "secondTitle": "Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Kostya Zhuruev"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "708855481",
            "name": "oxsecurity/ox-api-client",
            "businessPriority": 12.471428571428572,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1698129622295
        },
        {
          "id": "656edc5264210a0f3c68f32d",
          "issueId": "191856056-oxPolicy_securityScan_205-DS172411-false",
          "mainTitle": "Edit the setTimeout so that no untrusted data is included. If untrusted data is absolutely necessary a great deal of care should be taken to ensure it is properly escaped so that it cannot be executed. This is not as simple as just escaping quotes.",
          "secondTitle": "Review setTimeout for untrusted data",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 54,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc5264210a0f3c68f483",
          "issueId": "191856056-oxPolicy_securityScan_205-DS176209-false",
          "mainTitle": "A \"TODO\" or similar was left in source code, possibly indicating incomplete functionality",
          "secondTitle": "Suspicious comment",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 80,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc5264210a0f3c68f66c",
          "issueId": "191856056-oxPolicy_securityScan_205-contrib.owasp.java.ssrf.owasp.java.ssrf.possible.import.statements-false",
          "mainTitle": "Non-exhaustive list of Libraries that provide functionality to accept URL as a parameter",
          "secondTitle": "Non-exhaustive list of Libraries that provide functionality to accept URL as a parameter",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 3,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc5264210a0f3c68f7ac",
          "issueId": "191856056-oxPolicy_securityScan_205-java.lang.correctness.eqeq-false",
          "mainTitle": "`start == start` or `start != start` is always true. (Unless the value compared is a float or double). To test if `start` is not-a-number, use `Double.isNaN(start)`.",
          "secondTitle": "`start == start` or `start != start` is always true. (Unless the value compared is a float or double). To test if `start` is not-a-number, use `Double.isNaN(start)`.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5264210a0f3c68f9a0",
          "issueId": "191856056-oxPolicy_securityScan_205-contrib.owasp.java.xxe.owasp.java.xxe.possible.import.statements-false",
          "mainTitle": "Non-exhaustive list of Libraries that provide functionality to accept XML as an input",
          "secondTitle": "Non-exhaustive list of Libraries that provide functionality to accept XML as an input",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699422021744
        },
        {
          "id": "656edc5364210a0f3c68fdbe",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.lang.correctness.useless-assignment-false",
          "mainTitle": "`n` is assigned twice; the first assignment is useless",
          "secondTitle": "`n` is assigned twice; the first assignment is useless",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 83,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5364210a0f3c68fe43",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.lang.best-practice.javascript-prompt-false",
          "mainTitle": "found prompt() call; should this be in production code?",
          "secondTitle": "found prompt() call; should this be in production code?",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5364210a0f3c68feb3",
          "issueId": "191856056-oxPolicy_securityScan_205-typescript.react.portability.i18next.i18next-key-format-false",
          "mainTitle": "Incorrect format of translation key in i18next",
          "secondTitle": "Translation key '$KEY' should match format 'MODULE.FEATURE.*'. Incorrect format may lead to visualization problems on website.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 16,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edc5364210a0f3c68fef6",
          "issueId": "191856056-oxPolicy_securityScan_205-DS189424-false",
          "mainTitle": "Edit the eval so that no untrusted data is included. If untrusted data is absolutely necessary a great deal of care should be taken to ensure it is properly escaped so that it cannot be executed. This is not as simple as just escaping quotes.",
          "secondTitle": "Review eval for untrusted data",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 24,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690260910134
        },
        {
          "id": "656edc5364210a0f3c6900b2",
          "issueId": "191856056-oxPolicy_securityScan_205-javascript.lang.best-practice.javascript-alert-false",
          "mainTitle": "found alert() call; should this be in production code?",
          "secondTitle": "found alert() call; should this be in production code?",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Michael Horty"
          ],
          "occurrences": 7,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "191856056",
            "name": "michaelhorty/WG384",
            "businessPriority": 9.7,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1688052362538
        },
        {
          "id": "656edaf364210a0f3c674ced",
          "issueId": "672064956-oxPolicy_securityScan_205-python.lang.security.audit.insecure-transport.requests.request-with-http-false",
          "mainTitle": "Man-in-the-Middle (MitM) vulnerability due to 'http://' usage",
          "secondTitle": "Detected a request using 'http://' in the 'requests.post' or 'requests.get' methods. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674d17",
          "issueId": "672064956-oxPolicy_securityScan_205-python.requests.best-practice.use-timeout-false",
          "mainTitle": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.",
          "secondTitle": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 4,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674dd2",
          "issueId": "672064956-oxPolicy_securityScan_205-python.lang.best-practice.unspecified-open-encoding-false",
          "mainTitle": "Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").",
          "secondTitle": "Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674e49",
          "issueId": "672064956-oxPolicy_securityScan_205-B404-false",
          "mainTitle": "blacklist",
          "secondTitle": "Consider possible security implications associated with the subprocess module.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674e65",
          "issueId": "672064956-oxPolicy_securityScan_205-B603-false",
          "mainTitle": "subprocess_without_shell_equals_true",
          "secondTitle": "subprocess call - check for execution of untrusted input.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674eab",
          "issueId": "672064956-oxPolicy_securityScan_205-B110-false",
          "mainTitle": "try_except_pass",
          "secondTitle": "Try, Except, Pass detected.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf364210a0f3c674ef2",
          "issueId": "672064956-oxPolicy_securityScan_205-python.lang.maintainability.code-after-unconditional-return-false",
          "mainTitle": "code after return statement will not be executed",
          "secondTitle": "code after return statement will not be executed",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Fabian Martinez Portantier"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "672064956",
            "name": "michaelhorty/vulpy",
            "businessPriority": 6.928571428571429,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1690604412127
        },
        {
          "id": "656edaf264210a0f3c673c9a",
          "issueId": "688095954-oxPolicy_securityScan_205-DS176209-false",
          "mainTitle": "A \"TODO\" or similar was left in source code, possibly indicating incomplete functionality",
          "secondTitle": "Suspicious comment",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "688095954",
            "name": "michaelhorty/TEST_REPO",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1694072718232
        },
        {
          "id": "656edaf264210a0f3c673cdb",
          "issueId": "688095954-oxPolicy_securityScan_205-contrib.owasp.java.ssrf.owasp.java.ssrf.possible.import.statements-false",
          "mainTitle": "Non-exhaustive list of Libraries that provide functionality to accept URL as a parameter",
          "secondTitle": "Non-exhaustive list of Libraries that provide functionality to accept URL as a parameter",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "michaelhorty"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "688095954",
            "name": "michaelhorty/TEST_REPO",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1699687834876
        },
        {
          "id": "656edaf264210a0f3c673f0d",
          "issueId": "647668897-oxPolicy_securityScan_205-DS172411-false",
          "mainTitle": "Edit the setTimeout so that no untrusted data is included. If untrusted data is absolutely necessary a great deal of care should be taken to ensure it is properly escaped so that it cannot be executed. This is not as simple as just escaping quotes.",
          "secondTitle": "Review setTimeout for untrusted data",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Gie-Art"
          ],
          "occurrences": 16,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c674013",
          "issueId": "647668897-oxPolicy_securityScan_205-DS176209-false",
          "mainTitle": "A \"TODO\" or similar was left in source code, possibly indicating incomplete functionality",
          "secondTitle": "Suspicious comment",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Gie-Art"
          ],
          "occurrences": 2,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        },
        {
          "id": "656edaf264210a0f3c67404c",
          "issueId": "647668897-oxPolicy_securityScan_205-javascript.lang.correctness.no-stringify-keys-false",
          "mainTitle": "JSON stringify does not produce a stable key ordering, and should not be relied on for producing object keys. Consider using json-stable-stringify instead.",
          "secondTitle": "JSON stringify does not produce a stable key ordering, and should not be relied on for producing object keys. Consider using json-stable-stringify instead.",
          "name": "SAST issue",
          "created": 1701763814500,
          "scanId": "fdfbcbc4-6590-484c-8d5a-98d7fed858c1",
          "owners": [
            "Gie-Art"
          ],
          "occurrences": 1,
          "comment": null,
          "severity": "Info",
          "policy": {
            "id": "oxPolicy_securityScan_205",
            "name": "SAST issue",
            "detailedDescription": "Static Application Security Testing (SAST) provides an in-depth analysis of application code to detect potential vulnerabilities before runtime. Failing to address issues highlighted by SAST can lead to security breaches, data leaks, and system compromises. As software complexities grow, integrating SAST early in the development lifecycle becomes increasingly vital for proactive security."
          },
          "category": {
            "name": "Code Security",
            "categoryId": 4
          },
          "app": {
            "id": "647668897",
            "name": "OX-Security-Demo/Bank-ecommerce",
            "businessPriority": 4.157142857142857,
            "type": "GitHub",
            "fakeApp": false
          },
          "createdAt": 1693550422116
        }
      ],
      "totalIssues": 635,
      "totalFilteredIssues": 635,
      "totalResolvedIssues": 0,
      "offset": 1000
    }
  }
}